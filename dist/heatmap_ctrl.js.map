{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","_","HeatmapCtrl","$scope","$injector","$timeout","variableSrv","timeSrv","events","on","onDataReceived","bind","overviewModel","focusModel","initialiseConfig","config","apiAddress","instancePropertyName","dateFormat","focusAreaColor","focusAreaSize","colors","marginBetweenOverviewMetrics","marginBetweenInstances","overviewPointWidth","overviewPointHeight","paddingBetweenGraphs","leftPadding","horizontalMargin","fontSize","focusPointWidth","focusMetricMaxHeight","marginBetweenFocusMetrics","marginBetweenFocusInstances","scope","elem","attrs","ctrl","parent","moveFocusArea","evt","fixFocusArea","selectNode","initialiseCanvases","data","updateVariable","load","isLoading","metricList","loadCount","fromDate","Math","round","timeRange","from","_d","getTime","toDate","to","getDataFromAPI","processRawData","metric","index","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","url","encodeURIComponent","open","send","length","includes","convertDataToFloat","initialiseMetricMinMax","initialiseColorMap","initiliseOverviewData","renderOverview","forEach","instance","values","value","parseFloat","min","max","point","checkAndSetOverviewMinMax","colorMap","Map","layerRange","i","threshold","set","metricInstance","newInstance","find","search","initaliseNewInstance","date","push","overviewContext","clearRect","overviewCanvas","width","height","clearFocus","drawOverviewData","drawOverviewDataWrapper","maxLength","getMaxLength","overviewInstantHeight","overviewWidth","overviewHeight","focusGraphMarginTop","$apply","instanceIndex","overviewY","metricIndex","pointIndex","x","color","getColorFromMap","fillStyle","y","fillRect","firstInstance","map","getContext","focusAreaCanvas","focusAreaContext","focusGraphCanvas","focusGraphContext","font","focusAreaIsFixed","drawFocus","preventDefault","mousePos","getMousePos","drawFocusArea","drawFocusGraph","hasFocus","canvas","rect","getBoundingClientRect","clientX","left","clientY","top","size","getFocusAreaSize","focusStartX","focusStartY","strokeStyle","strokeRect","initialiseFocusGraphData","drawFocusGraphLabels","drawFocusGraphData","overviewInstance","modalInstance","addFocusMetrics","getIndexesOfPointsInFocus","initialiseInstanceLayers","indexes","focusMetric","layerList","layer","valueList","horizontalX","setLineDash","instanceHeight","label","metrics","measureText","labelY","fillText","drawSeperator","lineY","beginPath","moveTo","lineTo","stroke","layerIndex","previousX","previousValue","valueIndex","moveContextBasedOnValue","closePath","fill","event","menuX","menuY","variables","v","name","setOptionAsCurrent","text","variableUpdated","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n        this.overviewModel = {};\n        this.focusModel = {};\n        this.initialiseConfig();\n    }\n\n    initialiseConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            instancePropertyName: \"instance\",\n            dateFormat: \"DD-MM-YYYY HH:mm\",\n            focusAreaColor: \"aqua\",\n            focusAreaSize: 30,\n            colors:\n                [\n                    [\"f2d9e6\", \"d98cb3\", \"bf4080\", \"73264d\"],\n                    [\"ccddff\", \"6699ff\", \"0055ff\", \"003399\"],\n                    [\"eeeedd\", \"cccc99\", \"aaaa55\", \"666633\"]\n                ],\n            marginBetweenOverviewMetrics: 2,\n            marginBetweenInstances: 6,\n            overviewPointWidth: 1,\n            overviewPointHeight: 2,\n            paddingBetweenGraphs: 50,\n            leftPadding: 0,\n            horizontalMargin: 40,\n            fontSize: 15,\n            focusPointWidth: 5,\n            focusMetricMaxHeight: 30,\n            marginBetweenFocusMetrics: 10,\n            marginBetweenFocusInstances: 20\n        }\n    }\n\n    link(scope, elem, attrs, ctrl) {\n        this.scope = scope;\n        this.elem = elem;\n        var parent = this;\n\n        scope.moveFocusArea = function (evt) {\n            parent.moveFocusArea.bind(parent, evt)();\n        }\n\n        scope.fixFocusArea = function (evt) {\n            parent.fixFocusArea.bind(parent, evt)();\n        }\n\n        scope.selectNode = function (evt) {\n            parent.selectNode.bind(parent, evt)();\n        }\n\n        this.initialiseCanvases();\n    }\n\n    onDataReceived(data) {\n        if (this.updateVariable) {\n            this.updateVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            if (this.scope.ctrl.isLoading) {\n                this.load();\n            } else {\n                this.scope.ctrl.isLoading = true;\n                this.overviewModel.metricList = [null, null, null];\n                this.loadCount = 0;\n                this.fromDate = Math.round(this.timeSrv.timeRange().from._d.getTime() / 1000);\n                this.toDate = Math.round(this.timeSrv.timeRange().to._d.getTime() / 1000);\n\n                this.getDataFromAPI(\"node_load1{job='node'}\", 0);\n\n                this.getDataFromAPI(`\n                        100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) \n                                * 100 / \n                                (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\n                    `, 1);\n\n                this.getDataFromAPI(`\n                    100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)',\n                                                                            mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) \n                                * 100 / \n                            (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\n                `, 2);\n\n                this.processRawData();\n            }\n        }, 100);\n    }\n\n    getDataFromAPI(metric, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(metric) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=15\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.scope.ctrl.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMax();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMax() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colors = this.config.colors[index];\n            metric.colorMap = new Map();\n            metric.layerRange = metric.max / (colors.length - 0.5);\n\n            for (var i = 0; i < colors.length; ++i) {\n                var threshold = {};\n                threshold.min = i * metric.layerRange;\n                threshold.max = threshold.min + metric.layerRange;\n                metric.colorMap.set(threshold, colors[i]);\n            }\n        });\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n\n        this.overviewModel.metricList.forEach((metric, index) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[index].push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n        newInstance.metricList = [[], [], []];\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.clearFocus();\n            this.drawOverviewData();\n        }\n    }\n\n    drawOverviewData() {\n        var parent = this;\n\n        this.$timeout(() => {\n            parent.drawOverviewDataWrapper.bind(parent)();\n        }, 100);\n    }\n\n    drawOverviewDataWrapper() {\n        var maxLength = this.getMaxLength();\n        this.overviewModel.overviewInstantHeight = this.config.overviewPointHeight * this.overviewModel.metricList.length +\n            this.config.marginBetweenOverviewMetrics * (this.overviewModel.metricList.length - 1) + this.config.marginBetweenInstances;\n        this.scope.ctrl.overviewWidth = maxLength * this.config.overviewPointWidth;\n        this.scope.ctrl.overviewHeight = this.overviewModel.data.length * this.overviewModel.overviewInstantHeight;\n        this.scope.ctrl.focusGraphMarginTop = this.scope.ctrl.overviewHeight + this.config.paddingBetweenGraphs;\n        this.scope.$apply();\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            instance.overviewY = instanceIndex * this.overviewModel.overviewInstantHeight;\n\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.forEach((point, pointIndex) => {\n                    point.x = this.config.leftPadding + pointIndex * this.config.overviewPointWidth;\n                    point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                    this.overviewContext.fillStyle = point.color;\n                    var y = instance.overviewY + metricIndex * this.config.overviewPointHeight * this.config.marginBetweenOverviewMetrics;\n                    this.overviewContext.fillRect(point.x, y, this.config.overviewPointHeight, this.config.overviewPointHeight);\n                });\n            });\n        });\n    }\n\n    getMaxLength() {\n        var firstInstance = this.overviewModel.data[0];\n        var maxLength = 0;\n\n        firstInstance.metricList.forEach((metric) => {\n            if (metric.length > maxLength) {\n                maxLength = metric.length;\n            }\n        });\n\n        return maxLength;\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = color;\n            }\n        });\n\n        return \"#\" + result;\n    }\n\n    initialiseCanvases() {\n        this.overviewCanvas = this.elem.find(\"#overviewCanvas\")[0];\n        this.overviewContext = this.overviewCanvas.getContext(\"2d\");\n\n        this.focusAreaCanvas = this.elem.find(\"#focusAreaCanvas\")[0];\n        this.focusAreaContext = this.focusAreaCanvas.getContext(\"2d\");\n\n        this.focusGraphCanvas = this.elem.find(\"#focusGraphCanvas\")[0];\n        this.focusGraphContext = this.focusGraphCanvas.getContext(\"2d\");\n        this.focusGraphContext.font = this.config.fontSize + \"px arial\";\n    }\n\n    moveFocusArea(evt) {\n        if (!this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n            evt.preventDefault();\n        }\n    }\n\n    fixFocusArea(evt) {\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        evt.preventDefault();\n    }\n\n    drawFocus(evt) {\n        this.mousePos = this.getMousePos(evt, this.overviewCanvas);\n        this.clearFocus();\n        this.drawFocusArea();\n        this.drawFocusGraph();\n    }\n\n    clearFocus() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n        this.focusGraphContext.clearRect(0, 0, this.focusGraphCanvas.width, this.focusGraphCanvas.height);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    drawFocusArea() {\n        var size = this.getFocusAreaSize();\n        this.focusStartX = Math.min(Math.max(0, this.mousePos.x - this.config.focusAreaSize), this.overviewCanvas.width - size);\n        this.focusStartY = Math.min(Math.max(0, this.mousePos.y - this.config.focusAreaSize), this.overviewCanvas.height - size);\n        this.focusAreaContext.strokeStyle = this.config.focusAreaColor;\n        this.focusAreaContext.strokeRect(this.focusStartX, this.focusStartY, size, size);\n    }\n\n    getFocusAreaSize() {\n        return this.config.focusAreaSize * 2;\n    }\n\n    drawFocusGraph() {\n        this.initialiseFocusGraphData();\n        this.drawFocusGraphLabels();\n        this.drawFocusGraphData();\n    }\n\n    initialiseFocusGraphData() {\n        this.focusModel.data = [];\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (overviewInstance.overviewY <= this.focusStartY + this.getFocusAreaSize() &&\n                overviewInstance.overviewY + this.overviewModel.overviewInstantHeight >= this.focusStartY) {\n                var modalInstance = {};\n                modalInstance.instance = overviewInstance.instance;\n                modalInstance.metricList = [];\n                this.addFocusMetrics(modalInstance, overviewInstance, this.getIndexesOfPointsInFocus(overviewInstance));\n                this.initialiseInstanceLayers(modalInstance);\n                this.focusModel.data.push(modalInstance);\n            }\n        });\n    }\n\n    getIndexesOfPointsInFocus(instance) {\n        var indexes = [];\n\n        for (var i = 0; i < instance.metricList.length; ++i) {\n            var metric = instance.metricList[i];\n\n            if (metric.length > 0) {\n                metric.forEach((point, index) => {\n                    if (point.x >= this.focusStartX && point.x <= this.focusStartX + this.getFocusAreaSize()) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    addFocusMetrics(modalInstance, overviewInstance, indexes) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexes.forEach((index) => {\n                focusMetric.data.push(overviewInstance.metricList[metricIndex][index]);\n            });\n\n            modalInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, index) => {\n            this.config.colors.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[index].layerRange;\n                });\n            });\n        });\n    }\n\n    drawFocusGraphLabels() {\n        this.focusModel.horizontalX = 0;\n        this.focusGraphContext.setLineDash([10, 10]);\n        this.focusGraphContext.fillStyle = \"black\";\n        var instanceHeight = this.config.focusMetricMaxHeight * this.overviewModel.metricList.length +\n            this.config.marginBetweenFocusMetrics * (this.overviewModel.metricList.length - 1) + this.config.marginBetweenFocusInstances;\n\n        this.focusModel.data.forEach((instance, index) => {\n            var x = this.config.leftPadding;\n            var label = instance.instance;\n            var metrics = this.focusGraphContext.measureText(label);\n            instance.y = index * instanceHeight;\n            var labelY = instance.y + instanceHeight / 2;\n            this.focusGraphContext.fillText(label, x, labelY);\n\n            if (index > 0) {\n                this.drawSeperator(instance, x);\n            }\n\n            if (metrics.width > this.focusModel.horizontalX) {\n                this.focusModel.horizontalX = metrics.width + this.config.leftPadding;\n            }\n        });\n\n        this.focusModel.horizontalX += this.config.horizontalMargin;\n    }\n\n    drawSeperator(instance, x) {\n        var lineY = instance.y - this.config.marginBetweenFocusInstances / 2;\n        this.focusGraphContext.beginPath();\n        this.focusGraphContext.moveTo(x, lineY);\n        this.focusGraphContext.lineTo(10000, lineY);\n        this.focusGraphContext.stroke();\n    }\n\n    drawFocusGraphData() {\n        this.focusModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.layerList.forEach((layer, layerIndex) => {\n                    var y = instance.y + (this.config.focusMetricMaxHeight + this.config.marginBetweenFocusMetrics) * metricIndex + this.config.focusMetricMaxHeight;\n                    this.focusGraphContext.beginPath();\n                    this.focusGraphContext.moveTo(this.focusModel.horizontalX, y);\n                    var x = this.focusModel.horizontalX;\n                    var previousX = x;\n                    var previousValue = 0;\n\n                    layer.valueList.forEach((value, valueIndex) => {\n                        x += valueIndex * this.config.focusPointWidth;\n                        this.moveContextBasedOnValue(value, previousX, previousValue, layerIndex, x, y, this.overviewModel.metricList[metricIndex].layerRange);\n                        previousX = x;\n                        previousValue = value;\n                    });\n\n                    this.focusGraphContext.lineTo(x, y);\n                    this.focusGraphContext.lineTo(this.focusModel.horizontalX, y);\n                    this.focusGraphContext.closePath();\n                    this.focusGraphContext.fillStyle = \"#\" + this.config.colors[metricIndex][layerIndex];\n                    this.focusGraphContext.fill();\n                });\n            });\n        });\n    }\n\n    moveContextBasedOnValue(value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            this.focusGraphContext.lineTo(previousX, y);\n        } else {\n            if (layerIndex > 0 && previousValue == 0) {\n                this.focusGraphContext.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                this.focusGraphContext.lineTo(x, y - this.config.focusMetricMaxHeight);\n            } else {\n                this.focusGraphContext.lineTo(x, y - value * this.config.focusMetricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    selectNode() {\n        if (!this.updateVariable) {\n            var mousePos = this.getMousePos(event, this.focusGraphCanvas);\n            this.scope.ctrl.menuX = mousePos.x;\n            this.scope.ctrl.menuY = mousePos.y;\n            var height = this.focusModel.instanceHeight + this.config.marginBetweenFocusInstances;\n\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                if (height * i <= mousePos.y && mousePos.y <= height * (i + 1)) {\n                    var instance = this.focusModel.data[i];\n\n                    this.variableSrv.variables.forEach((v) => {\n                        if (v.name == 'node') {\n                            this.variableSrv.setOptionAsCurrent(v, {\n                                text: instance.instance,\n                                value: instance.instance\n                            });\n\n                            this.updateVariable = true;\n                            this.variableSrv.variableUpdated(v, true);\n                        }\n                    });\n\n                    break;\n                }\n            }\n        }\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}