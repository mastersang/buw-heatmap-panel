{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","initialiseStartingVariables","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","focusAreaSize","xCrossSize","timeIndicator","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","panelDefaults","predefinedMetricList","name","query","defaults","panel","predefinedMetricOptionList","forEach","metric","push","metricList","colorList","luminanceChange","i","changeColorLuminance","firstLoad","overviewModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","scope","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","timeHighlightMode","POINT","RANGE","groupingThreshold","isGrouped","initialiseOverviewCanvasCursor","overviewCursor","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","isUpdatingVariable","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","total","getThresholdAverage","map","isBetween","target","start","end","sort","first","second","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","initialiseMetricSingleAttributeGroups","initialiseSingleAttributeGroupsColor","initialiseSingleAttributeInstanceGroupList","thresholdGroupListMap","populateSingleAttributeGroupList","thresholdValue","group","initialiseNewSingleAttributeGroups","instanceList","markerX","originalColor","groupIndex","populateMultiAttributeGroupList","initialiseMultiAttributeGroupsColor","findExistingMultiAttributeGroup","initialiseNewMultiAttributeGroup","instanceMetric","groupMetric","greyValue","overviewMetric","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","convertDateToString","toDateWidth","isCompressed","overviewWidth","getMaxMetricLength","overviewCanvasWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","getCurrentSingleAttributeGroupList","largestGroup","get","getCurrentMultiAttributeGroupList","groupCount","getMaxGroupCount","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","overviewInstanceHeight","drawSingeAttributeGroupedOverview","drawMultiAttributeGroupedOverview","drawGroupSize","drawGroupOverviewWrapper","drawMetricSeparator","metricIndexList","drawOverviewInstance","y","instanceIndex","pointHeight","marginBetweenInstances","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","floor","drawGroupBarAtPosition","format","changeGroupingSelection","clearTimeIndicator","isSelected","showFocus","timeRangeIndexList","evt","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","setOverviewMousePosition","hoveredMarker","checkAndSetSelectedOverviewMarker","checkMouseIsOnGroupAndSetHoveredGroup","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","focusAreaIsFixed","drawFocus","mousePosition","getMousePos","rect","getBoundingClientRect","clientX","left","clientY","top","selectedMetricIndex","checkAndSetHoveredGroup","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","markerIndex","marker","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","drawSelectedTimePoint","verticalLineX","compressedTimeIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","temp","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","endIndex","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","fixFocusArea","updatedSelectedGroups","addOrRemoveGroupToFocus","stopInterval","removeExisting","drawSelectedGroupsMarkers","drawFocusGraph","focusGroup","overviewGroup","remove","addGroupToFocus","overviewInstance","metricWithMostData","focusedIndexList","focusInstance","getFocusInstance","indexList","initialiseFocusInstanceData","drawOverviewGroupMarker","focusGroupWithInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","marginBetweenMarkers","drawFocusArea","checkMouseIsInMetric","size","getFocusAreaSize","minimumTopY","focusStartY","offset","getFocusAreaOffset","focusStartX","strokeRect","sourceMetricIndex","initialiseFocusGraphData","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","positionIndex","undefined","moveContextBasedOnValue","graphBeginX","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","updateVariable","variables","v","setOptionAsCurrent","text","variableUpdated","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n        this.initialiseStartingVariables();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 30,\n            marginBetweenGroups: 10,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 20\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 4,\n            ungroupedPointWidth: 20,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    query: \"100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    query: \"sum by (instance) (node_network_receive_bytes_total{job='node',device!~'^(?:docker|vboxnet|veth|lo).*'})\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    query: \"sum by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        _.defaults(this.panel, this.panelDefaults);\n        this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        this.panel.metricList.forEach((metric) => {\n            metric.colorList = [];\n            metric.colorList.push(metric.color);\n            var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n            for (var i = 0; i < this.config.colorCount - 1; ++i) {\n                var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n                metric.colorList.push(color);\n            }\n        });\n    }\n\n    initialiseStartingVariables() {\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupingThreshold = 0;\n        this.isGrouped = true;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        if (this.isUpdatingVariable) {\n            this.isUpdatingVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.panel.metricList[index].colorList;\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseMetricSingleAttributeGroups(metric, metricIndex);\n            this.initialiseSingleAttributeGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleAttributeInstanceGroupList();\n    }\n\n    initialiseMetricSingleAttributeGroups(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                var min = search.total * (1 - thresholdValue);\n                var max = search.total * (1 + thresholdValue);\n                return this.isBetween(instance.metricList[metricIndex].total, min, max);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleAttributeGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleAttributeInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                for (var i = 0; i < metric.thresholdGroupListMap.length; ++i) {\n                    var group = metric.thresholdGroupListMap[i];\n\n                    if (instance.metricList[metricIndex].total == group.total) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiAttributeGroupList(groupList, groupingThreshold);\n            this.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiAttributeGroupsColor();\n    }\n\n    populateMultiAttributeGroupList(groupList, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiAttributeGroup(groupList, thresholdValue, instance);\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiAttributeGroup(groupList, thresholdValue, instance) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n                var min = metric.total * (1 - thresholdValue);\n                var max = metric.total * (1 + thresholdValue);\n\n                if (!this.isBetween(instance.metricList[i].total, min, max)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiAttributeGroupsColor() {\n        this.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        return range;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocusArea();\n            this.drawOverview();\n        }\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n        this.scope.$apply();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        this.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n        var marginBetweenMetrics = this.isCompressed ? this.config.overview.compressedMarginBetweenMetrics : this.config.overview.decompressedMarginBetweenMetrics;\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph (groupsize excluded)\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleAttributeGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiAttributeGroupSize() * this.config.overview.multipleAttributeGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getCurrentSingleAttributeGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiAttributeGroupList() {\n        return this.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.isCompressed ? this.config.overview.compressedMarginBetweenMetrics : this.config.overview.decompressedMarginBetweenMetrics;\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                    metric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeAttributeGroupedOverview();\n        } else {\n            this.drawMultiAttributeGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeAttributeGroupedOverview() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            this.drawMetricSeparator(metric);\n        });\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight, this.config.overview.marginBetweenGroups, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, instanceIndex, pointHeight, marginBetweenInstances, metricIndexList) {\n        instance.y = this.overviewModel.overviewStartY + instanceIndex * (pointHeight + marginBetweenInstances);\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex, this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiAttributeGroupedOverview() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.overviewContext.fillStyle = \"black\";\n            this.overviewContext.fillText(\"Groups size\", (startX * 2 + maxGroupSizeBarLength - labelWidth) / 2, this.overviewModel.labelTextHeight);\n        });\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY +\n            groupIndex * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.decompressedMarginBetweenMetrics;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", (startX + maxEndX - labelWidth) / 2, this.overviewModel.labelTextHeight);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        if (!this.isCompressed) {\n            // this.drawGroupBars();\n        }\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.decompressedMarginBetweenMetrics / 2 -\n                Math.floor(this.config.overview.groupBarWidth / 2);\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.thresholdGroupListMap.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x, y, this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n        this.overviewContext.fillStyle = \"black\";\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var label = this.panel.metricList[i].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.clearFocusArea();\n        this.clearTimeIndicator();\n        this.focusModel.groupList = [];\n\n        this.overviewModel.thresholdGroupListMap.forEach((group) => {\n            group.isSelected = false;\n        })\n\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.thresholdGroupListMap) {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.isSelected = false;\n                });\n            }\n        });\n\n        this.showFocus = false;\n    }\n\n    changeGroupingThreshold() {\n        this.changeGroupingSelection();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.drawOverview();\n        this.clearFocusArea();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.thresholdGroupListMap) {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isGrouped && this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.overviewModel.isSelectingTimeRange = true;\n            this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset;\n            this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n        }\n    }\n\n    moveMouseOnOverview(evt) {\n        this.setOverviewMousePosition(evt);\n\n        if (this.isGrouped) {\n            this.initialiseOverviewCanvasCursor();\n            this.overviewModel.hoveredGroup = null;\n            this.overviewModel.hoveredMarker = null;\n            this.checkAndSetSelectedOverviewMarker();\n            this.checkMouseIsOnGroupAndSetHoveredGroup();\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.drawTimeIndicators();\n                } else {\n                    this.clearTimeIndicator();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                this.initialiseSelectedGroupTimeRangeIndexList();\n                this.drawSelectedTimeRanges();\n            }\n        } else if (!this.isCompressed && !this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    checkMouseIsOnGroupAndSetHoveredGroup() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n\n                    if (this.checkAndSetHoveredGroup(metric)) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup(metric) {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            groupList = this.getCurrentSingleAttributeGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiAttributeGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.overviewCursor = \"pointer\";\n            return true;\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.overviewCursor = \"pointer\";\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.drawTimeIndicatorWrapper(metric);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(metric) {\n        var horizontalLineY = this.drawHorizontalTimeLine(metric, this.overviewModel.hoveredGroup);\n        this.drawSelectedTimePoint(metric, horizontalLineY);\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY) {\n        var verticalLineX = metric.startX + this.overviewModel.mousePositionXOffset;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var instanceMetric = this.overviewModel.hoveredGroup.instanceList[0].metricList[metricIndex];\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            if (this.isCompressed) {\n                for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (this.checkDataPointIsSelectedAndDrawTimeLabel(point, this.config.overview.pointWidth)) {\n                        return;\n                    }\n                }\n            } else {\n                for (var compressedTimeIndex = 0; compressedTimeIndex < instanceMetric.data.length; ++compressedTimeIndex) {\n                    var point = instanceMetric.data[compressedTimeIndex];\n\n                    if (this.checkDataPointIsSelectedAndDrawTimeLabel(point, this.config.overview.pointWidth)) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point, pointWidth) {\n        if (this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + pointWidth)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var startPoint = instanceMetric.data[group.timeRangeIndexList[0]];\n\n                if (startPoint) {\n                    var overviewMetric = this.overviewModel.metricList[metricIndex];\n                    var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n                    var endIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n                    var startX = startPoint.x;\n                    var endX = instanceMetric.data[endIndex].x + this.config.overview.pointWidth;\n                    var width = endX - startX;\n                    var height = group.y - startY;\n                    this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n                }\n            });\n        }\n    }\n\n    mouseUpOnOverView(evt) {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph();\n            }\n        } else if (!this.isCompressed) {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph();\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        })\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.clearFocusArea();\n        this.overviewModel.groupMarkerList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, [metric])\n                });\n            });\n        } else {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n            });\n        }\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            // only update focus graph if mouse is pointing on one of metric overview graphs\n            if (this.checkMouseIsInMetric(metric)) {\n                this.drawFocusGraph();\n                break;\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            this.clearFocusArea();\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            var size = this.getFocusAreaSize();\n            var offset = this.getFocusAreaOffset();\n\n            if (offset >= 0) {\n                this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n                this.overviewModel.metricList.forEach((metric) => {\n                    metric.focusStartX = metric.startX + offset;\n                    this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n                });\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (this.checkMouseIsInMetric(metric)) {\n                this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                this.focusModel.sourceMetricIndex = i;\n\n                return Math.min(Math.max(metric.startX,\n                    this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                    metric.endX - this.getFocusAreaSize()) - metric.startX;\n            }\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.panel.metricList[metricIndex].colorList.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var canvas = this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var maxMetricLength = this.getMaxMetricLength();\n        this.drawGroupedFocusGraphInstance(canvas, instance, Array.from(Array(maxMetricLength).keys()), this.getFocusGraphPointWidth());\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            var pointWidth = Math.floor(this.focusGraphWidth / group.overviewGroup.timeRangeIndexList.length);\n            this.drawGroupedFocusGraphInstance(canvas, instance, group.overviewGroup.timeRangeIndexList, pointWidth);\n        }\n    }\n\n    drawGroupedFocusGraphInstance(canvas, instance, valueIndexList, pointWidth) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context, valueIndexList, pointWidth);\n    }\n\n    drawFocusGraphInstance(instance, context, valueIndexList, pointWidth) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != undefined) {\n                        x = pointWidth * positionIndex;\n                        this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                            this.overviewModel.metricList[metricIndex].layerRange);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context, Array.from(Array(this.getMaxMetricLength()).keys()));\n        });\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectNode(instance) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        this.updateVariable(instance);\n    }\n\n    updateVariable(instance) {\n        this.variableSrv.variables.forEach((v) => {\n            if (v.name == \"node\") {\n                this.variableSrv.setOptionAsCurrent(v, {\n                    text: instance.instance,\n                    value: instance.instance\n                });\n\n                this.isUpdatingVariable = true;\n                this.variableSrv.variableUpdated(v, true);\n            }\n        });\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}