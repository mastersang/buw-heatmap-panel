{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","firstLoad","overviewModel","groupMarkerList","focusModel","groupList","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","events","on","onInitEditMode","bind","onDataReceived","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","startingGreyColor","endingGrayColor","sortOrder","intervalTimer","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","focusAreaSize","xCrossSize","timeIndicator","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","panelDefaults","predefinedMetricList","name","query","defaults","panel","predefinedMetricOptionList","forEach","metric","push","metricList","colorList","luminanceChange","i","changeColorLuminance","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","scope","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","timeHighlightMode","POINT","RANGE","isGrouped","initialiseOverviewCanvasCursor","overviewCursor","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphTimeIndicatorCanvas","focusGraphTimeIndicatorContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","isUpdatingVariable","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","total","getThresholdAverage","map","isBetween","target","start","end","sort","first","second","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","group","initialiseNewSingleAttributeGroups","instanceList","initialiseSingleAttributeGroupsColor","initialiseSingleAttributeInstanceGroupList","markerX","originalColor","groupIndex","initialiseNewMultiAttributeGroup","initialiseMultiAttributeGroupsColor","instanceMetric","groupMetric","colorStep","greyValue","overviewMetric","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getDateString","toDateWidth","isCompressed","overviewWidth","getMaxMetricLength","overviewCanvasWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","largestGroup","groupCount","getMaxGroupCount","overviewHeight","metricWithMostGroups","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","previousMetric","startX","endX","maxGroupSizeBarLength","overviewInstanceHeight","drawGroupOverviewWrapper","drawMetricSeparator","metricIndexList","getAllMetricIndexList","drawGroupSize","drawOverviewInstance","y","instanceIndex","pointHeight","marginBetweenInstances","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","drawGroupBars","drawGroupBarAtPosition","floor","format","changeGroupingSelection","isSelected","showFocus","clearTimeIndicator","timeRangeIndexList","evt","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","setOverviewMousePosition","hoveredMarker","checkAndSetSelectedOverviewMarker","checkMouseIsOnGroupAndSetHoveredGroup","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","focusAreaIsFixed","drawFocus","mousePosition","getMousePos","rect","getBoundingClientRect","clientX","left","clientY","top","selectedMetricIndex","checkAndSetHoveredGroup","checkGroupIsHovered","markerIndex","marker","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","drawSelectedTimePoint","verticalLineX","compressedTimeIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","temp","drawSelectedTimeRangeWrapper","startPoint","endIndex","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","fixFocusArea","updatedSelectedGroups","addOrRemoveGroupToFocus","stopInterval","removeExisting","drawSelectedGroupsMarkers","drawFocusGraph","focusGroup","overviewGroup","remove","addGroupToFocus","overviewInstance","metricWithMostData","focusedIndexList","focusInstance","getFocusInstance","indexList","initialiseFocusInstanceData","drawOverviewGroupMarker","focusGroupWithInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","marginBetweenMarkers","drawFocusArea","checkMouseIsInMetric","size","getFocusAreaSize","minimumTopY","focusStartY","offset","getFocusAreaOffset","focusStartX","strokeRect","sourceMetricIndex","initialiseFocusGraphData","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","positionIndex","undefined","moveContextBasedOnValue","graphBeginX","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","updateVariable","variables","v","setOptionAsCurrent","text","variableUpdated","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n\n            // determines which the order of attributes to use for sorting\n            sortOrder: [0, 1, 2],\n            intervalTimer: 70\n        }\n\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 30,\n            marginBetweenGroups: 10,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 20\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 4,\n            ungroupedPointWidth: 20,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    query: \"100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    query: \"sum by (instance) (node_network_receive_bytes_total{job='node',device!~'^(?:docker|vboxnet|veth|lo).*'})\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    query: \"sum by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        _.defaults(this.panel, this.panelDefaults);\n        this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        this.panel.metricList.forEach((metric) => {\n            metric.colorList = [];\n            metric.colorList.push(metric.color);\n            var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n            for (var i = 0; i < this.config.colorCount - 1; ++i) {\n                var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n                metric.colorList.push(color);\n            }\n        });\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.isGrouped = true;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph time indicator\n        this.focusGraphTimeIndicatorCanvas = this.getElementByID(\"focusGraphTimeIndicatorCanvas\");\n        this.focusGraphTimeIndicatorContext = this.getCanvasContext(this.focusGraphTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        if (this.isUpdatingVariable) {\n            this.isUpdatingVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.panel.metricList[index].colorList;\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < this.config.sortOrder.length; ++i) {\n                var metricIndex = this.config.sortOrder[i];\n\n                if (first.metricList[metricIndex].total != second.metricList[metricIndex].total) {\n                    return first.metricList[metricIndex].total - second.metricList[metricIndex].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.groupList = [];\n\n            this.overviewModel.data.forEach((instance) => {\n                var group = _.find(metric.groupList, (search) => {\n                    return instance.metricList[metricIndex].total == search.total;\n                });\n\n                if (!group) {\n                    group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                    metric.groupList.push(group);\n                }\n\n                group.instanceList.push(instance);\n            });\n\n            metric.groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            this.initialiseSingleAttributeGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleAttributeInstanceGroupList();\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleAttributeGroupsColor(metric, metricIndex) {\n        var luminanceChange = -this.config.maxLuminanceChange / metric.groupList.length;\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.groupList.forEach((group, groupIndex) => {\n            group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n        });\n    }\n\n    initialiseSingleAttributeInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                for (var i = 0; i < metric.groupList.length; ++i) {\n                    var group = metric.groupList[i];\n\n                    if (instance.metricList[metricIndex].total == group.total) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.groupList = [];\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(this.overviewModel.groupList, (search) => {\n                for (var i = 0; i < instance.metricList.length; ++i) {\n                    if (instance.metricList[i].total != search.metricList[i].total) {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                this.overviewModel.groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n\n        this.initialiseMultiAttributeGroupsColor();\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiAttributeGroupsColor() {\n        var colorStep = (this.config.startingGreyColor - this.config.endingGrayColor) / this.overviewModel.groupList.length;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var greyValue = Math.round(this.config.startingGreyColor - colorStep * groupIndex);\n            group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n        });\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        return range;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocusArea();\n            this.drawOverview();\n        }\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n        this.scope.$apply();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        this.overviewModel.toDate = this.getDateString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n        var marginBetweenMetrics = this.isCompressed ? this.config.overview.compressedMarginBetweenMetrics : this.config.overview.decompressedMarginBetweenMetrics;\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph (groupsize excluded)\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleAttributeGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiAttributeGroupSize() * this.config.overview.multipleAttributeGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var largestGroup = _.maxBy(metric.groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n\n        this.overviewModel.groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metricWithMostGroups = _.maxBy(this.overviewModel.metricList, (metric) => {\n                return metric.groupList.length;\n            });\n\n            groupCount = metricWithMostGroups.groupList.length;\n        } else {\n            groupCount = this.overviewModel.groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.isCompressed ? this.config.overview.compressedMarginBetweenMetrics : this.config.overview.decompressedMarginBetweenMetrics;\n\n        this.overviewModel.metricList.forEach((metric, index) => {\n            if (index > 0) {\n                var previousMetric = this.overviewModel.metricList[index - 1];\n                metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n                if (this.isGrouped) {\n                    metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                    if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                        var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                        metric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                    }\n                }\n            } else {\n                metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n            }\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                metric.groupList.forEach((group, groupIndex) => {\n                    this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n                });\n\n                this.drawMetricSeparator(metric);\n            });\n        } else {\n            this.overviewModel.groupList.forEach((group, groupIndex) => {\n                var metricIndexList = this.getAllMetricIndexList();\n                this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n            });\n\n            this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight, this.config.overview.marginBetweenGroups, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, instanceIndex, pointHeight, marginBetweenInstances, metricIndexList) {\n        instance.y = this.overviewModel.overviewStartY + instanceIndex * (pointHeight + marginBetweenInstances);\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex, this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n\n            metric.groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.overviewContext.fillStyle = \"black\";\n            this.overviewContext.fillText(\"Groups size\", (startX * 2 + maxGroupSizeBarLength - labelWidth) / 2, this.overviewModel.labelTextHeight);\n        });\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY +\n            groupIndex * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.decompressedMarginBetweenMetrics;\n        var maxEndX = 0;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", (startX + maxEndX - labelWidth) / 2, this.overviewModel.labelTextHeight);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        if (!this.isCompressed) {\n            this.drawGroupBars();\n        }\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.decompressedMarginBetweenMetrics / 2;\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.groupList.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x - Math.floor(this.config.overview.groupBarWidth / 2), y,\n                this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n        this.overviewContext.fillStyle = \"black\";\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var label = this.panel.metricList[i].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    getDateString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.focusModel.groupList = [];\n\n        this.overviewModel.groupList.forEach((group) => {\n            group.isSelected = false;\n        })\n\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.groupList) {\n                metric.groupList.forEach((group) => {\n                    group.isSelected = false;\n                });\n            }\n        });\n\n        this.showFocus = false;\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.drawOverview();\n        this.clearFocusArea();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.groupList) {\n            this.overviewModel.groupList.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.groupList.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isGrouped && this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.overviewModel.isSelectingTimeRange = true;\n            this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset;\n            this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n        }\n    }\n\n    moveMouseOnOverview(evt) {\n        this.setOverviewMousePosition(evt);\n\n        if (this.isGrouped) {\n            this.initialiseOverviewCanvasCursor();\n            this.overviewModel.hoveredGroup = null;\n            this.overviewModel.hoveredMarker = null;\n            this.checkAndSetSelectedOverviewMarker();\n            this.checkMouseIsOnGroupAndSetHoveredGroup();\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.drawTimeIndicators();\n                } else {\n                    this.clearTimeIndicator();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                this.initialiseSelectedGroupTimeRangeIndexList();\n                this.drawSelectedTimeRanges();\n            }\n        } else if (!this.isCompressed && !this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    checkMouseIsOnGroupAndSetHoveredGroup() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n\n                    if (this.checkAndSetHoveredGroup(metric)) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup(metric) {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            for (var i = 0; i < metric.groupList.length; ++i) {\n                var group = metric.groupList[i];\n\n                if (this.checkGroupIsHovered(group)) {\n                    return true;\n                }\n            }\n        } else {\n            for (var i = 0; i < this.overviewModel.groupList.length; ++i) {\n                var group = this.overviewModel.groupList[i];\n\n                if (this.checkGroupIsHovered(group)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.overviewCursor = \"pointer\";\n            return true;\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.overviewCursor = \"pointer\";\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.drawTimeIndicatorWrapper(metric);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(metric) {\n        var horizontalLineY = this.drawHorizontalTimeLine(metric, this.overviewModel.hoveredGroup);\n        this.drawSelectedTimePoint(metric, horizontalLineY);\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY) {\n        var verticalLineX = metric.startX + this.overviewModel.mousePositionXOffset;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var instanceMetric = this.overviewModel.hoveredGroup.instanceList[0].metricList[metricIndex];\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            if (this.isCompressed) {\n                for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (this.checkDataPointIsSelectedAndDrawTimeLabel(point, this.config.overview.pointWidth)) {\n                        return;\n                    }\n                }\n            } else {\n                for (var compressedTimeIndex = 0; compressedTimeIndex < instanceMetric.data.length; ++compressedTimeIndex) {\n                    var point = instanceMetric.data[compressedTimeIndex];\n\n                    if (this.checkDataPointIsSelectedAndDrawTimeLabel(point, this.config.overview.pointWidth)) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point, pointWidth) {\n        if (this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + pointWidth)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.getDateString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            this.overviewModel.groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var startPoint = instanceMetric.data[group.timeRangeIndexList[0]];\n\n                if (startPoint) {\n                    var overviewMetric = this.overviewModel.metricList[metricIndex];\n                    var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n                    var endIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n                    var startX = startPoint.x;\n                    var endX = instanceMetric.data[endIndex].x + this.config.overview.pointWidth;\n                    var width = endX - startX;\n                    var height = group.y - startY;\n                    this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n                }\n            });\n        }\n    }\n\n    mouseUpOnOverView(evt) {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph();\n            }\n        } else if (!this.isCompressed) {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph();\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        })\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.clearFocusArea();\n        this.overviewModel.groupMarkerList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, [metric])\n                });\n            });\n        } else {\n            this.overviewModel.groupList.forEach((group) => {\n                this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n            });\n        }\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            // only update focus graph if mouse is pointing on one of metric overview graphs\n            if (this.checkMouseIsInMetric(metric)) {\n                this.drawFocusGraph();\n                break;\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            this.clearFocusArea();\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            var size = this.getFocusAreaSize();\n            var offset = this.getFocusAreaOffset();\n\n            if (offset >= 0) {\n                this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n                this.overviewModel.metricList.forEach((metric) => {\n                    metric.focusStartX = metric.startX + offset;\n                    this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n                });\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (this.checkMouseIsInMetric(metric)) {\n                this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                this.focusModel.sourceMetricIndex = i;\n\n                return Math.min(Math.max(metric.startX,\n                    this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                    metric.endX - this.getFocusAreaSize()) - metric.startX;\n            }\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.panel.metricList[metricIndex].colorList.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.getDateString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.getDateString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var canvas = this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var maxMetricLength = this.getMaxMetricLength();\n        this.drawGroupedFocusGraphInstance(canvas, instance, Array.from(Array(maxMetricLength).keys()));\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            this.drawGroupedFocusGraphInstance(canvas, instance, group.overviewGroup.timeRangeIndexList);\n        }\n    }\n\n    drawGroupedFocusGraphInstance(canvas, instance, valueIndexList) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context, valueIndexList);\n    }\n\n    drawFocusGraphInstance(instance, context, valueIndexList) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != undefined) {\n                        x = this.getFocusGraphPointWidth() * positionIndex;\n                        this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                            this.overviewModel.metricList[metricIndex].layerRange);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context, Array.from(Array(this.getMaxMetricLength()).keys()));\n        });\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectNode(instance) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        this.updateVariable(instance);\n    }\n\n    updateVariable(instance) {\n        this.variableSrv.variables.forEach((v) => {\n            if (v.name == \"node\") {\n                this.variableSrv.setOptionAsCurrent(v, {\n                    text: instance.instance,\n                    value: instance.instance\n                });\n\n                this.isUpdatingVariable = true;\n                this.variableSrv.variableUpdated(v, true);\n            }\n        });\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}