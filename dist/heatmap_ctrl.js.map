{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","relativeTimeThreshold","_","HeatmapCtrl","$scope","$injector","$timeout","variableSrv","timeSrv","events","on","onDataReceived","bind","overviewModel","scope","ctrl","focusModel","groupList","initialiseConfig","config","apiAddress","dateFormat","marginBetweenOverviewAndFocus","metricLabelList","colors","sortOrder","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseFocusGraphConfig","overview","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","groupedPointHeight","ungroupedPointHeight","verticalMarginBetweenMetrics","horizontalMarginBetweenMetrics","marginBetweenInstances","startingGreyColor","endingGrayColor","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","size","xCrossSize","focusGraph","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","maxWidth","maxHeight","elem","initialiseControl","initialiseUIFunctions","initialiseUIElements","enumList","linkingMode","X_CROSS","NORMAL_CROSS","CHANGE_COLOR","groupingMode","SINGLE","MULTIPLE","isGrouped","initialiseOverviewCanvasCursor","overviewCursor","parent","selectOverviewMode","selectLinker","selectGroupingMode","groupUngroup","moveMouseOnOverview","evt","clickOnOverView","showNodes","group","event","selectNode","instance","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","data","loaded","load","isLoading","$apply","metricList","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","Math","round","getTime","metric","index","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","url","encodeURIComponent","open","send","length","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","renderOverview","forEach","values","value","parseFloat","min","max","point","checkAndSetOverviewMinMax","colorList","layerRange","colorMap","getColorMap","Map","i","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","push","total","getThresholdAverage","map","sort","first","second","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","initialiseNewSingleAttributeGroups","instanceList","initialiseNewMultiAttributeGroup","instanceMetric","groupMetric","clearFocus","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","overviewWidth","getMaxMetricLength","overviewCanvasWidth","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","instanceWithMostPoints","maxBy","largestGroup","groupCount","getMaxGroupCount","metricWithMostGroups","font","metricWidth","overviewEndY","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawTimeLabels","overviewInstanceHeight","groupIndex","drawGroupOverviewWrapper","metricIndexList","getAllMetricIndexList","drawGroupSize","drawMetricSeparator","drawOverviewInstance","y","pointHeight","endY","drawOverviewInstanceMetric","overviewMetric","previousMetric","startX","endX","maxGroupSizeBarLength","drawOverviewInstancePoints","pointIndex","x","getColorFromMap","fillStyle","fillRect","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","instanceIndex","drawGroupBars","colorStep","drawGroupBarAtPosition","greyValue","floor","setOverviewContextTimeFont","getDateString","toDateWidth","format","drawFocusArea","changeGroupingSelection","showFocus","setOverviewMousePosition","found","overviewIndex","mousePosition","checkAndSetSelectedGroup","focusAreaIsFixed","drawFocus","getMousePos","checkGroupIsSelected","selectedGroup","checkAndAddGroupToFocus","fixFocusArea","focusGroup","overviewGroup","remove","addGroupToFocus","drawFocusGraph","overviewInstance","metricWithMostData","focusedIndexList","focusInstance","getFocusInstance","rect","getBoundingClientRect","clientX","left","clientY","top","getFocusAreaSize","minimumTopY","focusStartY","drawFocusAreaAndLinkers","doDrawLinkers","offset","getFocusAreaOffset","focusStartX","strokeRect","drawLinkers","checkMouseIsInMetric","mousePositionXOffset","sourceMetricIndex","pixelData","getImageData","getLinkerTargetInstance","drawLinkersByMode","drawXCross","drawNormalCross","changeInstanceColor","centerX","leftStartX","rightStartX","bottomInstance","drawXCrossLine","drawLineOnFocusAreaCanvas","focusSize","centertX","distanceBetweenLines","leftLineX","rightLineX","topLineY","bottomLineY","drawNormalCrossLines","instancePoint","metricInstanceIndex","metricPoint","initialiseFocusGraphData","getFocusGraphPointWidth","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","context","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","moveContextBasedOnValue","graphBeginX","scrollTop","scrollByInstance","focusModelInstance","isSelected","preventDefault","updateVariable","variables","v","name","setOptionAsCurrent","text","variableUpdated","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment, { relativeTimeThreshold } from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n        this.overviewModel = {};\n        this.scope.ctrl.focusModel = {};\n        this.scope.ctrl.focusModel.groupList = [];\n        this.initialiseConfig();\n    }\n\n    initialiseConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY hh:mm:ss\",\n            marginBetweenOverviewAndFocus: 50,\n\n            // color schemes for metrics\n            metricLabelList: [\"CPU\", \"Memory\", \"Disk\"],\n\n            // color schemes for metrics\n            colors: [\n                [\"f2d9e6\", \"d98cb3\", \"bf4080\", \"73264d\"], // red\n                [\"ccddff\", \"6699ff\", \"0055ff\", \"003399\"], // blue\n                [\"eeeedd\", \"cccc99\", \"aaaa55\", \"666633\"], // green\n            ],\n\n            // determines which the order of attributes to use for sorting\n            sortOrder: [0, 1, 2],\n        }\n\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            metricFontSize: 15,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            groupedPointHeight: 5,\n            ungroupedPointHeight: 1,\n            verticalMarginBetweenMetrics: 2,\n            horizontalMarginBetweenMetrics: 30,\n            marginBetweenInstances: 6,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 10,\n            marginBetweenMetricAndGroupSize: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            size: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            groupedPointWidth: 3,\n            ungroupedPointWidth: 20,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxWidth: 10000,\n            maxHeight: 10000\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIFunctions();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.scope.ctrl.enumList = {\n            linkingMode: {\n                X_CROSS: \"1\",\n                NORMAL_CROSS: \"2\",\n                CHANGE_COLOR: \"3\",\n            },\n\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            }\n        };\n\n        this.scope.ctrl.linkingMode = this.scope.ctrl.enumList.linkingMode.X_CROSS;\n        this.scope.ctrl.groupingMode = this.scope.ctrl.enumList.groupingMode.SINGLE;\n        this.scope.ctrl.isGrouped = true;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.scope.ctrl.overviewCursor = \"crosshair\";\n    }\n\n    initialiseUIFunctions() {\n        var parent = this;\n\n        this.scope.selectOverviewMode = function () {\n            parent.selectOverviewMode();\n        }\n\n        this.scope.selectLinker = function () {\n            parent.selectLinker();\n        }\n\n        this.scope.selectGroupingMode = function () {\n            parent.selectGroupingMode();\n        }\n\n        this.scope.groupUngroup = function () {\n            parent.groupUngroup();\n        }\n\n        this.scope.moveMouseOnOverview = function (evt) {\n            parent.moveMouseOnOverview.bind(parent, evt)();\n        }\n\n        this.scope.clickOnOverView = function (evt) {\n            parent.clickOnOverView.bind(parent, evt)();\n        }\n\n        this.scope.showNodes = function (group, event) {\n            parent.showNodes.bind(parent, group, event)();\n        }\n\n        this.scope.selectNode = function (instance) {\n            parent.selectNode.bind(parent, instance)();\n        }\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // focus graph\n        this.scope.ctrl.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.scope.ctrl.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onDataReceived(data) {\n        if (!this.loaded) {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.scope.ctrl.isLoading = true;\n            this.scope.$apply();\n            this.overviewModel.metricList = [null, null, null];\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.getDataFromAPI(\"node_load1{job='node'}\", 0);\n\n            this.getDataFromAPI(`\n                        100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) \n                                * 100 / \n                                (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\n                    `, 1);\n\n            this.getDataFromAPI(`\n                    100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)',\n                                                                            mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) \n                                * 100 / \n                            (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\n                `, 2);\n\n            this.loaded = true;\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(metric, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(metric) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.scope.ctrl.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.config.colors[index];\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colors) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colors.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2\n            colorMap.set(threshold, colors[i]);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.config.colors.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < this.config.sortOrder.length; ++i) {\n                var metricIndex = this.config.sortOrder[i];\n\n                if (first.metricList[metricIndex].total != second.metricList[metricIndex].total) {\n                    return first.metricList[metricIndex].total - second.metricList[metricIndex].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.groupList = [];\n\n            this.overviewModel.data.forEach((instance) => {\n                var group = _.find(metric.groupList, (search) => {\n                    return instance.metricList[metricIndex].total == search.total;\n                });\n\n                if (!group) {\n                    group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                    metric.groupList.push(group);\n                }\n\n                group.instanceList.push(instance);\n            });\n        });\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.groupList = [];\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(this.overviewModel.groupList, (search) => {\n                for (var i = 0; i < instance.metricList.length; ++i) {\n                    if (instance.metricList[i].total != search.metricList[i].total) {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                this.overviewModel.groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocus();\n            this.drawOverview();\n        }\n    }\n\n    clearFocus() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.scope.ctrl.focusGraphMarginTop = this.scope.ctrl.overviewHeight + this.config.marginBetweenOverviewAndFocus;\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n        this.scope.$apply();\n    }\n\n    setOverviewWidth() {\n        this.scope.ctrl.overviewWidth = this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth +\n            (this.overviewModel.metricList.length - 1) * this.config.overview.horizontalMarginBetweenMetrics;\n        this.scope.ctrl.overviewCanvasWidth = this.scope.ctrl.overviewWidth;\n\n        if (this.scope.ctrl.isGrouped) {\n            this.scope.ctrl.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n            if (this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n                this.scope.ctrl.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n                this.overviewModel.metricList.forEach((metric) => {\n                    this.scope.ctrl.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric);\n                });\n            }\n        } else {\n            this.scope.ctrl.overviewCanvasWidth += this.getMaxMultiAttributeGroupSize() + this.config.overview.horizontalMarginBetweenMetrics;\n        }\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var largestGroup = _.maxBy(metric.groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n\n        this.overviewModel.groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    setOverviewHeight() {\n        if (this.scope.ctrl.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.scope.ctrl.overviewHeight = groupCount * (this.config.overview.groupedPointHeight * 2); // 2 = group + margin\n        } else {\n            this.scope.ctrl.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        this.scope.ctrl.overviewHeight += (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2; // Metric and time labels\n    }\n\n    getMaxGroupCount() {\n        var groupCount;\n\n        if (this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n            var metricWithMostGroups = _.maxBy(this.overviewModel.metricList, (metric) => {\n                return metric.groupList.length;\n            });\n\n            groupCount = metricWithMostGroups.groupList.length;\n        } else {\n            groupCount = this.overviewModel.groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.metricWidth = this.getMaxMetricLength() * this.config.overview.pointWidth;\n        this.overviewModel.overviewEndY = 0;\n\n        if (this.scope.ctrl.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawTimeLabels();\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                metric.groupList.forEach((group, groupIndex) => {\n                    this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n                });\n            });\n        } else {\n            this.overviewModel.groupList.forEach((group, groupIndex) => {\n                var metricIndexList = this.getAllMetricIndexList();\n                this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n            });\n        }\n\n        this.drawGroupSize();\n        this.drawMetricSeparator();\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight,\n            this.config.overview.groupedPointHeight, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, index, pointHeight, marginBetweenInstances, metricIndexList) {\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        instance.y = this.overviewModel.overviewStartY + index * (pointHeight + marginBetweenInstances);\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstanceMetric(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstanceMetric(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            overviewMetric.startX = previousMetric.endX + this.config.overview.horizontalMarginBetweenMetrics + this.config.overview.marginBetweenMarkerAndGroup;\n\n            if (this.scope.ctrl.isGrouped && this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                overviewMetric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n            }\n        } else {\n            overviewMetric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n\n        this.drawOverviewInstancePoints(instance, metricIndex, overviewMetric, pointHeight);\n        overviewMetric.endX = overviewMetric.startX + this.overviewModel.metricWidth;\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, overviewMetric, pointHeight) {\n        var instanceMetric = instance.metricList[metricIndex];\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            point.x = overviewMetric.startX + pointIndex * this.config.overview.pointWidth;\n            point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n            this.overviewContext.fillStyle = point.color;\n            this.overviewContext.fillRect(point.x, instance.y, this.config.overview.pointWidth, pointHeight);\n        });\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = color;\n            }\n        });\n\n        return \"#\" + result;\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n\n            metric.groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.overviewContext.fillStyle = \"black\";\n            this.overviewContext.fillText(\"Groups size\", (startX * 2 + maxGroupSizeBarLength - labelWidth) / 2, this.overviewModel.labelTextHeight);\n        });\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY + groupIndex * this.config.overview.groupedPointHeight * 2; // 2 = instance + margin between instances\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.scope.ctrl.overviewWidth + this.config.overview.horizontalMarginBetweenMetrics;\n        var maxEndX = 0;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", (startX + maxEndX - labelWidth) / 2, this.overviewModel.labelTextHeight);\n    }\n\n    drawMetricSeparator() {\n        this.overviewContext.strokeStyle = \"gray\";\n\n        for (var i = 0; i < this.overviewModel.metricList.length - 1; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var x = metric.endX + this.config.overview.horizontalMarginBetweenMetrics / 2;\n\n            if (this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n            }\n\n            this.overviewContext.beginPath();\n            this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n            this.overviewContext.lineTo(x, this.scope.ctrl.overviewHeight);\n            this.overviewContext.stroke();\n            this.overviewContext.closePath();\n        }\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        this.drawGroupBars();\n    }\n\n    drawGroupBars() {\n        var colorStep = (this.config.overview.startingGreyColor - this.config.overview.endingGrayColor) / this.overviewModel.groupList.length;\n\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.horizontalMarginBetweenMetrics / 2;\n            this.drawGroupBarAtPosition(x, colorStep);\n        }\n    }\n\n    drawGroupBarAtPosition(x, colorStep) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var greyValue = Math.round(this.config.overview.startingGreyColor - colorStep * groupIndex);\n            var fillStyle = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            this.overviewContext.fillStyle = fillStyle;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x - Math.floor(this.config.overview.groupBarWidth / 2), y,\n                this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n        this.overviewContext.fillStyle = \"black\";\n\n        for (var i = 0; i < this.config.metricLabelList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var label = this.config.metricLabelList[i];\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    drawTimeLabels() {\n        this.setOverviewContextTimeFont();\n        var toDate = this.getDateString(this.toDate * 1000);\n        var toDateWidth = this.overviewContext.measureText(toDate).width;\n        var y = this.scope.ctrl.overviewHeight;\n\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(toDate, metric.endX - toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    getDateString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectLinker() {\n        this.drawFocusArea();\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.scope.ctrl.focusModel.groupList = [];\n        this.showFocus = false;\n    }\n\n    groupUngroup() {\n        this.scope.ctrl.isGrouped = !this.scope.ctrl.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    moveMouseOnOverview(evt) {\n        this.setOverviewMousePosition(evt);\n\n        if (this.scope.ctrl.isGrouped) {\n            this.initialiseOverviewCanvasCursor();\n            var found = false;\n\n            for (var overviewIndex = 0; overviewIndex < this.overviewModel.metricList.length; ++overviewIndex) {\n                var metric = this.overviewModel.metricList[overviewIndex];\n\n                // only check if mouse is on a metric graph\n                if (metric.startX <= this.overviewModel.mousePosition.x && this.overviewModel.mousePosition.x <= metric.endX) {\n                    found = this.checkAndSetSelectedGroup(metric);\n                }\n\n                if (found) {\n                    break;\n                }\n            }\n        } else if (!this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    checkAndSetSelectedGroup(metric) {\n        if (this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n            for (var i = 0; i < metric.groupList.length; ++i) {\n                var group = metric.groupList[i];\n\n                if (this.checkGroupIsSelected(group)) {\n                    return true;\n                }\n            }\n        } else {\n            for (var i = 0; i < this.overviewModel.groupList.length; ++i) {\n                var group = this.overviewModel.groupList[i];\n\n                if (this.checkGroupIsSelected(group)) {\n                    return true;\n                }\n            }\n        }\n\n        this.overviewModel.selectedGroup = null;\n        return false;\n    }\n\n    checkGroupIsSelected(group) {\n        if (group.y <= this.overviewModel.mousePosition.y &&\n            this.overviewModel.mousePosition.y <= group.y + this.config.overview.groupedPointHeight) {\n            this.overviewModel.selectedGroup = group;\n            this.scope.ctrl.overviewCursor = \"pointer\";\n            return true;\n        }\n    }\n\n    clickOnOverView(evt) {\n        this.setOverviewMousePosition(evt);\n\n        if (this.scope.ctrl.isGrouped) {\n            this.checkAndAddGroupToFocus();\n        } else {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    checkAndAddGroupToFocus() {\n        if (this.overviewModel.selectedGroup) {\n            this.$timeout(() => {\n                var focusGroup = _.find(this.scope.ctrl.focusModel.groupList, (search) => {\n                    return search.overviewGroup == this.overviewModel.selectedGroup;\n                })\n\n                if (focusGroup) {\n                    _.remove(this.scope.ctrl.focusModel.groupList, (group) => {\n                        return group.overviewGroup == this.overviewModel.selectedGroup;\n                    });\n                } else {\n                    this.addGroupToFocus();\n                }\n\n                this.scope.$apply();\n                this.drawFocusGraph();\n            })\n        }\n    }\n\n    addGroupToFocus() {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = this.overviewModel.selectedGroup;\n\n        this.overviewModel.selectedGroup.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            ;\n            this.scope.ctrl.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.scope.ctrl.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.scope.ctrl.focusModel.groupList.push(focusGroup);\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            // only update focus graph if mouse is pointing on one of metric overview graphs\n            if (metric.startX <= this.overviewModel.mousePosition.x && this.overviewModel.mousePosition.x <= metric.endX) {\n                this.drawFocusGraph();\n                break;\n            }\n        }\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.scope.ctrl.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            this.drawFocusAreaAndLinkers(true);\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.size * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    drawFocusAreaAndLinkers(doDrawLinkers) {\n        var size = this.getFocusAreaSize();\n        var offset = this.getFocusAreaOffset();\n\n        if (offset >= 0) {\n            if (doDrawLinkers) {\n                this.clearFocus();\n            }\n\n            this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.focusStartX = metric.startX + offset;\n                this.focusAreaContext.strokeRect(metric.focusStartX, this.scope.ctrl.focusModel.focusStartY, size, size);\n            });\n\n            if (doDrawLinkers) {\n                this.drawLinkers();\n            }\n        }\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (this.checkMouseIsInMetric(metric)) {\n                this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                this.scope.ctrl.focusModel.sourceMetricIndex = i;\n\n                return Math.min(Math.max(metric.startX,\n                    this.overviewModel.mousePosition.x - this.config.focusArea.size),\n                    metric.endX - this.getFocusAreaSize()) - metric.startX;\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return metric.startX <= this.overviewModel.mousePosition.x && this.overviewModel.mousePosition.x <= metric.endX;\n    }\n\n    drawLinkers() {\n        var pixelData = this.overviewContext.getImageData(this.overviewModel.mousePosition.x, this.overviewModel.mousePosition.y, 1, 1).data;\n        this.focusAreaContext.strokeStyle = \"rgb(\" + pixelData[0] + \",\" + pixelData[1] + \",\" + pixelData[2] + \")\";\n        var instance = this.getLinkerTargetInstance();\n        instance = null; // temp flag to prevent drawing linkers\n\n        if (instance) {\n            this.overviewModel.metricList.forEach((metric, index) => {\n                if (!this.checkMouseIsInMetric(metric)) {\n                    this.drawLinkersByMode(metric, instance, index);\n                }\n            });\n        }\n    }\n\n    getLinkerTargetInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (instance.y - this.config.overview.ungroupedPointHeight <= this.overviewModel.mousePosition.y &&\n                this.overviewModel.mousePosition.y <= instance.y) {\n                return instance;\n            }\n        }\n    }\n\n    drawLinkersByMode(metric, instance, index) {\n        switch (this.scope.ctrl.linkingMode) {\n            case this.scope.ctrl.enumList.linkingMode.X_CROSS:\n                this.drawXCross(metric, instance);\n                break;\n\n            case this.scope.ctrl.enumList.linkingMode.NORMAL_CROSS:\n                this.drawNormalCross(metric, instance);\n                break;\n\n            case this.scope.ctrl.enumList.linkingMode.CHANGE_COLOR:\n                this.changeInstanceColor(metric, instance, index);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    drawXCross(metric, instance) {\n        var centerX = metric.startX + this.overviewModel.mousePositionXOffset;\n        var leftStartX = centerX - this.config.focusArea.xCrossSize;\n        var rightStartX = centerX + this.config.overview.pointWidth;\n        var bottomInstance = instance.y + this.config.overview.ungroupedPointHeight;\n\n        this.drawXCrossLine(leftStartX, instance.y - this.config.focusArea.xCrossSize, instance.y);\n        this.drawXCrossLine(rightStartX, instance.y, instance.y - this.config.focusArea.xCrossSize);\n        this.drawXCrossLine(leftStartX, bottomInstance + this.config.focusArea.xCrossSize, bottomInstance);\n        this.drawXCrossLine(rightStartX, bottomInstance, bottomInstance + this.config.focusArea.xCrossSize);\n    }\n\n    drawXCrossLine(startX, startY, endY) {\n        this.drawLineOnFocusAreaCanvas(startX, startY, startX + this.config.focusArea.xCrossSize, endY);\n    }\n\n    drawLineOnFocusAreaCanvas(startX, startY, endX, endY) {\n        this.focusAreaContext.beginPath();\n        this.focusAreaContext.moveTo(startX, startY);\n        this.focusAreaContext.lineTo(endX, endY);\n        this.focusAreaContext.stroke();\n        this.focusAreaContext.closePath();\n    }\n\n    drawNormalCross(metric, instance) {\n        var focusSize = this.getFocusAreaSize();\n        var centertX = metric.startX + this.overviewModel.mousePositionXOffset;\n        var endX = metric.focusStartX + focusSize;\n        var distanceBetweenLines = this.config.overview.pointWidth * 2;\n        var leftLineX = centertX - distanceBetweenLines;\n        var rightLineX = centertX + distanceBetweenLines;\n        var topLineY = instance.y - distanceBetweenLines;\n        var bottomLineY = instance.y + distanceBetweenLines;\n        var endY = this.scope.ctrl.focusModel.focusStartY + focusSize;\n\n        this.drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY);\n    }\n\n    drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY) {\n        // top horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, topLineY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, topLineY, endX, topLineY);\n\n        // botton horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, bottomLineY, leftLineX, bottomLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, endX, bottomLineY);\n\n        // left vertical\n        this.drawLineOnFocusAreaCanvas(leftLineX, this.scope.ctrl.focusModel.focusStartY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(leftLineX, bottomLineY, leftLineX, endY);\n\n        // right vertical\n        this.drawLineOnFocusAreaCanvas(rightLineX, this.scope.ctrl.focusModel.focusStartY, rightLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, rightLineX, endY);\n    }\n\n    changeInstanceColor(metric, instance, index) {\n        if (index == 0) {\n            this.clearFocus();\n        }\n\n        instance.metricList[index].data.forEach((instancePoint, pointIndex) => {\n            var colorMap = this.getColorMap(metric, this.config.colors[this.scope.ctrl.focusModel.sourceMetricIndex]);\n            this.focusAreaContext.fillStyle = this.getColorFromMap(instancePoint.value, colorMap);\n            this.focusAreaContext.fillRect(instancePoint.x, instance.y, this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n\n            if (instancePoint.x == metric.startX + this.overviewModel.mousePositionXOffset) {\n                // vertical line\n                metric.data.forEach((metricInstance, metricInstanceIndex) => {\n                    var metricPoint = metricInstance.values[pointIndex];\n                    var value = metricPoint ? metricPoint[1] : 0\n                    this.focusAreaContext.fillStyle = this.getColorFromMap(value, colorMap);\n                    this.focusAreaContext.fillRect(instancePoint.x, this.overviewModel.data[metricInstanceIndex].y,\n                        this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n                });\n            }\n        });\n\n        if (index == instance.metricList.length - 1) {\n            this.drawFocusAreaAndLinkers(false);\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.scope.ctrl.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.scope.ctrl.isGrouped && this.scope.ctrl.focusModel.groupList.length > 0) ||\n            (!this.scope.ctrl.isGrouped && this.scope.ctrl.focusModel.data.length > 0)) {\n            this.scope.ctrl.showFocus = true;\n\n            this.$timeout(() => {\n                this.scope.ctrl.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.scope.ctrl.focusGraphWidth = (this.scope.ctrl.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n                this.scope.ctrl.focusModel.focusRowHeight = this.getElementByID(\"focusGraphRow\").offsetHeight;\n                this.setFocusFromAndToDate();\n                this.positionFocusFromAndToDate();\n                this.drawFocusGraphData();\n                this.autoSrollFocusGraph();\n            });\n        } else {\n            this.scope.ctrl.showFocus = false;\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.scope.ctrl.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.scope.ctrl.focusModel.data) {\n            this.scope.ctrl.focusModel.data = [];\n        }\n\n        this.scope.ctrl.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.scope.ctrl.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.scope.ctrl.focusModel.focusedIndexList);\n                this.scope.ctrl.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.scope.ctrl.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.scope.ctrl.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (overviewMetric.focusStartX <= point.x && point.x <= overviewMetric.focusStartX + this.getFocusAreaSize()) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.config.colors[metricIndex].forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.scope.ctrl.focusModel.focusedIndexList[0];\n                var toIndex = this.scope.ctrl.focusModel.focusedIndexList[this.scope.ctrl.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.scope.ctrl.focusedFromDate = this.getDateString(metric.data[fromIndex].date * 1000);\n                    this.scope.ctrl.focusedToDate = this.getDateString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.scope.ctrl.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.scope.ctrl.focusedFromDate).width;\n        this.scope.ctrl.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.scope.ctrl.toDateLeftMargin = this.scope.ctrl.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.scope.ctrl.isGrouped) {\n            this.drawGroupedFocusGraph();\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupedFocusGraph() {\n        this.scope.ctrl.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    var canvas = this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n                    var context = this.getCanvasContext(canvas);\n                    context.clearRect(0, 0, canvas.width, canvas.height);\n                    this.drawFocusGraphInstance(instance, context);\n                }\n            });\n        });\n    }\n\n    drawFocusGraphInstance(instance, context) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                layer.valueList.forEach((value, valueIndex) => {\n                    x = this.getFocusGraphPointWidth() * valueIndex;\n                    this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                        this.overviewModel.metricList[metricIndex].layerRange);\n                    previousX = x;\n                    previousValue = value;\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.scope.ctrl.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = \"#\" + this.config.colors[metricIndex][layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.scope.ctrl.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context);\n        });\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.scope.ctrl.isGrouped) {\n            this.focusGraphContainer.scrollTop = this.scope.ctrl.focusModel.focusRowHeight * this.focusModel.groupList.length;\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getLinkerTargetInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.scope.ctrl.focusModel.data.length; ++i) {\n                var focusModelInstance = this.scope.ctrl.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.scope.ctrl.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n\n            if (group.showDetails) {\n                this.drawFocusGraphData();\n            }\n\n            this.selectNode(group.instanceList[0]);\n        });\n    }\n\n    selectNode(instance) {\n        if (this.scope.ctrl.isGrouped) {\n            this.scope.ctrl.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.scope.ctrl.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        this.updateVariable(instance);\n    }\n\n    updateVariable(instance) {\n        this.variableSrv.variables.forEach((v) => {\n            if (v.name == \"node\") {\n                this.variableSrv.setOptionAsCurrent(v, {\n                    text: instance.instance,\n                    value: instance.instance\n                });\n\n                this.variableSrv.variableUpdated(v, true);\n            }\n        });\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}