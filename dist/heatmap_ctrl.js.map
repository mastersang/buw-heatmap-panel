{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","scope","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","focusPanelHeight","config","focusGraph","graphHeight","overviewPanelHeight","overview","minOverviewPanelHeight","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","maxSingleMetricGroupedWidth","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupSizeBarWidth","pieRadius","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","groupSizeColor","overlapColor","selectedInstancesForFocusOffset","focusArea","color","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLength","barWidth","minimumBarHeight","marginBetweenSliderAndChart","thresholdBarLength","minHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","metricMinHeight","marginBetweenMetrics","maxWidth","markerSize","marginBetweenMarkers","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","initialiseColorListByMetric","colorList","luminanceChange","i","changeColorLuminance","tab","overviewModel","timeRangePositionMap","Map","histogramModel","data","focusAreaModel","groupMarkerList","focusModel","groupList","tabList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","groupSizeChart","HORIZONTAL_BAR","PIE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","isGrouped","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphContainer","id","find","canvas","getContext","addEditorTab","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","currentTab","initialiseNewTab","fromDateString","convertDateToString","toDateString","getDataFromAPI","processRawData","date","getTime","format","metricIndex","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","point","checkAndSetOverviewMinMax","overviewMetric","panelMetric","initialiseColorMapByMetric","layerRange","colorMap","getColorMap","threshold","average","set","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","sort","first","second","setHistogramMinMax","total","map","isBetween","target","start","end","clusteredMetricCount","isClustering","newMetricList","slice","worker","Worker","param","getSingleMetricWorkerParam","postMessage","onmessage","e","handleFinishedSingleMetricClustering","getWorkerParam","isCompleted","resultMetric","DTPList","thresholdGroupListMap","clusteringMessage","initialiseMultiMetricGroups","message","handleFinishedMultiMetricClustering","referenceGroupInstanceToDataInstance","initialiseSingleMetricInstanceGroupList","referenceGroupInstanceToDataInstanceByGroupList","group","newInstanceList","instanceList","groupInstance","dataInstance","getCurrentSingleMetricGroupList","check","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","instanceMetric","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","getThresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","clearRect","width","height","setOverviewPanelAndCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewCanvasWidth","setOverviewCanvasHeight","setOverviewContextTimeFont","setMarginBetweenMetrics","setGroupedOverviewPointWidth","isSingleGrouped","setSingleMetricGroupedCanvasWidth","setMultipleGroupedAndUngroupedCanvasWidth","font","isCompressed","metricWidth","getMaxMetricLength","maxGroupSizeBarLength","metricMaxGroupSizeBarLength","getMaxGroupSizeBarLength","overviewCanvasWidth","metricsPerRow","floor","overviewWidth","setFromDateAndToDateWidth","setGroupedOverviewCanvasWidth","toDateWidth","maxOriginalLength","getMaxMetricLengthByTab","originalLength","currentLength","nextScaledLength","scale","instanceWithMostPoints","maxBy","getMaxMultiMetricGroupSize","largestGroup","getCurrentMultiMetricGroupList","instanceHeight","setSingleMetricGroupedCanvasHeight","setMultipleMetricGroupedAndUngroupedCanvasHeight","rowIndex","overviewHeight","rowHeightList","maxGroupCount","columnIndex","rowsOfMetric","ceil","groupCount","getMaxGroupCount","overviewEndY","setOverviewMetricStartEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","setSingleGroupedOverviewMetricStartEndX","setMultipleGroupedAndUngroupedMetricStartEndX","startX","endX","previousMetric","drawSingeMetricGroupedOverview","drawMultiMetricGroupedOverview","drawGroupSize","startY","previousRowIndex","groupIndex","drawGroupedOverviewWrapper","endY","y","drawMetricSeparator","metricIndexList","drawOverviewInstance","pointHeight","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","groupSizeLabelWidth","drawSingleMetricGroupSize","drawMultipleMetricGroupSize","drawSingleMetricBarGroupSize","drawSingleMetricPieGroupSize","drawGroupSizeLabel","drawBarGroupSizeWrapper","selectedMetricIndexSet","isSelected","overlapCount","beginPath","moveTo","lineTo","closePath","fill","startAngle","PI","drawPieGroupSizeWrapper","size","endAngle","arc","fillText","maxEndX","strokeStyle","stroke","instanceIndex","getMetricDarkestColor","drawTimeLabels","timeLabelY","showHistogram","changedColorThreshold","temp","addOrRemoveGroupToFocus","overviewGroup","drawFocusGraph","removeExisting","focusGroup","timeRangeIndexList","remove","addGroupToFocus","selectedMetricIndex","setShowMergeGroupsButton","newGroupList","existingGroup","setFocusedGroupIndice","focusGroupIndex","showMergeSelectedGroups","setShowMergeGroupsButtonWrapper","selectedGroupCount","drawOverviewGroupMarker","marker","markerX","initialiseData","initialiseFocusGraphData","showFocus","setFocusGraphCanvasHeight","setFocusGraphPointWidth","focusGraphRow","setFocusFromAndToDate","positionFocusFromAndToDate","focusRowHeight","offsetHeight","drawFocusGraphData","autoSrollFocusGraph","topY","mousePosition","bottomY","focusInArea","overviewInstance","focusedIndexList","getIndexesOfPointsInFocus","focusInstance","getFocusInstance","indexes","leftX","mousePositionXOffset","rightX","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","layerIndex","showAllMetrics","focusGraphHeight","pointCount","focusGraphWidth","evt","getMousePos","isSelectingBar","setNewThresholdValue","checkAndSetSelectedHistogramThresholdBar","horizontalAxisStartX","selectedBar","drawHistogram","histogramCursor","sliderY","thresholdBarList","bar","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","deselectSingleMetricGroups","originalGroupList","previousGroupThreshold","waitUntilGroupProcessingIsFinished","mergeSingleMetricGroups","mergeMultipleMetricGroups","mergeFocusGroupList","initialiseGroupsOverlapCount","drawSelectedGroupsMarkers","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","getCopyOfGroup","newGroup","oldFocusGroupList","mergeFocusGroupListWrapper","metricWithMostData","Set","add","checkOverlappingGroupsAndSetOverlapCount","overlappingGroup","overlappingInstance","clearGroupIndexRangeIndexList","isSelectingMetricLabel","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","timeRangeGroup","focusAreaStartPoint","firstMetric","focusAreaMetricIndex","isDrawingFocusArea","histogramMetric","$watch","newValue","oldValue","drawHistogramAxes","drawHistogramMaxValueAndOccurence","drawHistogramBars","drawHistogramThresholdSlider","verticalAxisStartY","lineWdith","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","verticalLabelWidth","maxOccurenceWidth","horizontalAxisY","horizontalAxisEndX","labelX","labelY","occurenceLabelY","maxValueWidth","valueLabelY","originX","occurenceStep","drawHistogramSliderLine","drawHistogramThresholdBars","thresholdBarY","waitForTabProcessingToFinish","drawTimeIndicators","drawSelectedTimeRanges","selectTab","setOverviewMousePosition","setSelectedMetricIndex","setOverviewCursorToPointer","deselectMetricLabel","handleMouseMoveOnGroupedOverview","drawFocusArea","focusAreaIsFixed","drawFocus","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","initialiseSelectedGroupTimeRangeIndexList","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","checkMouseIsOnTimeRange","isHoveringOnTimeRange","setSelectedTimeIndexAndDrawTimeIndicators","markerIndex","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","setSelectedTimeIndex","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","mouseIsInsideTimeRange","hoveredTimeRangeGroup","position","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","drawSelectedTimeRangeVerticalLine","initialiseFocusAreaPoints","drawFocusAreaSquare","strokeRect","startFocusMarkerInterval","addNewTab","updateSelectedGroupListAndDrawFocusGraph","focusGroupWithInterval","stopInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawAllGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","newTab","initialiseNewTabDatesAndData","newMetric","oldMetric","timeRangeGroupList","getTimeRangeGroupList","initialiseNewTabDates","initialiseNewTabData","checkInstanceIsInOverlapList","newMetricInstance","overlappingList","updatedSelectedGroups","drawFocusAfterUpdatingSelectedGroups","initialiseOverlapList","drawOverlapDetails","next","getAllInstanceListForSelectedMetric","checkAndAddOverlappingInstance","concat","showOverlapDetails","overlapGraphHeight","drawOverlapInstance","context","valueIndexList","drawFocusGraphInstance","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","metricListIndex","totalValue","valueIndex","positionIndex","moveFocusGraphContextBasedOnValue","getUngroupedFocusCanvas","baseY","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","collapseFocusGraph","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","mousePos","metricHeight","popupURL","window","showPopup","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.scope = $scope;\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n\n        this.focusPanelHeight = this.config.focusGraph.graphHeight;\n        this.overviewPanelHeight = this.config.overview.minOverviewPanelHeight;\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD.MM HH:mm\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 100,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            maxSingleMetricGroupedWidth: 1700,\n            minOverviewPanelHeight: 350,\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 9,\n            marginBetweenLabelsAndOverview: 15,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 10,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupSizeBarWidth: 1,\n            pieRadius: 8,\n            marginBetweenMarkerAndGroup: 25,\n            marginBetweenMetricAndGroupSize: 30,\n            groupSizeColor: \"lightgray\",\n            overlapColor: \"black\",\n            selectedInstancesForFocusOffset: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\"\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 20,\n            verticalAxisLength: 500,\n            barWidth: 5,\n            minimumBarHeight: 2,\n            marginBetweenSliderAndChart: 50,\n            thresholdBarLength: 10\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            minHeight: 50,\n            graphHeight: 300,\n            groupedPointWidth: 5,\n            ungroupedPointWidth: 50,\n            metricMaxHeight: 20,\n            metricMinHeight: 5,\n            marginBetweenMetrics: 10,\n            maxWidth: 1000,\n            markerSize: 16,\n            marginBetweenMarkers: 5\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    //    query: \"node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        // this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                this.initialiseColorListByMetric(metric);\n            });\n        }\n    }\n\n    initialiseColorListByMetric(metric) {\n        // add lightest shade as defined by user\n        metric.colorList = [];\n        metric.colorList.push(metric.color);\n        var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n        // add the other shades\n        for (var i = 1; i < this.config.colorCount; ++i) {\n            var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n            metric.colorList.push(color);\n        }\n    }\n\n    initialiseNewTab() {\n        var tab = {};\n        tab.overviewModel = {};\n        tab.overviewModel.timeRangePositionMap = new Map();\n        tab.histogramModel = {};\n        tab.overviewModel.data = [];\n        tab.overviewModel.metricList = [];\n        tab.focusAreaModel = {};\n        tab.overviewModel.groupMarkerList = [];\n        tab.focusModel = {};\n        tab.focusModel.groupList = [];\n        this.tabList.push(tab);\n        return tab;\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            groupSizeChart: {\n                HORIZONTAL_BAR: \"1\",\n                PIE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupSizeChart = this.enumList.groupSizeChart.HORIZONTAL_BAR;\n        this.groupingThreshold = 20;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = this.isGrouped ? \"default\" : \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n            this.scope.$apply();\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.tabList = [];\n            this.currentTab = this.initialiseNewTab();\n\n            // time is in milliseconds\n            this.currentTab.fromDateString = this.convertDateToString(this.fromDate);\n            this.currentTab.toDateString = this.convertDateToString(this.toDate);\n\n            this.panel.metricList.forEach(() => {\n                this.currentTab.overviewModel.metricList.push(null);\n            });\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    // convert date in timestamp (seconds) to string\n    convertDateToString(date) {\n        return moment(date * 1000).format(this.config.dateFormat);\n    }\n\n    getDataFromAPI(query, metricIndex) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {};\n                    metric.name = this.panel.metricList[metricIndex].name;\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.currentTab.overviewModel.metricList[metricIndex] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.currentTab.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.currentTab.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.currentTab.overviewModel.metricList.forEach((overviewMetric, index) => {\n            var panelMetric = this.panel.metricList[index];\n            this.initialiseColorMapByMetric(overviewMetric, panelMetric);\n        });\n    }\n\n    initialiseColorMapByMetric(overviewMetric, panelMetric) {\n        var colorList = panelMetric.colorList;\n        overviewMetric.layerRange = Math.round(overviewMetric.max / colorList.length);\n\n        // map a range of values to a color\n        overviewMetric.colorMap = this.getColorMap(overviewMetric, colorList);\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.currentTab.overviewModel.data = [];\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.currentTab.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[0] - second[0];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.currentTab.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    metric.total += point.value;\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.currentTab.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        var tab = this.currentTab;\n        tab.clusteredMetricCount = 0;\n        tab.isClustering = true;\n        var newMetricList = tab.overviewModel.metricList.slice();\n\n        newMetricList.forEach((metric, metricIndex) => {\n            var worker = new Worker(\"/public/plugins/buw-heatmap-panel/single_metric_worker.js\");\n            var param = this.getSingleMetricWorkerParam(metric, metricIndex);\n            worker.postMessage([param]);\n\n            worker.onmessage = (e) => {\n                this.handleFinishedSingleMetricClustering(e, tab, metricIndex);\n            }\n        });\n    }\n\n    getSingleMetricWorkerParam(metric, metricIndex) {\n        var param = this.getWorkerParam();\n        var panelMetric = this.panel.metricList[metricIndex];\n        var colorList = panelMetric.colorList;\n        param.metric = metric;\n        param.metricIndex = metricIndex;\n        param.colorList = colorList;\n        return param;\n    }\n\n    getWorkerParam() {\n        return {\n            tab: this.currentTab,\n            config: this.config\n        }\n    }\n\n    handleFinishedSingleMetricClustering(e, tab, metricIndex) {\n        var result = e.data[0];\n        var metric = tab.overviewModel.metricList[metricIndex];\n\n        this.$timeout(() => {\n            if (result.isCompleted) {\n                var resultMetric = result.data;\n                metric.DTPList = resultMetric.DTPList;\n                metric.thresholdGroupListMap = resultMetric.thresholdGroupListMap;\n                ++tab.clusteredMetricCount;\n                metric.clusteringMessage = \"Completed\";\n\n                if (tab.clusteredMetricCount == tab.overviewModel.metricList.length) {\n                    this.initialiseMultiMetricGroups();\n                }\n            } else {\n                metric.clusteringMessage = result.message;\n            }\n\n            this.scope.$apply();\n        });\n    }\n\n    initialiseMultiMetricGroups() {\n        var tab = this.currentTab;\n        var worker = new Worker(\"/public/plugins/buw-heatmap-panel/multi_metric_worker.js\");\n        var param = this.getWorkerParam();\n        worker.postMessage([param]);\n\n        worker.onmessage = (e) => {\n            this.handleFinishedMultiMetricClustering(e, tab);\n        }\n    }\n\n    handleFinishedMultiMetricClustering(e, tab) {\n        var result = e.data[0];\n\n        this.$timeout(() => {\n            if (result.isCompleted) {\n                tab.isClustering = false;\n                tab.overviewModel.thresholdGroupListMap = result.data;\n                this.referenceGroupInstanceToDataInstance(tab);\n                this.initialiseSingleMetricInstanceGroupList(tab);\n            } else {\n                tab.overviewModel.clusteringMessage = result.message;\n            }\n\n            this.scope.$apply();\n        });\n    }\n\n    referenceGroupInstanceToDataInstance(tab) {\n        tab.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            this.referenceGroupInstanceToDataInstanceByGroupList(tab, groupList);\n        });\n\n        tab.overviewModel.metricList.forEach((metric) => {\n            metric.thresholdGroupListMap.forEach((groupList) => {\n                this.referenceGroupInstanceToDataInstanceByGroupList(tab, groupList);\n            });\n        });\n    }\n\n    referenceGroupInstanceToDataInstanceByGroupList(tab, groupList) {\n        groupList.forEach((group) => {\n            var newInstanceList = [];\n\n            group.instanceList.forEach((groupInstance) => {\n                var dataInstance = _.find(tab.overviewModel.data, (search) => {\n                    return groupInstance.instance == search.instance;\n                });\n\n                newInstanceList.push(dataInstance);\n            });\n\n            group.instanceList = newInstanceList;\n        });\n    }\n\n    initialiseSingleMetricInstanceGroupList(tab) {\n        tab.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            tab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                for (var i = 0; i < groupList.length; ++i) {\n                    var group = groupList[i];\n\n                    var check = _.find(group.instanceList, (search) => {\n                        return search.instance == instance.instance;\n                    })\n\n                    if (check) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.currentTab.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.currentTab.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.currentTab.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        this.clearFocusArea();\n        this.drawOverview();\n    }\n\n    clearFocusArea() {\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        if (!this.isLoading) {\n            this.$timeout(() => {\n                this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n                this.setOverviewPanelAndCanvasSize();\n                this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n                this.scope.$apply();\n                this.drawOverviewData();\n            });\n        }\n    }\n\n    setOverviewPanelAndCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.currentTab.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.currentTab.overviewModel.overviewStartY = this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewCanvasWidth();\n        this.setOverviewCanvasHeight();\n    }\n\n    setOverviewCanvasWidth() {\n        this.setOverviewContextTimeFont();\n        this.setMarginBetweenMetrics();\n        this.currentTab.overviewModel.pointWidth = this.config.overview.pointWidth;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewPointWidth();\n        }\n\n        if (this.isSingleGrouped()) {\n            this.setSingleMetricGroupedCanvasWidth();\n        } else {\n            this.setMultipleGroupedAndUngroupedCanvasWidth();\n        }\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    setMarginBetweenMetrics() {\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.currentTab.overviewModel.marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                this.currentTab.overviewModel.marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            this.currentTab.overviewModel.marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            this.currentTab.overviewModel.marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n    }\n\n    isSingleGrouped() {\n        return this.isGrouped && this.groupingMode == this.enumList.groupingMode.SINGLE;\n    }\n\n    setSingleMetricGroupedCanvasWidth() {\n        this.currentTab.overviewModel.metricWidth = this.getMaxMetricLength() * this.currentTab.overviewModel.pointWidth;\n        this.currentTab.overviewModel.maxGroupSizeBarLength = 0;\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var metricMaxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            this.currentTab.overviewModel.maxGroupSizeBarLength = Math.max(this.currentTab.overviewModel.maxGroupSizeBarLength, metricMaxGroupSizeBarLength);\n        });\n\n        this.currentTab.overviewModel.metricWidth += this.currentTab.overviewModel.maxGroupSizeBarLength + this.currentTab.overviewModel.marginBetweenMetrics +\n            this.config.overview.marginBetweenMarkerAndGroup + this.config.overview.marginBetweenMetricAndGroupSize;\n        this.overviewCanvasWidth = this.config.overview.maxSingleMetricGroupedWidth;\n        this.currentTab.overviewModel.metricsPerRow = Math.floor(this.overviewCanvasWidth / this.currentTab.overviewModel.metricWidth);\n    }\n\n    setMultipleGroupedAndUngroupedCanvasWidth() {\n        this.currentTab.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.currentTab.overviewModel.metricList.length +\n            this.currentTab.overviewModel.marginBetweenMetrics * (this.currentTab.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                this.currentTab.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.currentTab.overviewModel.pointWidth;\n            });\n        } else {\n            this.currentTab.overviewModel.overviewWidth +=\n                this.getMaxMetricLength() * this.currentTab.overviewModel.metricList.length * this.currentTab.overviewModel.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.currentTab.overviewModel.overviewWidth;\n        this.setFromDateAndToDateWidth();\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.currentTab.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    setGroupedOverviewPointWidth() {\n        if (this.currentTab != this.tabList[0]) {\n            var maxOriginalLength = this.getMaxMetricLengthByTab(this.tabList[0]);\n\n            if (maxOriginalLength > 0) {\n                var originalLength = this.getMaxMetricLength();\n\n                if (originalLength > 0) {\n                    var currentLength = originalLength;\n                    var nextScaledLength = currentLength;\n                    var scale = 1;\n\n                    while (currentLength < maxOriginalLength && nextScaledLength < maxOriginalLength) {\n                        currentLength = nextScaledLength;\n                        ++scale;\n                        nextScaledLength = originalLength * scale;\n                    }\n\n                    this.currentTab.overviewModel.pointWidth *= scale;\n                }\n            }\n        }\n    }\n\n    getMaxMetricLength() {\n        return this.getMaxMetricLengthByTab(this.currentTab);\n    }\n\n    getMaxMetricLengthByTab(tab) {\n        var length = 0;\n\n        if (tab.overviewModel.metricList) {\n            tab.overviewModel.metricList.forEach((metric) => {\n                var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                    return point.values.length;\n                });\n\n                if (instanceWithMostPoints) {\n                    length = instanceWithMostPoints.values.length;\n                }\n            });\n        }\n\n        return length;\n    }\n\n    setFromDateAndToDateWidth() {\n        this.currentTab.overviewModel.fromDate = this.convertDateToString(this.fromDate);\n        this.currentTab.overviewModel.toDate = this.convertDateToString(this.toDate);\n        this.currentTab.overviewModel.toDateWidth = this.overviewContext.measureText(this.currentTab.overviewModel.toDate).width;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.currentTab.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.currentTab.overviewModel.metricList.length;\n\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n            });\n        } else {\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                    this.getMaxMultiMetricGroupSize() * this.config.overview.groupSizeBarWidth;\n            } else {\n                this.overviewCanvasWidth += this.config.overview.pieRadius * 2;\n            }\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        if (largestGroup) {\n            return largestGroup.instanceList.length * this.config.overview.groupSizeBarWidth;\n        } else {\n            return 0;\n        }\n    }\n\n    getCurrentSingleMetricGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiMetricGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            result = Math.max(result, group.instanceList.length);\n        });\n\n        return result;\n    }\n\n    getCurrentMultiMetricGroupList() {\n        return this.currentTab.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewCanvasHeight() {\n        if (this.isGrouped) {\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.currentTab.overviewModel.instanceHeight = this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups;\n            } else {\n                this.currentTab.overviewModel.instanceHeight = this.config.overview.pieRadius * 2 + this.config.overview.marginBetweenGroups;\n            }\n        } else {\n            this.currentTab.overviewModel.instanceHeight = this.config.overview.ungroupedPointHeight;\n        }\n\n        if (this.isSingleGrouped()) {\n            this.setSingleMetricGroupedCanvasHeight();\n        } else {\n            this.setMultipleMetricGroupedAndUngroupedCanvasHeight();\n        }\n    }\n\n    setSingleMetricGroupedCanvasHeight() {\n        var rowIndex = 0;\n        this.currentTab.overviewModel.overviewHeight = 0;\n        this.currentTab.overviewModel.rowHeightList = [];\n\n        // get height of each row of metrics\n        while (this.currentTab.overviewModel.metricList.length / this.currentTab.overviewModel.metricsPerRow > rowIndex) {\n            var maxGroupCount = 0;\n\n            for (var columnIndex = 0; columnIndex < this.currentTab.overviewModel.metricsPerRow; ++columnIndex) {\n                var metricIndex = rowIndex * this.currentTab.overviewModel.metricsPerRow + columnIndex;\n\n                if (metricIndex < this.currentTab.overviewModel.metricList.length) {\n                    var metric = this.currentTab.overviewModel.metricList[metricIndex];\n                    var groupList = this.getCurrentSingleMetricGroupList(metric);\n                    maxGroupCount = Math.max(maxGroupCount, groupList.length);\n                }\n            }\n\n            var height = maxGroupCount * this.currentTab.overviewModel.instanceHeight +\n                (this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 3; // metric label, from/to date, selected date\n            this.currentTab.overviewModel.rowHeightList.push(height);\n            this.currentTab.overviewModel.overviewHeight += height;\n            ++rowIndex;\n        }\n\n        this.currentTab.overviewModel.rowsOfMetric = Math.ceil(this.currentTab.overviewModel.metricList.length / this.currentTab.overviewModel.metricsPerRow);\n        this.overviewCanvasHeight = this.currentTab.overviewModel.overviewHeight;\n    }\n\n    setMultipleMetricGroupedAndUngroupedCanvasHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.currentTab.overviewModel.overviewHeight = groupCount * this.currentTab.overviewModel.instanceHeight;\n        } else {\n            this.currentTab.overviewModel.overviewHeight = this.currentTab.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        this.overviewCanvasHeight = this.currentTab.overviewModel.overviewHeight +\n            (this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 3; // metric label, from/to date, selected date\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                groupCount = Math.max(groupCount, groupList.length);\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"italic \" + (this.config.overview.metricFontSize - 1) + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.currentTab.overviewModel.overviewEndY = 0;\n\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartEndX(metric, metricIndex);\n        });\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n    }\n\n    setOverviewMetricStartEndX(metric, metricIndex) {\n        if (this.isSingleGrouped()) {\n            this.setSingleGroupedOverviewMetricStartEndX(metric, metricIndex);\n        } else {\n            this.setMultipleGroupedAndUngroupedMetricStartEndX(metric, metricIndex);\n        }\n    }\n\n    setSingleGroupedOverviewMetricStartEndX(metric, metricIndex) {\n        var columnIndex = metricIndex % this.currentTab.overviewModel.metricsPerRow;\n        metric.startX = columnIndex * this.currentTab.overviewModel.metricWidth + this.config.overview.marginBetweenMarkerAndGroup;\n        metric.endX = metric.startX + this.getMaxMetricLength() * this.currentTab.overviewModel.pointWidth;\n    }\n\n    setMultipleGroupedAndUngroupedMetricStartEndX(metric, metricIndex) {\n        if (metricIndex > 0) {\n            var previousMetric = this.currentTab.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + this.currentTab.overviewModel.marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    metric.startX += this.config.overview.marginBetweenMetricAndGroupSize;\n\n                    if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                        var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                        metric.startX += maxGroupSizeBarLength;\n                    } else {\n                        metric.startX += this.config.overview.pieRadius * 2;\n                    }\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n\n        if (this.isCompressed) {\n            metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.currentTab.overviewModel.pointWidth;\n        } else {\n            metric.endX = metric.startX + this.getMaxMetricLength() * this.currentTab.overviewModel.pointWidth;\n        }\n    }\n\n    drawGroupedOverview() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeMetricGroupedOverview();\n        } else {\n            this.drawMultiMetricGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeMetricGroupedOverview() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.startY = this.currentTab.overviewModel.overviewStartY;\n            var rowIndex = Math.floor(metricIndex / this.currentTab.overviewModel.metricsPerRow);\n\n            for (var previousRowIndex = 0; previousRowIndex < rowIndex; ++previousRowIndex) {\n                metric.startY += this.currentTab.overviewModel.rowHeightList[previousRowIndex];\n            }\n\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupedOverviewWrapper(group, groupIndex, metric.startY, [metricIndex]);\n                metric.endY = group.y + this.config.overview.groupedPointHeight;\n            });\n\n            var columnIndex = metricIndex % this.currentTab.overviewModel.metricsPerRow;\n\n            if (columnIndex < this.currentTab.overviewModel.metricsPerRow - 1) {\n                this.drawMetricSeparator(metric);\n            }\n        });\n    }\n\n    drawGroupedOverviewWrapper(group, groupIndex, startY, metricIndexList) {\n        var instance = group.instanceList[0];\n        instance.y = startY + groupIndex * this.currentTab.overviewModel.instanceHeight;\n\n        if (this.groupSizeChart == this.enumList.groupSizeChart.PIE) {\n            instance.y += this.currentTab.overviewModel.instanceHeight / 2;\n        }\n\n        this.drawOverviewInstance(instance, this.config.overview.groupedPointHeight, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, pointHeight, metricIndexList) {\n        var endY = instance.y + this.currentTab.overviewModel.instanceHeight;\n\n        if (endY > this.currentTab.overviewModel.overviewEndY) {\n            this.currentTab.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointHeight) {\n        if (point.value != null) {\n            point.x = overviewMetric.startX + pointIndex * this.currentTab.overviewModel.pointWidth;\n            point.color = this.getColorFromMap(point.value, this.currentTab.overviewModel.metricList[metricIndex].colorMap);\n            this.overviewContext.fillStyle = point.color;\n            this.overviewContext.fillRect(point.x, instance.y, this.currentTab.overviewModel.pointWidth, pointHeight);\n        }\n    }\n\n    getColorFromMap(value, map) {\n        var result = null;\n\n        map.forEach((color, threshold) => {\n            if (!result && this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiMetricGroupedOverview() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupedOverviewWrapper(group, groupIndex, this.currentTab.overviewModel.overviewStartY, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.currentTab.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        this.currentTab.overviewModel.groupSizeLabelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleMetricGroupSize();\n        } else {\n            this.drawMultipleMetricGroupSize();\n        }\n    }\n\n    drawSingleMetricGroupSize() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                    this.drawSingleMetricBarGroupSize(group, startX);\n                } else {\n                    this.drawSingleMetricPieGroupSize(group, startX);\n                }\n            });\n            var y = this.currentTab.overviewModel.labelTextHeight;\n            var rowIndex = Math.floor(metricIndex / this.currentTab.overviewModel.metricsPerRow);\n\n            for (var previousRowIndex = 0; previousRowIndex < rowIndex; ++previousRowIndex) {\n                y += this.currentTab.overviewModel.rowHeightList[previousRowIndex];\n            }\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - this.currentTab.overviewModel.groupSizeLabelWidth) / 2, y);\n            } else {\n                this.drawGroupSizeLabel((startX * 2 + this.config.overview.pieRadius - this.currentTab.overviewModel.groupSizeLabelWidth) / 2, y);\n            }\n        });\n    }\n\n    drawSingleMetricBarGroupSize(group, startX) {\n        this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n        // don't draw overlap if group isn't selected and is in a selected metric\n        if (this.currentTab.overviewModel.selectedMetricIndexSet &&\n            (!this.currentTab.overviewModel.selectedMetricIndexSet.has(group.metricIndex) || group.isSelected)) {\n            this.drawBarGroupSizeWrapper(group, startX, group.overlapCount, this.config.overview.overlapColor);\n        }\n    }\n\n    drawBarGroupSizeWrapper(group, startX, length, color) {\n        var endX = startX + length * this.config.overview.groupSizeBarWidth;\n        var endY = group.y + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, group.y);\n        this.overviewContext.lineTo(endX, group.y);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawSingleMetricPieGroupSize(group, startX) {\n        var startAngle = -0.5 * Math.PI;\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.instanceList.length, this.config.overview.groupSizeColor);\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.overlapCount, this.config.overview.overlapColor);\n    }\n\n    drawPieGroupSizeWrapper(group, startX, startAngle, size, color) {\n        var x = startX + this.config.overview.pieRadius;\n        var endAngle = startAngle + size * 2 * Math.PI / 360;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, group.y);\n        this.overviewContext.arc(x, group.y, this.config.overview.pieRadius, startAngle, endAngle);\n        this.overviewContext.lineTo(x, group.y);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endAngle;\n    }\n\n    drawGroupSizeLabel(x, y) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, y);\n    }\n\n    drawMultipleMetricGroupSize() {\n        var startX = this.currentTab.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize +\n            this.currentTab.overviewModel.groupSizeLabelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            x += this.config.overview.marginBetweenMetricAndGroupSize;\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                x += this.currentTab.overviewModel.maxGroupSizeBarLength;\n            } else {\n                x += this.config.overview.pieRadius * 2;\n            }\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.currentTab.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.currentTab.overviewModel.overviewStartY + this.currentTab.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.currentTab.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            instance.y = this.currentTab.overviewModel.overviewStartY + instanceIndex * this.currentTab.overviewModel.instanceHeight;\n            this.drawOverviewInstance(instance, this.currentTab.overviewModel.instanceHeight, metricIndexList);\n        });\n    }\n\n    drawMetricLabels() {\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            this.setOverviewContextLabelFont();\n            var metric = this.currentTab.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            var y = this.currentTab.overviewModel.labelTextHeight;\n\n            if (this.isSingleGrouped()) {\n                var rowIndex = Math.floor(metricIndex / this.currentTab.overviewModel.metricsPerRow);\n\n                for (var previousRowIndex = 0; previousRowIndex < rowIndex; ++previousRowIndex) {\n                    y += this.currentTab.overviewModel.rowHeightList[previousRowIndex];\n                }\n            }\n\n            this.overviewContext.fillText(label, metric.startX, y);\n\n            if (this.isGrouped && !this.isCompressed) {\n                this.drawTimeLabels(metric);\n            }\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawTimeLabels(metric) {\n        this.setOverviewContextTimeFont();\n        metric.timeLabelY = this.config.overview.marginBetweenLabelsAndOverview;\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        if (groupList.length > 0) {\n            metric.timeLabelY += groupList[groupList.length - 1].y + this.config.overview.groupedPointHeight;\n        }\n\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.currentTab.overviewModel.fromDate, metric.startX - this.currentTab.overviewModel.toDateWidth / 2, metric.timeLabelY);\n        this.overviewContext.fillText(this.currentTab.overviewModel.toDate, metric.endX - this.currentTab.overviewModel.toDateWidth / 2, metric.timeLabelY);\n    }\n\n    closeHistogram() {\n        this.showHistogram = false;\n\n        if (this.changedColorThreshold) {\n            this.changedColorThreshold = false;\n            this.drawOverview();\n\n            if (this.isGrouped) {\n                var temp = this.currentTab.focusModel.groupList;\n                this.currentTab.focusModel.groupList = [];\n\n                temp.forEach((group) => {\n                    this.addOrRemoveGroupToFocus(group.overviewGroup, true);\n                });\n\n                this.drawFocusGraph();\n            } else {\n                this.drawFocusGraph();\n            }\n        }\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.currentTab.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        });\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n                group.timeRangeIndexList = null;\n\n                // deselect group from focus\n                _.remove(this.currentTab.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group, this.currentTab.overviewModel.selectedMetricIndex);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    removeExistingFocusGroupInSameMetric(group) {\n        var newGroupList = [];\n\n        this.currentTab.focusModel.groupList.forEach((existingGroup) => {\n            if (existingGroup.overviewGroup.metricIndex == group.metricIndex) {\n                existingGroup.overviewGroup.isSelected = false;\n            } else {\n                newGroupList.push(existingGroup);\n            }\n        });\n\n        this.currentTab.focusModel.groupList = newGroupList;\n        this.setFocusedGroupIndice();\n    }\n\n    setFocusedGroupIndice() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.overviewGroup.focusGroupIndex = groupIndex + 1;\n        });\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.focusAreaContext.font = \"bold \" + this.config.overview.groupedPointHeight + \"px Arial\";\n            this.clearFocusArea();\n            this.currentTab.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.currentTab.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.currentTab.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                //this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.focusAreaContext.fillText(group.focusGroupIndex, marker.startX, marker.startY + this.config.overview.groupedPointHeight);\n                this.currentTab.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    drawFocusGraph(initialiseData) {\n        if (!this.isGrouped && initialiseData) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.currentTab.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.currentTab.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.setFocusGraphCanvasHeight();\n                this.setFocusGraphPointWidth();\n                this.scope.$apply();\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.setFocusFromAndToDate();\n\n                    if (!this.isGrouped) {\n                        this.positionFocusFromAndToDate();\n                    }\n\n                    this.currentTab.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.currentTab.focusModel.data) {\n            this.currentTab.focusModel.data = [];\n        }\n\n        this.currentTab.focusModel.data.length = 0;\n        var topY = Math.max(0, this.currentTab.overviewModel.mousePosition.y - this.config.overview.selectedInstancesForFocusOffset);\n        var bottomY = Math.min(this.currentTab.overviewModel.overviewEndY, this.currentTab.overviewModel.mousePosition.y + this.config.overview.selectedInstancesForFocusOffset);\n\n        if (this.focusInArea) {\n            topY = this.currentTab.focusAreaModel.startY;\n            bottomY = this.currentTab.focusAreaModel.endY;\n        }\n\n        this.currentTab.overviewModel.data.forEach((overviewInstance) => {\n            if (this.isBetween(overviewInstance.y, topY, bottomY)) {\n                this.currentTab.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.currentTab.focusModel.focusedIndexList);\n                this.currentTab.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var metricIndex = 0; metricIndex < overviewInstance.metricList.length; ++metricIndex) {\n            var instanceMetric = overviewInstance.metricList[metricIndex];\n\n            if (instanceMetric.data.length > 0) {\n                var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n                var leftX = Math.max(overviewMetric.startX, this.currentTab.overviewModel.mousePositionXOffset - this.config.overview.selectedInstancesForFocusOffset);\n                var rightX = Math.min(overviewMetric.endX, this.currentTab.overviewModel.mousePositionXOffset + this.config.overview.selectedInstancesForFocusOffset);\n\n                if (this.focusInArea) {\n                    leftX = overviewMetric.startX + this.currentTab.focusAreaModel.startX;\n                    rightX = overviewMetric.startX + this.currentTab.focusAreaModel.endX;\n                }\n\n                instanceMetric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, leftX, rightX)) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((instanceMetric, metricIndex) => {\n            for (var i = 0; i < this.config.colorCount; ++i) {\n                var layer = {};\n                layer.valueList = [];\n                instanceMetric.layerList.push(layer);\n            }\n\n            var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            instanceMetric.data.forEach((point) => {\n                var value = point.value;\n                var colorList = this.panel.metricList[metricIndex].colorList;\n\n                instanceMetric.layerList.forEach((layer, layerIndex) => {\n                    overviewMetric.colorMap.forEach((color, threshold) => {\n                        if (color == colorList[layerIndex]) {\n                            layer.valueList.push(value > 0 ? value : 0);\n                            layer.range = threshold.max - threshold.min;\n                            value -= layer.range;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    setFocusGraphCanvasHeight() {\n        if (this.isGrouped) {\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                if (group.showAllMetrics) {\n                    group.focusGraphHeight = this.currentTab.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.currentTab.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    group.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        } else {\n            this.currentTab.focusModel.data.forEach((instance) => {\n                if (instance.showAllMetrics) {\n                    instance.focusGraphHeight = this.currentTab.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.currentTab.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    instance.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        }\n    }\n\n    setFocusGraphPointWidth() {\n        var pointCount = this.currentTab.focusModel.focusedIndexList.length - 1;\n        var pointWidth;\n\n        if (this.isGrouped) {\n            pointWidth = Math.max(1, Math.floor(this.config.focusGraph.maxWidth / pointCount));\n        } else {\n            pointWidth = this.config.focusGraph.ungroupedPointWidth;\n        }\n\n        this.focusGraphWidth = Math.min(this.config.focusGraph.maxWidth, pointCount * pointWidth);\n        this.currentTab.focusModel.pointWidth = Math.max(1, Math.floor(this.focusGraphWidth / pointCount));\n    }\n\n    moveMouseOnHistogram(evt) {\n        this.currentTab.histogramModel.mousePosition = this.getMousePos(evt, this.histogramCanvas);\n\n        if (this.currentTab.histogramModel.isSelectingBar) {\n            this.setNewThresholdValue();\n        } else {\n            this.checkAndSetSelectedHistogramThresholdBar();\n        }\n    }\n\n    setNewThresholdValue() {\n        this.changedColorThreshold = true;\n        var value = Math.round((this.currentTab.histogramModel.mousePosition.x - this.currentTab.histogramModel.horizontalAxisStartX) / this.config.histogram.barWidth);\n        value = Math.max(value, 1);\n        value = Math.min(value, this.currentTab.histogramModel.metric.max - 1);\n\n        this.currentTab.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            if (threshold != this.currentTab.histogramModel.selectedBar.threshold) {\n                if (value >= this.currentTab.histogramModel.selectedBar.threshold.max) {\n                    // move right\n                    if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                        value = Math.min(value, threshold.max - 1);\n                        threshold.min = value;\n                    }\n                } else {\n                    // move left\n                    if (this.currentTab.histogramModel.selectedBar.threshold.min == 0) {\n                        // left most threshold\n                        if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    } else {\n                        // left threshold\n                        if (threshold.max == this.currentTab.histogramModel.selectedBar.threshold.min) {\n                            value = Math.max(value, threshold.max + 1);\n                        }\n\n                        // right threshold\n                        if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    }\n                }\n            }\n        });\n\n        this.currentTab.histogramModel.selectedBar.threshold.max = value;\n        this.drawHistogram();\n    }\n\n    checkAndSetSelectedHistogramThresholdBar() {\n        this.histogramCursor = \"default\";\n        this.currentTab.histogramModel.selectedBar = null;\n        var topY = this.currentTab.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        var bottomY = this.currentTab.histogramModel.sliderY + this.config.histogram.thresholdBarLength / 2;\n\n        if (this.isBetween(this.currentTab.histogramModel.mousePosition.y, topY, bottomY)) {\n            for (var i = 0; i < this.currentTab.histogramModel.thresholdBarList.length; ++i) {\n                var bar = this.currentTab.histogramModel.thresholdBarList[i];\n                var leftX = bar.x - this.config.histogram.barWidth;\n                var rightX = bar.x + this.config.histogram.barWidth;\n\n                if (this.isBetween(this.currentTab.histogramModel.mousePosition.x, leftX, rightX)) {\n                    this.histogramCursor = \"pointer\";\n                    this.currentTab.histogramModel.selectedBar = bar;\n                    break;\n                }\n            }\n        }\n    }\n\n    mouseDownOnHistogram() {\n        if (this.currentTab.histogramModel.selectedBar) {\n            this.currentTab.histogramModel.isSelectingBar = true;\n        }\n    }\n\n    mouseUpOnHistogram() {\n        this.currentTab.histogramModel.isSelectingBar = false;\n        this.currentTab.histogramModel.selectedBar = null;\n        this.histogramCursor = \"default\";\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        if (!this.isLoading) {\n            this.drawOverview();\n            this.clearFocusArea();\n            this.clearTimeIndicator();\n            this.deselectAllGroups();\n            this.showFocus = false;\n            this.showMergeSelectedGroups = false;\n        }\n    }\n\n    deselectAllGroups() {\n        this.currentTab.focusModel.groupList = [];\n        this.currentTab.overviewModel.timeRangePositionMap = new Map();\n        this.deselectSingleMetricGroups();\n        // this.deselectMultiMetricGroups();\n    }\n\n    deselectSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                    group.overlapCount = 0;\n                });\n            }\n        });\n    }\n\n    deselectMultiMetricGroups() {\n        if (this.currentTab.overviewModel.originalGroupList) {\n            this.currentTab.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.currentTab.overviewModel.originalGroupList);\n            this.currentTab.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.initialiseSingleMetricInstanceGroupList(this.currentTab);\n        this.changeGroupingSelection();\n    }\n\n    selectGroupsizeChart() {\n        this.drawOverview();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n\n        if (this.isGrouped && this.currentTab.isClustering) {\n            this.waitUntilGroupProcessingIsFinished();\n        } else {\n            this.changeGroupingSelection();\n        }\n    }\n\n    waitUntilGroupProcessingIsFinished() {\n        if (this.currentTab.isClustering) {\n            this.$timeout(() => {\n                this.waitUntilGroupProcessingIsFinished();\n            }, 100);\n        } else if (this.isGrouped) {\n            this.changeGroupingSelection();\n        }\n    }\n\n    mergeSelectedGroups() {\n        this.showMergeSelectedGroups = false;\n\n        // store current threshold value to restore original groups when threshold is changed\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleMetricGroups();\n        } else {\n            this.mergeMultipleMetricGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.initialiseGroupsOverlapCount();\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n    }\n\n    mergeSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = this.getCopyOfGroup(group);\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    getCopyOfGroup(group) {\n        var newGroup = {};\n        newGroup.name = group.name;\n        newGroup.metricIndex = group.metricIndex;\n        newGroup.instanceList = group.instanceList;\n        newGroup.total = group.total;\n        newGroup.color = group.color;\n        newGroup.isSelected = group.isSelected;\n        newGroup.markerX = group.markerX;\n        newGroup.y = group.y;\n        return newGroup;\n    }\n\n    mergeFocusGroupList() {\n        var oldFocusGroupList = this.currentTab.focusModel.groupList;\n        this.currentTab.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiMetricGroupList());\n        }\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group, group.metricIndex);\n            }\n        });\n    }\n\n    addGroupToFocus(group, metricIndex) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var length = 0;\n\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            if (metricWithMostData) {\n                length = metricWithMostData.data.length;\n            }\n\n            this.currentTab.focusModel.focusedIndexList = Array.from(Array(length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.currentTab.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n\n        });\n\n        this.currentTab.focusModel.groupList.push(focusGroup);\n        this.setFocusedGroupIndice();\n    }\n\n    initialiseGroupsOverlapCount() {\n        this.currentTab.overviewModel.selectedMetricIndexSet = new Set();\n\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            this.currentTab.overviewModel.selectedMetricIndexSet.add(group.overviewGroup.metricIndex);\n        });\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                group.overlapCount = 0;\n\n                if (this.currentTab.focusModel.groupList.length > 0) {\n                    this.checkOverlappingGroupsAndSetOverlapCount(group);\n                }\n            });\n        });\n    }\n\n    checkOverlappingGroupsAndSetOverlapCount(group) {\n        group.instanceList.forEach((instance) => {\n            var check = 0;\n\n            this.currentTab.focusModel.groupList.forEach((overlappingGroup) => {\n                if (overlappingGroup.overviewGroup.metricIndex != group.metricIndex) {\n                    var overlappingInstance = _.find(overlappingGroup.overviewGroup.instanceList, (search) => {\n                        return search.instance == instance.instance;\n                    });\n\n                    if (overlappingInstance) {\n                        ++check;\n                    }\n                }\n            });\n\n            if (group.isSelected) {\n                if (check == this.currentTab.overviewModel.selectedMetricIndexSet.size - 1) {\n                    ++group.overlapCount;\n                }\n            } else if (check == this.currentTab.overviewModel.selectedMetricIndexSet.size) {\n                ++group.overlapCount;\n            }\n        });\n    }\n\n    mergeMultipleMetricGroups() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        if (!this.currentTab.overviewModel.originalGroupList) {\n            this.currentTab.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.currentTab.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.drawOverview();\n        this.clearFocusArea();\n        this.clearTimeIndicator();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.currentTab.overviewModel.thresholdGroupListMap) {\n            this.currentTab.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n                this.clearGroupIndexRangeIndexList(groupList);\n            });\n        }\n\n        if (this.currentTab.overviewModel.metricList) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((groupList) => {\n                    this.clearGroupIndexRangeIndexList(groupList);\n                });\n            });\n        }\n    }\n\n    clearGroupIndexRangeIndexList(groupList) {\n        groupList.forEach((group) => {\n            group.timeRangeIndexList = [];\n        });\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n                this.currentTab.overviewModel.isSelectingTimeRange = true;\n                this.currentTab.overviewModel.timeRangeStartOffset = this.currentTab.overviewModel.mousePositionXOffset;\n                this.currentTab.overviewModel.timeRangeGroup = this.currentTab.overviewModel.hoveredGroup;\n            }\n        } else {\n            this.currentTab.overviewModel.focusAreaStartPoint = {};\n            this.focusInArea = false;\n            var firstMetric = this.currentTab.overviewModel.metricList[0];\n            this.currentTab.overviewModel.focusAreaStartPoint.x = this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n            this.currentTab.overviewModel.focusAreaStartPoint.y = this.currentTab.overviewModel.mousePosition.y;\n            this.currentTab.overviewModel.focusAreaMetricIndex = this.currentTab.overviewModel.selectedMetricIndex;\n            this.isDrawingFocusArea = true;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        this.currentTab.histogramModel.metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        this.histogramMetric = this.panel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n        this.scope.$watch(\"ctrl.histogramMetric.color\", (newValue, oldValue) => {\n            if (newValue != oldValue) {\n                this.initialiseColorListByMetric(this.histogramMetric);\n                this.initialiseColorMapByMetric(this.currentTab.histogramModel.metric, this.histogramMetric);\n                this.drawHistogram();\n            }\n        });\n\n        this.drawHistogramAxes();\n        this.drawHistogramMaxValueAndOccurence();\n        this.drawHistogramBars();\n        this.drawHistogramThresholdSlider();\n    }\n\n    drawHistogramAxes() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.currentTab.histogramModel.verticalAxisStartY = this.currentTab.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.lineWdith = 1;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"gray\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis();\n        this.drawHistogramHorizontalAxis();\n    }\n\n    drawHistogramVerticalAxis() {\n        var occurences = \"occurences\";\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(this.currentTab.histogramModel.metric.histogram.max).width;\n        this.currentTab.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(\"occurences\", this.currentTab.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.currentTab.overviewModel.labelTextHeight);\n        this.currentTab.histogramModel.horizontalAxisY = this.currentTab.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLength;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis() {\n        this.currentTab.histogramModel.horizontalAxisEndX = this.currentTab.histogramModel.horizontalAxisStartX +\n            this.config.histogram.barWidth * (this.currentTab.histogramModel.metric.max + 1);\n        var labelX = this.currentTab.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.currentTab.histogramModel.horizontalAxisY + this.currentTab.overviewModel.labelTextHeight / 2;\n        this.histogramCanvasContext.fillText(this.histogramMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisEndX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        var occurenceLabelY = this.currentTab.histogramModel.verticalAxisStartY + this.currentTab.overviewModel.labelTextHeight / 2\n        this.histogramCanvasContext.fillText(this.currentTab.histogramModel.metric.histogram.max, 0, occurenceLabelY);\n        var maxValueWidth = this.histogramCanvasContext.measureText(this.currentTab.histogramModel.metric.max).width;\n        var valueLabelY = this.currentTab.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.currentTab.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(this.currentTab.histogramModel.metric.max, this.currentTab.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.currentTab.histogramModel.horizontalAxisStartX - this.currentTab.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    drawHistogramBars() {\n        var occurenceStep = this.config.histogram.verticalAxisLength / this.currentTab.histogramModel.metric.histogram.max;\n\n        this.currentTab.histogramModel.metric.histogram.data.forEach((occurences, value) => {\n            this.histogramCanvasContext.fillStyle = this.getColorFromMap(value, this.currentTab.histogramModel.metric.colorMap);\n            var x = this.currentTab.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * value;\n            var y = this.currentTab.histogramModel.horizontalAxisY - occurenceStep * occurences;\n            var height = this.currentTab.histogramModel.horizontalAxisY - y;\n            var minHeight = this.config.histogram.minimumBarHeight;\n\n            if (height < minHeight) {\n                y = this.currentTab.histogramModel.horizontalAxisY - minHeight;\n                height = minHeight;\n            }\n\n            this.histogramCanvasContext.fillRect(x, y, this.config.histogram.barWidth, height);\n        });\n    }\n\n    drawHistogramThresholdSlider() {\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.drawHistogramSliderLine();\n        this.drawHistogramThresholdBars();\n    }\n\n    drawHistogramSliderLine() {\n        this.currentTab.histogramModel.sliderY = this.currentTab.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenSliderAndChart;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.sliderY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisEndX, this.currentTab.histogramModel.sliderY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramThresholdBars() {\n        var thresholdBarY = this.currentTab.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        this.currentTab.histogramModel.thresholdBarList = [];\n        var i = 0;\n\n        this.currentTab.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            var bar = {};\n            bar.threshold = threshold;\n            bar.x = this.currentTab.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * (threshold.max + 1);\n\n            // no need to draw slider bar for last threshold\n            if (i < this.currentTab.histogramModel.metric.colorMap.size - 1) {\n                this.histogramCanvasContext.beginPath();\n                this.histogramCanvasContext.moveTo(bar.x, thresholdBarY);\n                this.histogramCanvasContext.lineTo(bar.x, thresholdBarY + this.config.histogram.thresholdBarLength);\n                this.histogramCanvasContext.stroke();\n                this.histogramCanvasContext.closePath();\n                ++i;\n            }\n\n            this.currentTab.histogramModel.thresholdBarList.push(bar);\n        });\n    }\n\n    selectTab(tab) {\n        this.currentTab = tab;\n        this.showMergeSelectedGroups = false;\n        this.waitForTabProcessingToFinish(tab);\n    }\n\n    waitForTabProcessingToFinish(tab) {\n        if (this.currentTab == tab) {\n            if (this.currentTab.isClustering) {\n                this.$timeout(() => {\n                    this.waitForTabProcessingToFinish(tab);\n                }, 100);\n            } else {\n                this.$timeout(() => {\n                    this.drawOverview();\n                    this.drawSelectedGroupsMarkers();\n                    this.drawFocusGraph();\n\n                    this.$timeout(() => {\n                        if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                            this.drawTimeIndicators();\n                        } else {\n                            this.drawSelectedTimeRanges();\n                        }\n                    });\n                });\n            };\n        }\n    }\n\n    removeTab(tab) {\n        _.remove(this.tabList, (search) => {\n            return search == tab;\n        });\n\n        if (this.currentTab == tab) {\n            this.selectTab(this.tabList[0]);\n        }\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.currentTab.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n                // check if mouse is on metric label\n                var bottomY = this.currentTab.overviewModel.overviewStartY - this.config.overview.marginBetweenLabelsAndOverview;\n\n                if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, 0, bottomY)) {\n                    this.isSelectingMetricLabel = true;\n                    this.setOverviewCursorToPointer();\n                } else {\n                    this.deselectMetricLabel();\n                }\n            } else {\n                this.deselectMetricLabel();\n            }\n\n            if (this.isGrouped) {\n                this.handleMouseMoveOnGroupedOverview();\n            } else if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n                if (this.isDrawingFocusArea) {\n                    this.drawFocusArea();\n                } else if (!this.focusAreaIsFixed) {\n                    this.clearFocusArea();\n                    this.drawFocus();\n                }\n            }\n        } else {\n            this.deselectMetricLabel();\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.currentTab.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.currentTab.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.currentTab.overviewModel.selectedMetricIndex = metricIndex;\n                    // set x position of mouse per overview graph for easier manipulation with mouse positions\n                    this.currentTab.overviewModel.mousePositionXOffset =\n                        this.currentTab.overviewModel.mousePosition.x - metric.startX + this.currentTab.overviewModel.metricList[0].startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, metric.startX, metric.endX)) {\n            if (this.isSingleGrouped()) {\n                return this.isBetween(this.currentTab.overviewModel.mousePosition.y, metric.startY, metric.endY);\n            } else {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    deselectMetricLabel() {\n        this.isSelectingMetricLabel = false;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.currentTab.overviewModel.hoveredGroup = null;\n        this.currentTab.overviewModel.hoveredMarker = null;\n\n        if (this.currentTab.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.initialiseGroupsOverlapCount();\n            this.drawSelectedTimeRanges();\n            this.drawFocusGraph(false);\n        } else {\n            this.checkAndSetSelectedOverviewMarker();\n\n            if (this.currentTab.overviewModel.selectedMetricIndex >= 0) {\n                this.checkAndSetHoveredGroup();\n                this.checkMouseIsOnTimeRange();\n            }\n\n            if (this.currentTab.overviewModel.isHoveringOnTimeRange) {\n                this.overviewCursor = \"pointer\";\n            }\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                this.setSelectedTimeIndexAndDrawTimeIndicators();\n            }\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.currentTab.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.currentTab.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.currentTab.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.setOverviewCursorToPointer();\n                this.currentTab.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.currentTab.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndexAndDrawTimeIndicators() {\n        if (this.currentTab.overviewModel.hoveredGroup) {\n            if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                this.setSelectedTimeIndex();\n            }\n\n            this.drawTimeIndicators();\n        } else {\n            this.clearTimeIndicator();\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.currentTab.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.currentTab.overviewModel.mousePosition.x, point.x, point.x + this.currentTab.overviewModel.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex]);\n        } else {\n            this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.currentTab.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.currentTab.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.currentTab.overviewModel.mousePositionXOffset - this.currentTab.overviewModel.metricList[0].startX;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.currentTab.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.currentTab.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        var overviewMetric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n        // some groups are empty -> need to iterate through group list until find one that isn't\n        var groupList = this.getCurrentSingleMetricGroupList(overviewMetric)\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n            if (this.isCompressed) {\n                for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point, overviewMetric)) {\n                            return;\n                        }\n                    }\n                }\n            } else {\n                for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                    var point = instanceMetric.data[pointIndex];\n\n                    if (this.checkDataPointIsSelectedAndDrawTimeLabel(point, overviewMetric)) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point, metric) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date);\n            var y = metric.timeLabelY + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.currentTab.overviewModel.mousePosition.x - this.currentTab.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    checkMouseIsOnTimeRange() {\n        this.currentTab.overviewModel.isHoveringOnTimeRange = false;\n        this.currentTab.overviewModel.mouseIsInsideTimeRange = false;\n        this.currentTab.overviewModel.hoveredTimeRangeGroup = null;\n\n        this.currentTab.overviewModel.timeRangePositionMap.forEach((position, group) => {\n            if (this.currentTab.overviewModel.selectedMetricIndex == group.metricIndex &&\n                this.isBetween(this.currentTab.overviewModel.mousePosition.y, position.startY, group.y)) {\n                this.currentTab.overviewModel.isHoveringOnTimeRange = true;\n                this.currentTab.overviewModel.hoveredTimeRangeGroup = group;\n\n                if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, position.startX, position.endX)) {\n                    this.currentTab.overviewModel.mouseIsInsideTimeRange = true;\n                }\n            }\n        });\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        if (!this.currentTab.overviewModel.timeRangeGroup.isSelected) {\n            this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.timeRangeGroup, false);\n            this.drawOverview();\n            this.drawSelectedGroupsMarkers();\n        }\n\n        this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var metricIndex = this.currentTab.overviewModel.selectedMetricIndex;\n        var instanceMetric = this.currentTab.overviewModel.timeRangeGroup.instanceList[0].metricList[metricIndex];\n        var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n        var startX = overviewMetric.startX + this.currentTab.overviewModel.timeRangeStartOffset - this.currentTab.overviewModel.metricList[0].startX;\n        var firstMetric = this.currentTab.overviewModel.metricList[0];\n        var endX = overviewMetric.startX + this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.currentTab.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.metricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.currentTab.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.metricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiMetricGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.currentTab.overviewModel.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n\n        if (group.overlapCount > 0 || this.currentTab.focusModel.groupList.length == 1) {\n            this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n        } else {\n            this.drawSelectedTimeRangeVerticalLine(startX, startY, group.y);\n            this.drawSelectedTimeRangeVerticalLine(endX, startY, group.y);\n        }\n\n        var position = {\n            startX: startX,\n            endX: endX,\n            startY: startY\n        };\n\n        this.currentTab.overviewModel.timeRangePositionMap.set(group, position);\n    }\n\n    drawSelectedTimeRangeVerticalLine(x, startY, endY) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(x, startY);\n        this.overviewTimeIndicatorContext.lineTo(x, endY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawFocusArea() {\n        this.initialiseFocusAreaPoints();\n\n        if (this.currentTab.focusAreaModel.startX != this.currentTab.focusAreaModel.endX &&\n            this.currentTab.focusAreaModel.startY != this.currentTab.focusAreaModel.endY) {\n            this.focusInArea = true;\n            this.focusAreaIsFixed = false;\n            this.drawFocusAreaSquare();\n        } else {\n            this.focusInArea = false;\n        }\n    }\n\n    initialiseFocusAreaPoints() {\n        var firstMetric = this.currentTab.overviewModel.metricList[0];\n        this.currentTab.focusAreaModel.startX = this.currentTab.overviewModel.focusAreaStartPoint.x;\n        this.currentTab.focusAreaModel.endX = this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (this.currentTab.focusAreaModel.startX > this.currentTab.overviewModel.mousePositionXOffset) {\n            this.currentTab.focusAreaModel.startX = this.currentTab.overviewModel.mousePositionXOffset;\n            this.currentTab.focusAreaModel.endX = this.currentTab.overviewModel.focusAreaStartPoint.x;\n        }\n\n        this.currentTab.focusAreaModel.startY = this.currentTab.overviewModel.focusAreaStartPoint.y;\n        this.currentTab.focusAreaModel.endY = this.currentTab.overviewModel.mousePosition.y;\n\n        if (this.currentTab.focusAreaModel.startY > this.currentTab.overviewModel.mousePosition.y) {\n            this.currentTab.focusAreaModel.startY = this.currentTab.overviewModel.mousePosition.y;\n            this.currentTab.focusAreaModel.endY = this.currentTab.overviewModel.focusAreaStartPoint.y;\n        }\n\n        //this.currentTab.focusAreaModel.startX = Math.max(this.currentTab.focusAreaModel.startX, firstMetric.startX);\n        // this.currentTab.focusAreaModel.endX = Math.min(this.currentTab.focusAreaModel.endX, firstMetric.endX);\n        this.currentTab.focusAreaModel.startY = Math.max(this.currentTab.focusAreaModel.startY, this.currentTab.overviewModel.overviewStartY);\n        this.currentTab.focusAreaModel.endY = Math.min(this.currentTab.focusAreaModel.endY, this.currentTab.overviewModel.overviewEndY);\n    }\n\n    drawFocusAreaSquare() {\n        this.clearFocusArea();\n        this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n        var width = this.currentTab.focusAreaModel.endX - this.currentTab.focusAreaModel.startX;\n        var height = this.currentTab.focusAreaModel.endY - this.currentTab.focusAreaModel.startY;\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            this.focusAreaContext.strokeRect(metric.startX + this.currentTab.focusAreaModel.startX, this.currentTab.focusAreaModel.startY, width, height);\n        });\n    }\n\n    mouseUpOnOverView() {\n        if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.currentTab.overviewModel.hoveredMarker.group);\n            } else if (this.currentTab.overviewModel.isHoveringOnTimeRange) {\n                if (this.currentTab.overviewModel.mouseIsInsideTimeRange && this.currentTab.overviewModel.hoveredTimeRangeGroup.overlapCount > 0) {\n                    this.addNewTab();\n                    this.selectTab(this.currentTab);\n                } else {\n                    this.currentTab.overviewModel.hoveredTimeRangeGroup.timeRangeIndexList = null;\n                    this.drawSelectedTimeRanges();\n                    this.drawFocusGraph(false);\n                }\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph(false);\n            }\n\n            this.currentTab.overviewModel.isHoveringOnTimeRange = false;\n            this.currentTab.overviewModel.isSelectingTimeRange = false;\n        } else {\n            if (this.isDrawingFocusArea) {\n                this.drawFocusGraph(true);\n                this.isDrawingFocusArea = false;\n            }\n\n            this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.currentTab.focusModel.overviewGroupWithIntervalList) {\n                    this.currentTab.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawAllGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawAllGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    addNewTab() {\n        var newTab = this.initialiseNewTab();\n        this.initialiseNewTabDatesAndData(newTab);\n\n        newTab.overviewModel.metricList.forEach((newMetric, metricIndex) => {\n            var oldMetric = this.currentTab.overviewModel.metricList[metricIndex];\n            newMetric.layerRange = oldMetric.layerRange;\n            newMetric.colorMap = oldMetric.colorMap;\n        });\n\n        this.currentTab = newTab;\n        this.initialiseOverviewData();\n\n        this.initialiseOverviewGroups();\n        this.initialiseCompressedTimeIndexes();\n    }\n\n    initialiseNewTabDatesAndData(newTab) {\n        var timeRangeGroupList = this.getTimeRangeGroupList();\n        this.initialiseNewTabDates(newTab, timeRangeGroupList);\n        this.initialiseNewTabData(newTab);\n    }\n\n    getTimeRangeGroupList() {\n        var timeRangeGroupList = [];\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n                    timeRangeGroupList.push(group);\n                }\n            });\n        });\n\n        return timeRangeGroupList;\n    }\n\n    initialiseNewTabDates(newTab, timeRangeGroupList) {\n        newTab.fromDate = -1;\n        newTab.toDate = -1;\n\n        timeRangeGroupList.forEach((group) => {\n            var timeRangeIndexList = group.timeRangeIndexList;\n            var metric = group.instanceList[0].metricList[group.metricIndex];\n            var fromDate = metric.data[timeRangeIndexList[0]].date;\n            var toDate = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]].date;\n\n            if (newTab.fromDate == -1 || newTab.fromDate > fromDate) {\n                newTab.fromDate = fromDate;\n            }\n\n            if (newTab.toDate == -1 || newTab.toDate < toDate) {\n                newTab.toDate = toDate;\n            }\n        });\n\n        newTab.fromDateString = this.convertDateToString(newTab.fromDate);\n        newTab.toDateString = this.convertDateToString(newTab.toDate);\n    }\n\n    initialiseNewTabData(newTab) {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var newMetric = {};\n            newMetric.data = [];\n\n            metric.data.forEach((metricInstance) => {\n                if (this.checkInstanceIsInOverlapList(metricInstance)) {\n                    var newMetricInstance = {};\n                    newMetricInstance.metric = metricInstance.metric;\n                    newMetricInstance.values = [];\n\n                    metricInstance.values.forEach((value) => {\n                        var date = value[0];\n\n                        if (this.isBetween(date, newTab.fromDate, newTab.toDate)) {\n                            newMetricInstance.values.push(value);\n                        }\n                    });\n\n                    newMetric.data.push(newMetricInstance);\n                }\n            });\n\n            newTab.overviewModel.metricList.push(newMetric);\n        });\n    }\n\n    checkInstanceIsInOverlapList(instance) {\n        for (var i = 0; i < this.currentTab.focusModel.overlappingList.length; ++i) {\n            var overlappingInstance = this.currentTab.focusModel.overlappingList[i];\n\n            if (instance.metric.instance == overlappingInstance.instance) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        var updatedSelectedGroups = false;\n\n        if (this.currentTab.overviewModel.isSelectingTimeRange) {\n            var removeExisting = this.currentTab.overviewModel.timeRangeStartOffset == this.currentTab.overviewModel.mousePositionXOffset;\n            this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.timeRangeGroup, removeExisting);\n            updatedSelectedGroups = true;\n        } else if (this.currentTab.overviewModel.hoveredGroup) {\n            this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.hoveredGroup, true);\n            updatedSelectedGroups = true;\n        } else {\n            this.stopInterval();\n        }\n\n        if (updatedSelectedGroups) {\n            this.drawFocusAfterUpdatingSelectedGroups();\n        }\n    }\n\n    removeExistingGroupsInMetricByGroup(group) {\n        _.remove(this.currentTab.focusModel.groupList, (search) => {\n            search.overviewGroup.metricIndex == group.metricIndex &&\n                search.overviewGroup != group;\n        });\n\n        var groupList = this.getCurrentSingleMetricGroupList(this.currentTab.overviewModel.metricList[group.metricIndex]);\n\n        if (groupList) {\n            groupList.forEach((existingGroup) => {\n                if (existingGroup != group) {\n                    existingGroup.isSelected = false;\n                    existingGroup.timeRangeIndexList = null;\n                }\n            });\n        }\n    }\n\n    drawFocusAfterUpdatingSelectedGroups() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.initialiseGroupsOverlapCount();\n            this.initialiseOverlapList();\n            this.drawOverview();\n        }\n\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n        this.drawOverlapDetails();\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    initialiseOverlapList() {\n        this.currentTab.focusModel.overlappingList = [];\n        var metricIndex = this.currentTab.overviewModel.selectedMetricIndexSet.values().next().value;\n        var instanceList = this.getAllInstanceListForSelectedMetric(metricIndex);\n\n        instanceList.forEach((instance) => {\n            this.checkAndAddOverlappingInstance(metricIndex, instance)\n        });\n    }\n\n    getAllInstanceListForSelectedMetric(metricIndex) {\n        var instanceList = [];\n\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            if (group.overviewGroup.metricIndex == metricIndex) {\n                instanceList = instanceList.concat(group.instanceList);\n            }\n        });\n\n        return instanceList;\n    }\n\n    checkAndAddOverlappingInstance(metricIndex, instance) {\n        var check = 0;\n\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            if (group.overviewGroup.metricIndex != metricIndex) {\n                var overlappingInstance = _.find(group.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++check;\n                }\n            }\n        });\n\n        if (check == this.currentTab.overviewModel.selectedMetricIndexSet.size - 1) {\n            this.currentTab.focusModel.overlappingList.push(instance);\n        }\n    }\n\n    drawOverlapDetails() {\n        if (this.showOverlapDetails) {\n            this.$timeout(() => {\n                this.overlapGraphHeight = this.currentTab.focusModel.groupList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.currentTab.focusModel.groupList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.scope.$apply();\n\n                var metricIndexList = [];\n\n                this.currentTab.focusModel.groupList.forEach((group) => {\n                    metricIndexList.push(group.overviewGroup.metricIndex);\n                });\n\n                this.currentTab.focusModel.overlappingList.forEach((instance, instanceIndex) => {\n                    this.drawOverlapInstance(instance, instanceIndex, metricIndexList);\n                });\n            });\n        }\n    }\n\n    drawOverlapInstance(instance, instanceIndex, metricIndexList) {\n        var canvas = this.getElementByID(\"focusGraphOverlapCanvas-\" + instanceIndex)\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n        var metricList = [];\n\n        metricIndexList.forEach((metricIndex) => {\n            metricList.push(instance.metricList[metricIndex]);\n        });\n\n        this.drawFocusGraphInstance(context, valueIndexList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocus() {\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            var metric = this.currentTab.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph(true);\n                    break;\n                }\n            }\n        }\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.currentTab.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.currentTab.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.currentTab.focusModel.focusedIndexList[0];\n                var toIndex = this.currentTab.focusModel.focusedIndexList[this.currentTab.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        var toDateWidth = this.overviewContext.measureText(this.focusedToDate).width;\n        this.toDateLeftMargin = this.focusGraphWidth - (fromDateWidth + toDateWidth) / 2;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.currentTab.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawAllGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawAllGroupFocusMarkers() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, overviewGroup, x) {\n        if (overviewGroup == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.font = \"bold \" + this.config.focusGraph.markerSize + \"px Arial\";\n        context.fillStyle = overviewGroup.color;\n        // context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n        context.fillText(overviewGroup.focusGroupIndex, x, 0 + this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        var metricList = instance.metricList;\n        var metricIndexList = Array.from(Array(instance.metricList.length).keys())\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && !group.showAllMetrics) {\n            metricList = [instance.metricList[group.overviewGroup.metricIndex]];\n            metricIndexList = [group.overviewGroup.metricIndex];\n        }\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var pointWidth = Math.max(1, Math.floor(this.config.focusGraph.maxWidth / group.overviewGroup.timeRangeIndexList.length));\n            this.drawGroupedFocusGraphInstance(canvas, group.overviewGroup.timeRangeIndexList, pointWidth, metricList, metricIndexList);\n        } else {\n            var valueList = Array.from(Array(maxMetricLength).keys());\n            this.drawGroupedFocusGraphInstance(canvas, valueList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, valueIndexList, pointWidth, metricList, metricIndexList) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList) {\n        metricList.forEach((metric, metricListIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                var panelMetric = this.panel.metricList[metricIndexList[metricListIndex]];\n                context.fillStyle = panelMetric.colorList[layerIndex];\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricListIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n\n                // start drawing from bottom\n                context.moveTo(0, y);\n                var x = 0;\n                var totalValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != null) {\n                        x = pointWidth * positionIndex;\n                        this.moveFocusGraphContextBasedOnValue(context, value, layer, layerIndex, x, y);\n                        totalValue += value;\n                    }\n                });\n\n                // draw straight line to base at the end\n                context.lineTo(x, y);\n\n                // move back to the starting point\n                context.lineTo(0, y);\n                context.closePath();\n\n                if (totalValue > 0 || layerIndex == 0) {\n                    context.fill();\n                }\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.currentTab.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n            var metricList = [instance.metricList[this.currentTab.overviewModel.focusAreaMetricIndex]];\n            var metricIndexList = [this.currentTab.overviewModel.focusAreaMetricIndex];\n\n            if (instance.showAllMetrics) {\n                metricList = instance.metricList;\n                metricIndexList = Array.from(Array(instance.metricList.length).keys());\n            }\n\n            this.drawFocusGraphInstance(context, valueIndexList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveFocusGraphContextBasedOnValue(context, value, layer, layerIndex, x, y) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            var baseY = layerIndex == 0 ? y - this.config.focusGraph.metricMinHeight : y;\n            context.lineTo(x, baseY);\n        } else {\n            var height;\n\n            if (value >= layer.range) {\n                height = this.config.focusGraph.metricMaxHeight;\n            } else {\n                height = value * this.config.focusGraph.metricMaxHeight / layer.range;\n            }\n\n            height = Math.max(this.config.focusGraph.metricMinHeight, height);\n            context.lineTo(x, y - height);\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredGroup && this.currentTab.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.currentTab.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.currentTab.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.currentTab.focusModel.data.length; ++i) {\n                var focusModelInstance = this.currentTab.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.currentTab.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.currentTab.overviewModel.data.length; ++i) {\n            var instance = this.currentTab.overviewModel.data[i];\n\n            if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    leaveMouseFromOverview() {\n        this.currentTab.overviewModel.isSelectingTimeRange = false;\n    }\n\n    collapseExpandFocus() {\n        this.collapseFocusGraph = !this.collapseFocusGraph;\n\n        if (this.collapseFocusGraph) {\n            this.focusPanelHeight -= this.config.focusGraph.graphHeight;\n            this.overviewPanelHeight += this.config.focusGraph.graphHeight;\n        } else {\n            this.focusPanelHeight += this.config.focusGraph.graphHeight;\n            this.overviewPanelHeight -= this.config.focusGraph.graphHeight;\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.currentTab.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.currentTab.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.currentTab.focusModel.overviewGroupWithIntervalList) {\n                this.currentTab.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    showHideAllMetrics() {\n        this.drawFocusGraph(false);\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.currentTab.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        //  this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    showHideOverlapDetails() {\n        this.showOverlapDetails = !this.showOverlapDetails;\n        this.drawOverlapDetails();\n    }\n\n    selectNode(index, evt) {\n        var instance = this.currentTab.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}