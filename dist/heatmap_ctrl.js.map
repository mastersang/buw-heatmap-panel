{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","_","HeatmapCtrl","$scope","$injector","$timeout","variableSrv","timeSrv","events","on","onDataReceived","bind","overviewModel","focusModel","scope","initialiseConfig","config","colors","sortOrder","apiAddress","marginBetweenOverviewAndFocus","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseFocusGraphConfig","overview","pointWidth","groupedPointHeight","ungroupedPointHeight","verticalMarginalBetweenMetrics","horizontalMarginBetweenMetrics","marginBetweenInstances","startingGreyColor","endingGrayColor","groupBarWidth","focusArea","color","size","xCrossSize","focusGraph","metricMaxHeight","marginBetweenMetrics","maxWidth","maxHeight","elem","initialiseControl","initialiseUIFunctions","initialiseUIElements","ctrl","enumList","overviewMode","SEPARATED","INTEGRATED","linkingMode","X_CROSS","NORMAL_CROSS","CHANGE_COLOR","groupingMode","SINGLE","MULTIPLE","attributeForGrouping","isGrouped","parent","selectOverviewMode","selectLinker","selectGroupingMode","selectAttributeForGrouping","groupUngroup","moveFocusArea","evt","fixFocusArea","selectNode","index","overviewCanvas","getElementByID","overviewContext","getContext","focusAreaCanvas","focusAreaContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","focusGraphTable","id","find","data","isUpdatingVariable","load","isLoading","$apply","metricList","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","Math","round","getTime","metric","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","url","encodeURIComponent","open","send","length","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","renderOverview","forEach","instance","values","value","parseFloat","min","max","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","i","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","push","total","getThresholdAverage","map","sort","first","second","groupList","group","checkInstanceInGroup","initialiseNewGroup","instanceList","parseInt","instanceMetric","groupMetric","clearFocus","drawOverviewData","hasFocus","clearRect","width","height","getInstanceHorizontalLength","overviewWidth","overviewHeight","overviewCanvasWidth","getMaxGroupSize","drawSeparated","overviewInstanceHeight","drawIntengrated","focusGraphMarginTop","getMaxMetricLength","instanceIndex","y","pointIndex","x","getColorFromMap","fillStyle","fillRect","metricWidth","drawGrouped","drawUngrouped","groupIndex","drawOverviewInstance","drawGroupSize","pointHeigh","overviewMetric","startX","endX","beginX","beginY","endY","beginPath","moveTo","lineTo","closePath","fill","drawGroupBars","colorStep","drawGroupBarAtPosition","greyValue","floor","drawFocusArea","focusAreaIsFixed","drawFocus","preventDefault","mousePosition","getMousePos","drawFocusGraph","autoSrollFocusGraph","canvas","rect","getBoundingClientRect","clientX","left","clientY","top","getFocusAreaSize","focusStartY","drawMultipleFocusArea","drawSingleFocusArea","focusStartX","strokeStyle","strokeRect","doDrawLinkers","offset","getFocusAreaOffset","drawLinkers","checkMouseIsInMetric","mousePositionXOffset","sourceMetricIndex","pixelData","getImageData","getLinkerTargetInstance","drawLinkersByMode","drawXCross","drawNormalCross","changeInstanceColor","centerX","leftBeginX","rightBeginX","bottomInstance","drawXCrossLine","startY","drawLineOnFocusAreaCanvas","stroke","focusSize","centertX","distanceBetweenLines","leftLineX","rightLineX","topLineY","bottomLineY","drawNormalCrossLines","instancePoint","metricInstanceIndex","metricPoint","initialiseFocusGraphData","focusRowHeight","offsetHeight","drawFocusGraphData","firstInstance","checkInstanceInFocus","focusInstance","initialiseFocusInstance","getIndexesOfPointsInFocus","indexes","overviewInstance","indexList","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","context","layerIndex","previousX","previousValue","valueIndex","moveContextBasedOnValue","graphBeginX","scrollByInstance","getFirstInstanceOfSelectedGroup","focusModelInstance","isSelected","scrollTop","updateVariable","variables","v","name","setOptionAsCurrent","text","variableUpdated","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,gB,kBAAAA,gB;;AAEFC,MAAAA,C;;;6BAEMC,W;;;;;AACT,6BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,WAAzC,EAAsDC,OAAtD,EAA+D;AAAA;;AAAA;;AAC3D,2FAAMJ,MAAN,EAAcC,SAAd;AACA,gBAAKC,QAAL,GAAgBA,QAAhB;AACA,gBAAKC,WAAL,GAAmBA,WAAnB;AACA,gBAAKC,OAAL,GAAeA,OAAf;;AACA,gBAAKC,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKC,cAAL,CAAoBC,IAApB,+BAAhC;;AACA,gBAAKC,aAAL,GAAqB,EAArB;AACA,gBAAKC,UAAL,GAAkB,EAAlB;AACA,gBAAKC,KAAL,CAAWD,UAAX,GAAwB,MAAKA,UAA7B;;AACA,gBAAKE,gBAAL;;AAT2D;AAU9D;;;;6CAEkB;AACf,iBAAKC,MAAL,GAAc;AACV;AACAC,cAAAA,MAAM,EAAE,CACJ,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,CADI,EACsC;AAC1C,eAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,CAFI,EAEsC;AAC1C,eAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,CAHI,CAFE;AAQV;AACAC,cAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CATD;AAWVC,cAAAA,UAAU,EAAE,yEAXF;AAYVC,cAAAA,6BAA6B,EAAE;AAZrB,aAAd;AAeA,iBAAKC,wBAAL;AACA,iBAAKC,yBAAL;AACA,iBAAKC,0BAAL;AACH;;;qDAE0B;AACvB,iBAAKP,MAAL,CAAYQ,QAAZ,GAAuB;AACnBC,cAAAA,UAAU,EAAE,CADO;AAEnBC,cAAAA,kBAAkB,EAAE,CAFD;AAGnBC,cAAAA,oBAAoB,EAAE,CAHH;AAInBC,cAAAA,8BAA8B,EAAE,CAJb;AAKnBC,cAAAA,8BAA8B,EAAE,EALb;AAMnBC,cAAAA,sBAAsB,EAAE,CANL;AAOnBC,cAAAA,iBAAiB,EAAE,GAPA;AAQnBC,cAAAA,eAAe,EAAE,EARE;AASnBC,cAAAA,aAAa,EAAE;AATI,aAAvB;AAWH;;;sDAE2B;AACxB,iBAAKjB,MAAL,CAAYkB,SAAZ,GAAwB;AACpBC,cAAAA,KAAK,EAAE,MADa;AAEpBC,cAAAA,IAAI,EAAE,EAFc;AAGpBC,cAAAA,UAAU,EAAE;AAHQ,aAAxB;AAKH;;;uDAE4B;AACzB,iBAAKrB,MAAL,CAAYsB,UAAZ,GAAyB;AACrBb,cAAAA,UAAU,EAAE,EADS;AAErBc,cAAAA,eAAe,EAAE,EAFI;AAGrBC,cAAAA,oBAAoB,EAAE,EAHD;AAIrBC,cAAAA,QAAQ,EAAE,KAJW;AAKrBC,cAAAA,SAAS,EAAE;AALU,aAAzB;AAOH;;;+BAEI5B,K,EAAO6B,I,EAAM;AACd,iBAAK7B,KAAL,GAAaA,KAAb;AACA,iBAAK6B,IAAL,GAAYA,IAAZ;AAEA,iBAAKC,iBAAL;AACA,iBAAKC,qBAAL;AACA,iBAAKC,oBAAL;AACH;;;8CAEmB;AAChB,iBAAKhC,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,GAA2B;AACvBC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,SAAS,EAAE,GADD;AAEVC,gBAAAA,UAAU,EAAE;AAFF,eADS;AAMvBC,cAAAA,WAAW,EAAE;AACTC,gBAAAA,OAAO,EAAE,GADA;AAETC,gBAAAA,YAAY,EAAE,GAFL;AAGTC,gBAAAA,YAAY,EAAE;AAHL,eANU;AAYvBC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,MAAM,EAAE,GADE;AAEVC,gBAAAA,QAAQ,EAAE;AAFA;AAZS,aAA3B;AAkBA,iBAAK5C,KAAL,CAAWiC,IAAX,CAAgBE,YAAhB,GAA+B,KAAKnC,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBC,YAAzB,CAAsCC,SAArE;AACA,iBAAKpC,KAAL,CAAWiC,IAAX,CAAgBK,WAAhB,GAA8B,KAAKtC,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBI,WAAzB,CAAqCC,OAAnE;AACA,iBAAKvC,KAAL,CAAWiC,IAAX,CAAgBS,YAAhB,GAA+B,KAAK1C,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBQ,YAAzB,CAAsCC,MAArE;AACA,iBAAK3C,KAAL,CAAWiC,IAAX,CAAgBY,oBAAhB,GAAuC,GAAvC;AACA,iBAAK7C,KAAL,CAAWiC,IAAX,CAAgBa,SAAhB,GAA4B,IAA5B;AACH;;;kDAEuB;AACpB,gBAAIC,MAAM,GAAG,IAAb;;AAEA,iBAAK/C,KAAL,CAAWgD,kBAAX,GAAgC,YAAY;AACxCD,cAAAA,MAAM,CAACC,kBAAP;AACH,aAFD;;AAIA,iBAAKhD,KAAL,CAAWiD,YAAX,GAA0B,YAAY;AAClCF,cAAAA,MAAM,CAACE,YAAP;AACH,aAFD;;AAIA,iBAAKjD,KAAL,CAAWkD,kBAAX,GAAgC,YAAY;AACxCH,cAAAA,MAAM,CAACG,kBAAP;AACH,aAFD;;AAIA,iBAAKlD,KAAL,CAAWmD,0BAAX,GAAwC,YAAY;AAChDJ,cAAAA,MAAM,CAACI,0BAAP;AACH,aAFD;;AAIA,iBAAKnD,KAAL,CAAWoD,YAAX,GAA0B,YAAY;AAClCL,cAAAA,MAAM,CAACK,YAAP;AACH,aAFD;;AAIA,iBAAKpD,KAAL,CAAWqD,aAAX,GAA2B,UAAUC,GAAV,EAAe;AACtCP,cAAAA,MAAM,CAACM,aAAP,CAAqBxD,IAArB,CAA0BkD,MAA1B,EAAkCO,GAAlC;AACH,aAFD;;AAIA,iBAAKtD,KAAL,CAAWuD,YAAX,GAA0B,UAAUD,GAAV,EAAe;AACrCP,cAAAA,MAAM,CAACQ,YAAP,CAAoB1D,IAApB,CAAyBkD,MAAzB,EAAiCO,GAAjC;AACH,aAFD;;AAIA,iBAAKtD,KAAL,CAAWwD,UAAX,GAAwB,UAAUC,KAAV,EAAiB;AACrCV,cAAAA,MAAM,CAACS,UAAP,CAAkB3D,IAAlB,CAAuBkD,MAAvB,EAA+BU,KAA/B;AACH,aAFD;AAGH;;;iDAEsB;AACnB;AACA,iBAAKC,cAAL,GAAsB,KAAKC,cAAL,CAAoB,gBAApB,CAAtB;AACA,iBAAKC,eAAL,GAAuB,KAAKF,cAAL,CAAoBG,UAApB,CAA+B,IAA/B,CAAvB,CAHmB,CAKnB;;AACA,iBAAKC,eAAL,GAAuB,KAAKH,cAAL,CAAoB,iBAApB,CAAvB;AACA,iBAAKI,gBAAL,GAAwB,KAAKD,eAAL,CAAqBD,UAArB,CAAgC,IAAhC,CAAxB,CAPmB,CASnB;;AACA,iBAAK7D,KAAL,CAAWiC,IAAX,CAAgB+B,eAAhB,GAAkC,KAAK9D,MAAL,CAAYsB,UAAZ,CAAuBG,QAAzD;AACA,iBAAK3B,KAAL,CAAWiC,IAAX,CAAgBgC,gBAAhB,GAAmC,KAAK/D,MAAL,CAAYsB,UAAZ,CAAuBI,SAA1D;AACA,iBAAKsC,mBAAL,GAA2B,KAAKP,cAAL,CAAoB,qBAApB,CAA3B;AACA,iBAAKQ,eAAL,GAAuB,KAAKR,cAAL,CAAoB,iBAApB,CAAvB;AACH;;;yCAEcS,E,EAAI;AACf,mBAAO,KAAKvC,IAAL,CAAUwC,IAAV,CAAe,MAAMD,EAArB,EAAyB,CAAzB,CAAP;AACH;;;yCAEcE,I,EAAM;AACjB,gBAAI,KAAKC,kBAAT,EAA6B;AACzB,mBAAKA,kBAAL,GAA0B,KAA1B;AACH,aAFD,MAEO;AACH,mBAAKC,IAAL;AACH;AACJ;;;iCAEM;AAAA;;AACH,iBAAKjF,QAAL,CAAc,YAAM;AAChB,kBAAI,MAAI,CAACS,KAAL,CAAWiC,IAAX,CAAgBwC,SAApB,EAA+B;AAC3B,gBAAA,MAAI,CAACD,IAAL;AACH,eAFD,MAEO;AACH,gBAAA,MAAI,CAACxE,KAAL,CAAWiC,IAAX,CAAgBwC,SAAhB,GAA4B,IAA5B;;AACA,gBAAA,MAAI,CAACzE,KAAL,CAAW0E,MAAX;;AACA,gBAAA,MAAI,CAAC5E,aAAL,CAAmB6E,UAAnB,GAAgC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAhC;AACA,gBAAA,MAAI,CAACC,SAAL,GAAiB,CAAjB;AACA,gBAAA,MAAI,CAACC,QAAL,GAAgB,MAAI,CAACC,gBAAL,CAAsB,MAAI,CAACrF,OAAL,CAAasF,SAAb,GAAyBC,IAAzB,CAA8BC,EAApD,CAAhB;AACA,gBAAA,MAAI,CAACC,MAAL,GAAc,MAAI,CAACJ,gBAAL,CAAsB,MAAI,CAACrF,OAAL,CAAasF,SAAb,GAAyBI,EAAzB,CAA4BF,EAAlD,CAAd;;AAEA,gBAAA,MAAI,CAACG,cAAL,CAAoB,wBAApB,EAA8C,CAA9C;;AAEA,gBAAA,MAAI,CAACA,cAAL,sSAIO,CAJP;;AAMA,gBAAA,MAAI,CAACA,cAAL,waAKG,CALH;;AAOA,gBAAA,MAAI,CAACC,cAAL;AACH;AACJ,aA5BD;AA6BH;;;2CAEgBC,I,EAAM;AACnB,mBAAOC,IAAI,CAACC,KAAL,CAAWF,IAAI,CAACG,OAAL,KAAiB,IAA5B,CAAP;AACH;;;yCAEcC,M,EAAQjC,K,EAAO;AAAA;;AAC1B,gBAAIkC,OAAO,GAAG,IAAIC,cAAJ,EAAd;;AAEAD,YAAAA,OAAO,CAACE,kBAAR,GAA6B,YAAM;AAC/B;AACA,kBAAIF,OAAO,CAACG,UAAR,IAAsB,CAA1B,EAA6B;AACzB,kBAAE,MAAI,CAAClB,SAAP;;AAEA,oBAAIe,OAAO,CAACI,MAAR,IAAkB,GAAtB,EAA2B;AACvB,sBAAIL,MAAM,GAAG,EAAb;AACAA,kBAAAA,MAAM,CAACpB,IAAP,GAAc0B,IAAI,CAACC,KAAL,CAAWN,OAAO,CAACO,YAAnB,EAAiC5B,IAAjC,CAAsC6B,MAApD;AACA,kBAAA,MAAI,CAACrG,aAAL,CAAmB6E,UAAnB,CAA8BlB,KAA9B,IAAuCiC,MAAvC;AACH;AACJ;AACJ,aAXD;;AAaA,gBAAIU,GAAG,GAAG,KAAKlG,MAAL,CAAYG,UAAZ,GAAyBgG,kBAAkB,CAACX,MAAD,CAA3C,GAAsD,SAAtD,GAAkE,KAAKb,QAAvE,GAAkF,OAAlF,GAA4F,KAAKK,MAAjG,GAA0G,UAApH;AACAS,YAAAA,OAAO,CAACW,IAAR,CAAa,KAAb,EAAoBF,GAApB,EAAyB,IAAzB;AACAT,YAAAA,OAAO,CAACY,IAAR,CAAa,IAAb;AACH;;;2CAEgB;AAAA;;AACb,iBAAKhH,QAAL,CAAc,YAAM;AAChB,kBAAI,MAAI,CAACqF,SAAL,GAAiB,MAAI,CAAC9E,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAAnD,EAA2D;AACvD,gBAAA,MAAI,CAACnB,cAAL,CAAoBxF,IAApB,CAAyB,MAAzB;AACH,eAFD,MAEO;AACH,gBAAA,MAAI,CAACG,KAAL,CAAWiC,IAAX,CAAgBwC,SAAhB,GAA4B,KAA5B;;AAEA,oBAAI,CAAC,MAAI,CAAC3E,aAAL,CAAmB6E,UAAnB,CAA8B8B,QAA9B,CAAuC,IAAvC,CAAL,EAAmD;AAC/C,kBAAA,MAAI,CAACC,kBAAL;;AACA,kBAAA,MAAI,CAACC,2BAAL;;AACA,kBAAA,MAAI,CAACC,kBAAL;;AACA,kBAAA,MAAI,CAACC,qBAAL;;AACA,kBAAA,MAAI,CAACC,wBAAL;;AACA,kBAAA,MAAI,CAACC,cAAL;AACH;AACJ;AACJ,aAfD,EAeG,GAfH;AAgBH;;;+CAEoB;AACjB,iBAAKjH,aAAL,CAAmB6E,UAAnB,CAA8BqC,OAA9B,CAAsC,UAACtB,MAAD,EAAY;AAC9CA,cAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACC,QAAD,EAAc;AAC9BA,gBAAAA,QAAQ,CAACC,MAAT,CAAgBF,OAAhB,CAAwB,UAACG,KAAD,EAAW;AAC/BA,kBAAAA,KAAK,CAAC,CAAD,CAAL,GAAWC,UAAU,CAACD,KAAK,CAAC,CAAD,CAAN,CAArB;AACAA,kBAAAA,KAAK,CAAC,CAAD,CAAL,GAAWC,UAAU,CAACD,KAAK,CAAC,CAAD,CAAN,CAArB;AACH,iBAHD;AAIH,eALD;AAMH,aAPD;AAQH;;;wDAE6B;AAAA;;AAC1B,iBAAKrH,aAAL,CAAmB6E,UAAnB,CAA8BqC,OAA9B,CAAsC,UAACtB,MAAD,EAAY;AAC9CA,cAAAA,MAAM,CAAC2B,GAAP,GAAa,CAAC,CAAd;AACA3B,cAAAA,MAAM,CAAC4B,GAAP,GAAa,CAAC,CAAd;AAEA5B,cAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACC,QAAD,EAAc;AAC9BA,gBAAAA,QAAQ,CAACC,MAAT,CAAgBF,OAAhB,CAAwB,UAACO,KAAD,EAAW;AAC/B,kBAAA,MAAI,CAACC,yBAAL,CAA+B9B,MAA/B,EAAuC6B,KAAvC;AACH,iBAFD;AAGH,eAJD;AAKH,aATD;AAUH;;;oDAEyB7B,M,EAAQ6B,K,EAAO;AACrC,gBAAIJ,KAAK,GAAGI,KAAK,CAAC,CAAD,CAAjB;;AAEA,gBAAI7B,MAAM,CAAC2B,GAAP,IAAc,CAAC,CAAnB,EAAsB;AAClB3B,cAAAA,MAAM,CAAC2B,GAAP,GAAaF,KAAb;AACAzB,cAAAA,MAAM,CAAC4B,GAAP,GAAaH,KAAb;AACH,aAHD,MAGO;AACH,kBAAIA,KAAK,GAAGzB,MAAM,CAAC2B,GAAnB,EAAwB;AACpB3B,gBAAAA,MAAM,CAAC2B,GAAP,GAAaF,KAAb;AACH;;AAED,kBAAIA,KAAK,GAAGzB,MAAM,CAAC4B,GAAnB,EAAwB;AACpB5B,gBAAAA,MAAM,CAAC4B,GAAP,GAAaH,KAAb;AACH;AACJ;AACJ;;;+CAEoB;AAAA;;AACjB,iBAAKrH,aAAL,CAAmB6E,UAAnB,CAA8BqC,OAA9B,CAAsC,UAACtB,MAAD,EAASjC,KAAT,EAAmB;AACrD,kBAAItD,MAAM,GAAG,MAAI,CAACD,MAAL,CAAYC,MAAZ,CAAmBsD,KAAnB,CAAb;AACAiC,cAAAA,MAAM,CAAC+B,UAAP,GAAoB/B,MAAM,CAAC4B,GAAP,GAAanH,MAAM,CAACqG,MAAxC,CAFqD,CAIrD;;AACAd,cAAAA,MAAM,CAACgC,QAAP,GAAkB,MAAI,CAACC,WAAL,CAAiBjC,MAAjB,EAAyBvF,MAAzB,CAAlB;AACH,aAND;AAOH;;;sCAEWuF,M,EAAQvF,M,EAAQ;AACxB,gBAAIuH,QAAQ,GAAG,IAAIE,GAAJ,EAAf;;AAEA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1H,MAAM,CAACqG,MAA3B,EAAmC,EAAEqB,CAArC,EAAwC;AACpC,kBAAIC,SAAS,GAAG,EAAhB;AACAA,cAAAA,SAAS,CAACT,GAAV,GAAgBQ,CAAC,GAAGnC,MAAM,CAAC+B,UAA3B;AACAK,cAAAA,SAAS,CAACR,GAAV,GAAgBQ,SAAS,CAACT,GAAV,GAAgB3B,MAAM,CAAC+B,UAAvC;AACAK,cAAAA,SAAS,CAACC,OAAV,GAAoB,CAACD,SAAS,CAACR,GAAV,GAAgBQ,SAAS,CAACT,GAA3B,IAAkC,CAAtD;AACAK,cAAAA,QAAQ,CAACM,GAAT,CAAaF,SAAb,EAAwB3H,MAAM,CAAC0H,CAAD,CAA9B;AACH;;AAED,mBAAOH,QAAP;AACH;;;kDAEuB;AACpB,iBAAK5H,aAAL,CAAmBwE,IAAnB,GAA0B,EAA1B;AACA,iBAAK2D,oBAAL;AACA,iBAAKC,kCAAL;AACA,iBAAKC,gBAAL;AACH;;;iDAEsB;AAAA;;AACnB,iBAAKrI,aAAL,CAAmB6E,UAAnB,CAA8BqC,OAA9B,CAAsC,UAACtB,MAAD,EAAS0C,WAAT,EAAyB;AAC3D1C,cAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACqB,cAAD,EAAoB;AACpC,oBAAIC,WAAW,GAAGnJ,CAAC,CAACkF,IAAF,CAAO,MAAI,CAACvE,aAAL,CAAmBwE,IAA1B,EAAgC,UAACiE,MAAD,EAAY;AAC1D,yBAAOF,cAAc,CAAC3C,MAAf,CAAsBuB,QAAtB,IAAkCsB,MAAM,CAACtB,QAAhD;AACH,iBAFiB,CAAlB;;AAIA,oBAAI,CAACqB,WAAL,EAAkB;AACdA,kBAAAA,WAAW,GAAG,MAAI,CAACE,oBAAL,CAA0BH,cAA1B,CAAd;AACH;;AAEDA,gBAAAA,cAAc,CAACnB,MAAf,CAAsBF,OAAtB,CAA8B,UAACG,KAAD,EAAW;AACrC,sBAAII,KAAK,GAAG,EAAZ;AACAA,kBAAAA,KAAK,CAACjC,IAAN,GAAa6B,KAAK,CAAC,CAAD,CAAlB;AACAI,kBAAAA,KAAK,CAACJ,KAAN,GAAcA,KAAK,CAAC,CAAD,CAAnB;AACAmB,kBAAAA,WAAW,CAAC3D,UAAZ,CAAuByD,WAAvB,EAAoC9D,IAApC,CAAyCmE,IAAzC,CAA8ClB,KAA9C;AACH,iBALD;AAMH,eAfD;AAgBH,aAjBD;AAkBH;;;+CAEoBc,c,EAAgB;AACjC,gBAAIC,WAAW,GAAG,EAAlB;AACAA,YAAAA,WAAW,CAACrB,QAAZ,GAAuBoB,cAAc,CAAC3C,MAAf,CAAsBuB,QAA7C;AAEAqB,YAAAA,WAAW,CAAC3D,UAAZ,GAAyB,EAAzB;;AAEA,iBAAK,IAAIkD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3H,MAAL,CAAYC,MAAZ,CAAmBqG,MAAvC,EAA+C,EAAEqB,CAAjD,EAAoD;AAChD,kBAAInC,MAAM,GAAG,EAAb;AACAA,cAAAA,MAAM,CAACpB,IAAP,GAAc,EAAd;AACAgE,cAAAA,WAAW,CAAC3D,UAAZ,CAAuB8D,IAAvB,CAA4B/C,MAA5B;AACH;;AAED,iBAAK5F,aAAL,CAAmBwE,IAAnB,CAAwBmE,IAAxB,CAA6BH,WAA7B;AACA,mBAAOA,WAAP;AACH;;;+DAEoC;AAAA;;AACjC,iBAAKxI,aAAL,CAAmBwE,IAAnB,CAAwB0C,OAAxB,CAAgC,UAACC,QAAD,EAAc;AAC1CA,cAAAA,QAAQ,CAACtC,UAAT,CAAoBqC,OAApB,CAA4B,UAACtB,MAAD,EAAS0C,WAAT,EAAyB;AACjD1C,gBAAAA,MAAM,CAACgD,KAAP,GAAe,CAAf;AACAhD,gBAAAA,MAAM,CAAC2B,GAAP,GAAa,CAAC,CAAd;AACA3B,gBAAAA,MAAM,CAAC4B,GAAP,GAAa,CAAC,CAAd;AAEA5B,gBAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACO,KAAD,EAAW;AAC3B;AACA7B,kBAAAA,MAAM,CAACgD,KAAP,IAAgB,MAAI,CAACC,mBAAL,CAAyBpB,KAAK,CAACJ,KAA/B,EAAsC,MAAI,CAACrH,aAAL,CAAmB6E,UAAnB,CAA8ByD,WAA9B,EAA2CV,QAAjF,CAAhB;;AAEA,sBAAIhC,MAAM,CAAC2B,GAAP,IAAc,CAAC,CAAf,IAAoBE,KAAK,CAACJ,KAAN,GAAczB,MAAM,CAAC2B,GAA7C,EAAkD;AAC9C3B,oBAAAA,MAAM,CAAC2B,GAAP,GAAaE,KAAK,CAACJ,KAAnB;AACH;;AAED,sBAAIzB,MAAM,CAAC4B,GAAP,IAAc,CAAC,CAAf,IAAoBC,KAAK,CAACJ,KAAN,GAAczB,MAAM,CAAC4B,GAA7C,EAAkD;AAC9C5B,oBAAAA,MAAM,CAAC4B,GAAP,GAAaC,KAAK,CAACJ,KAAnB;AACH;AACJ,iBAXD;AAYH,eAjBD;AAkBH,aAnBD;AAoBH;;;8CAEmBA,K,EAAOyB,G,EAAK;AAC5B,gBAAIzC,MAAJ;AAEAyC,YAAAA,GAAG,CAAC5B,OAAJ,CAAY,UAAC3F,KAAD,EAAQyG,SAAR,EAAsB;AAC9B,kBAAIA,SAAS,CAACT,GAAV,IAAiBF,KAAjB,IAA0BA,KAAK,IAAIW,SAAS,CAACR,GAAjD,EAAsD;AAClDnB,gBAAAA,MAAM,GAAG2B,SAAS,CAACC,OAAnB;AACH;AACJ,aAJD;AAMA,mBAAO5B,MAAP;AACH;;;6CAEkB;AAAA;;AACf,iBAAKrG,aAAL,CAAmBwE,IAAnB,CAAwBuE,IAAxB,CAA6B,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC5C,mBAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAI,CAAC3H,MAAL,CAAYE,SAAZ,CAAsBoG,MAA1C,EAAkD,EAAEqB,CAApD,EAAuD;AACnD,oBAAIO,WAAW,GAAG,MAAI,CAAClI,MAAL,CAAYE,SAAZ,CAAsByH,CAAtB,CAAlB;;AAEA,oBAAIiB,KAAK,CAACnE,UAAN,CAAiByD,WAAjB,EAA8BM,KAA9B,IAAuCK,MAAM,CAACpE,UAAP,CAAkByD,WAAlB,EAA+BM,KAA1E,EAAiF;AAC7E,yBAAOI,KAAK,CAACnE,UAAN,CAAiByD,WAAjB,EAA8BM,KAA9B,GAAsCK,MAAM,CAACpE,UAAP,CAAkByD,WAAlB,EAA+BM,KAA5E;AACH;AACJ;;AAED,qBAAO,CAAP;AACH,aAVD;AAWH;;;qDAE0B;AAAA;;AACvB,iBAAK5I,aAAL,CAAmBkJ,SAAnB,GAA+B,EAA/B;AAEA,iBAAKlJ,aAAL,CAAmBwE,IAAnB,CAAwB0C,OAAxB,CAAgC,UAACC,QAAD,EAAc;AAC1C,kBAAIgC,KAAK,GAAG9J,CAAC,CAACkF,IAAF,CAAO,OAAI,CAACvE,aAAL,CAAmBkJ,SAA1B,EAAqC,UAACT,MAAD,EAAY;AACzD,uBAAO,OAAI,CAACW,oBAAL,CAA0BjC,QAA1B,EAAoCsB,MAApC,CAAP;AACH,eAFW,CAAZ;;AAIA,kBAAI,CAACU,KAAL,EAAY;AACRA,gBAAAA,KAAK,GAAG,OAAI,CAACE,kBAAL,CAAwBlC,QAAxB,CAAR;;AACA,gBAAA,OAAI,CAACnH,aAAL,CAAmBkJ,SAAnB,CAA6BP,IAA7B,CAAkCQ,KAAlC;AACH;;AAEDA,cAAAA,KAAK,CAACG,YAAN,CAAmBX,IAAnB,CAAwBxB,QAAxB;AACH,aAXD;AAYH;;;+CAEoBA,Q,EAAUgC,K,EAAO;AAClC,gBAAI,KAAKjJ,KAAL,CAAWiC,IAAX,CAAgBS,YAAhB,IAAgC,KAAK1C,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBQ,YAAzB,CAAsCC,MAA1E,EAAkF;AAC9E,kBAAIc,KAAK,GAAG4F,QAAQ,CAAC,KAAKrJ,KAAL,CAAWiC,IAAX,CAAgBY,oBAAjB,CAApB;AACA,qBAAOoE,QAAQ,CAACtC,UAAT,CAAoBlB,KAApB,EAA2BiF,KAA3B,IAAoCO,KAAK,CAACtE,UAAN,CAAiBlB,KAAjB,EAAwBiF,KAAnE;AACH,aAHD,MAGO;AACH,mBAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,QAAQ,CAACtC,UAAT,CAAoB6B,MAAxC,EAAgD,EAAEqB,CAAlD,EAAqD;AACjD,oBAAIZ,QAAQ,CAACtC,UAAT,CAAoBkD,CAApB,EAAuBa,KAAvB,IAAgCO,KAAK,CAACtE,UAAN,CAAiBkD,CAAjB,EAAoBa,KAAxD,EAA+D;AAC3D,yBAAO,KAAP;AACH;AACJ;;AAED,qBAAO,IAAP;AACH;AACJ;;;6CAEkBzB,Q,EAAU;AACzB,gBAAIgC,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAACtE,UAAN,GAAmB,EAAnB;AACAsE,YAAAA,KAAK,CAACG,YAAN,GAAqB,EAArB;AAEAnC,YAAAA,QAAQ,CAACtC,UAAT,CAAoBqC,OAApB,CAA4B,UAACsC,cAAD,EAAoB;AAC5C,kBAAIC,WAAW,GAAG,EAAlB;AACAA,cAAAA,WAAW,CAACb,KAAZ,GAAoBY,cAAc,CAACZ,KAAnC;AACAO,cAAAA,KAAK,CAACtE,UAAN,CAAiB8D,IAAjB,CAAsBc,WAAtB;AACH,aAJD;AAMA,mBAAON,KAAP;AACH;;;2CAEgB;AACb,gBAAI,KAAKnJ,aAAL,CAAmBwE,IAAnB,CAAwBkC,MAAxB,GAAiC,CAArC,EAAwC;AACpC,mBAAKgD,UAAL;AACA,mBAAKC,gBAAL;AACH;AACJ;;;uCAEY;AACT,iBAAKC,QAAL,GAAgB,KAAhB;AACA,iBAAK3F,gBAAL,CAAsB4F,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,KAAK7F,eAAL,CAAqB8F,KAA3D,EAAkE,KAAK9F,eAAL,CAAqB+F,MAAvF;AACH;;;6CAEkB;AAAA;;AACf,iBAAKtK,QAAL,CAAc,YAAM;AAChB,cAAA,OAAI,CAACqE,eAAL,CAAqB+F,SAArB,CAA+B,CAA/B,EAAkC,CAAlC,EAAqC,OAAI,CAACjG,cAAL,CAAoBkG,KAAzD,EAAgE,OAAI,CAAClG,cAAL,CAAoBmG,MAApF;;AACA,kBAAIrD,MAAM,GAAG,OAAI,CAACsD,2BAAL,EAAb;;AAEA,kBAAI,OAAI,CAAC9J,KAAL,CAAWiC,IAAX,CAAgBE,YAAhB,IAAgC,OAAI,CAACnC,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBC,YAAzB,CAAsCC,SAA1E,EAAqF;AACjF,gBAAA,OAAI,CAACpC,KAAL,CAAWiC,IAAX,CAAgB8H,aAAhB,GAAgCvD,MAAM,GAAG,OAAI,CAACtG,MAAL,CAAYQ,QAAZ,CAAqBC,UAA9D;;AAEA,oBAAI,OAAI,CAACX,KAAL,CAAWiC,IAAX,CAAgBa,SAApB,EAA+B;AAC3B,kBAAA,OAAI,CAAC9C,KAAL,CAAWiC,IAAX,CAAgB+H,cAAhB,GAAiC,OAAI,CAAClK,aAAL,CAAmBkJ,SAAnB,CAA6BxC,MAA7B,GAAsC,OAAI,CAACtG,MAAL,CAAYQ,QAAZ,CAAqBE,kBAA5F;AACA,kBAAA,OAAI,CAACZ,KAAL,CAAWiC,IAAX,CAAgBgI,mBAAhB,GAAsC,OAAI,CAACjK,KAAL,CAAWiC,IAAX,CAAgB8H,aAAhB,GAAgC,OAAI,CAACG,eAAL,EAAhC,GAClC,OAAI,CAAChK,MAAL,CAAYQ,QAAZ,CAAqBK,8BADzB;AAEH,iBAJD,MAIO;AACH,kBAAA,OAAI,CAACf,KAAL,CAAWiC,IAAX,CAAgB+H,cAAhB,GAAiC,OAAI,CAAClK,aAAL,CAAmBwE,IAAnB,CAAwBkC,MAAxB,GAAiC,OAAI,CAACtG,MAAL,CAAYQ,QAAZ,CAAqBG,oBAAvF;AACA,kBAAA,OAAI,CAACb,KAAL,CAAWiC,IAAX,CAAgBgI,mBAAhB,GAAsC,OAAI,CAACjK,KAAL,CAAWiC,IAAX,CAAgB8H,aAAtD;AACH;;AAED,gBAAA,OAAI,CAAC/J,KAAL,CAAW0E,MAAX;;AACA,gBAAA,OAAI,CAACyF,aAAL;AACH,eAdD,MAcO;AACH,gBAAA,OAAI,CAACrK,aAAL,CAAmBsK,sBAAnB,GACI,OAAI,CAAClK,MAAL,CAAYQ,QAAZ,CAAqBG,oBAArB,GAA4C,OAAI,CAACf,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAA1E,GACA,OAAI,CAACtG,MAAL,CAAYQ,QAAZ,CAAqBI,8BAArB,IAAuD,OAAI,CAAChB,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAA9B,GAAuC,CAA9F,CADA,GAEA,OAAI,CAACtG,MAAL,CAAYQ,QAAZ,CAAqBM,sBAHzB;AAIA,gBAAA,OAAI,CAAChB,KAAL,CAAWiC,IAAX,CAAgB8H,aAAhB,GAAgCvD,MAAM,GAAG,OAAI,CAACtG,MAAL,CAAYQ,QAAZ,CAAqBC,UAA9D;AACA,gBAAA,OAAI,CAACX,KAAL,CAAWiC,IAAX,CAAgBgI,mBAAhB,GAAsC,OAAI,CAACjK,KAAL,CAAWiC,IAAX,CAAgB8H,aAAtD;AACA,gBAAA,OAAI,CAAC/J,KAAL,CAAWiC,IAAX,CAAgB+H,cAAhB,GAAiC,OAAI,CAAClK,aAAL,CAAmBwE,IAAnB,CAAwBkC,MAAxB,GAAiC,OAAI,CAAC1G,aAAL,CAAmBsK,sBAArF;;AACA,gBAAA,OAAI,CAACpK,KAAL,CAAW0E,MAAX;;AACA,gBAAA,OAAI,CAAC2F,eAAL;AACH;;AAAA;AAED,cAAA,OAAI,CAACrK,KAAL,CAAWiC,IAAX,CAAgBqI,mBAAhB,GAAsC,OAAI,CAACtK,KAAL,CAAWiC,IAAX,CAAgB+H,cAAhB,GAAiC,OAAI,CAAC9J,MAAL,CAAYI,6BAAnF;AACH,aA/BD;AAgCH;;;wDAE6B;AAC1B,gBAAIkG,MAAM,GAAG,KAAK+D,kBAAL,EAAb;;AAEA,gBAAI,KAAKvK,KAAL,CAAWiC,IAAX,CAAgBE,YAAhB,IAAgC,KAAKnC,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBC,YAAzB,CAAsCC,SAA1E,EAAqF;AACjF,qBAAOoE,MAAM,GAAG,KAAK1G,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAAvC,GACH,CAAC,KAAK1G,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAA9B,GAAuC,CAAxC,IAA6C,KAAKtG,MAAL,CAAYQ,QAAZ,CAAqBK,8BADtE;AAEH,aAHD,MAGO;AACH,qBAAOyF,MAAP;AACH;AACJ;;;4CAEiB;AACd,gBAAIL,MAAM,GAAG,CAAb;AAEA,iBAAKrG,aAAL,CAAmBkJ,SAAnB,CAA6BhC,OAA7B,CAAqC,UAACiC,KAAD,EAAW;AAC5C,kBAAIA,KAAK,CAACG,YAAN,CAAmB5C,MAAnB,GAA4BL,MAAhC,EAAwC;AACpCA,gBAAAA,MAAM,GAAG8C,KAAK,CAACG,YAAN,CAAmB5C,MAA5B;AACH;AACJ,aAJD;AAMA,mBAAOL,MAAP;AACH;;;+CAEoB;AACjB,gBAAIK,MAAM,GAAG,CAAb;AAEA,iBAAK1G,aAAL,CAAmB6E,UAAnB,CAA8BqC,OAA9B,CAAsC,UAACtB,MAAD,EAAY;AAC9CA,cAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACO,KAAD,EAAW;AAC3B,oBAAIA,KAAK,CAACL,MAAN,CAAaV,MAAb,GAAsBA,MAA1B,EAAkC;AAC9BA,kBAAAA,MAAM,GAAGe,KAAK,CAACL,MAAN,CAAaV,MAAtB;AACH;AACJ,eAJD;AAKH,aAND;AAQA,mBAAOA,MAAP;AACH;;;4CAEiB;AAAA;;AACd,iBAAK1G,aAAL,CAAmBwE,IAAnB,CAAwB0C,OAAxB,CAAgC,UAACC,QAAD,EAAWuD,aAAX,EAA6B;AACzDvD,cAAAA,QAAQ,CAACwD,CAAT,GAAaD,aAAa,GAAG,OAAI,CAAC1K,aAAL,CAAmBsK,sBAAhD;AAEAnD,cAAAA,QAAQ,CAACtC,UAAT,CAAoBqC,OAApB,CAA4B,UAACtB,MAAD,EAAS0C,WAAT,EAAyB;AACjD1C,gBAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACO,KAAD,EAAQmD,UAAR,EAAuB;AACvCnD,kBAAAA,KAAK,CAACoD,CAAN,GAAUD,UAAU,GAAG,OAAI,CAACxK,MAAL,CAAYQ,QAAZ,CAAqBC,UAA5C;AACA4G,kBAAAA,KAAK,CAAClG,KAAN,GAAc,OAAI,CAACuJ,eAAL,CAAqBrD,KAAK,CAACJ,KAA3B,EAAkC,OAAI,CAACrH,aAAL,CAAmB6E,UAAnB,CAA8ByD,WAA9B,EAA2CV,QAA7E,CAAd;AACA,kBAAA,OAAI,CAAC9D,eAAL,CAAqBiH,SAArB,GAAiCtD,KAAK,CAAClG,KAAvC;AACA,sBAAIoJ,CAAC,GAAGxD,QAAQ,CAACwD,CAAT,GAAarC,WAAW,GAAG,OAAI,CAAClI,MAAL,CAAYQ,QAAZ,CAAqBG,oBAAnC,GAA0D,OAAI,CAACX,MAAL,CAAYQ,QAAZ,CAAqBI,8BAApG;;AACA,kBAAA,OAAI,CAAC8C,eAAL,CAAqBkH,QAArB,CAA8BvD,KAAK,CAACoD,CAApC,EAAuCF,CAAvC,EAA0C,OAAI,CAACvK,MAAL,CAAYQ,QAAZ,CAAqBG,oBAA/D,EAAqF,OAAI,CAACX,MAAL,CAAYQ,QAAZ,CAAqBG,oBAA1G;AACH,iBAND;AAOH,eARD;AASH,aAZD;AAaH;;;0CAEesG,K,EAAOyB,G,EAAK;AACxB,gBAAIzC,MAAJ;AAEAyC,YAAAA,GAAG,CAAC5B,OAAJ,CAAY,UAAC3F,KAAD,EAAQyG,SAAR,EAAsB;AAC9B,kBAAIA,SAAS,CAACT,GAAV,IAAiBF,KAAjB,IAA0BA,KAAK,IAAIW,SAAS,CAACR,GAAjD,EAAsD;AAClDnB,gBAAAA,MAAM,GAAG9E,KAAT;AACH;AACJ,aAJD;AAMA,mBAAO,MAAM8E,MAAb;AACH;;;0CAEe;AACZ,iBAAKrG,aAAL,CAAmBiL,WAAnB,GAAiC,KAAKR,kBAAL,KAA4B,KAAKrK,MAAL,CAAYQ,QAAZ,CAAqBC,UAAlF;;AAEA,gBAAI,KAAKX,KAAL,CAAWiC,IAAX,CAAgBa,SAApB,EAA+B;AAC3B,mBAAKkI,WAAL;AACH,aAFD,MAEO;AACH,mBAAKC,aAAL;AACH;AACJ;;;wCAEa;AAAA;;AACV,iBAAKnL,aAAL,CAAmBsK,sBAAnB,GAA4C,KAAKlK,MAAL,CAAYQ,QAAZ,CAAqBE,kBAAjE;AAEA,iBAAKd,aAAL,CAAmBkJ,SAAnB,CAA6BhC,OAA7B,CAAqC,UAACiC,KAAD,EAAQiC,UAAR,EAAuB;AACxD,kBAAIjE,QAAQ,GAAGgC,KAAK,CAACG,YAAN,CAAmB,CAAnB,CAAf;;AACA,cAAA,OAAI,CAAC+B,oBAAL,CAA0BlE,QAA1B,EAAoCiE,UAApC,EAAgD,OAAI,CAAChL,MAAL,CAAYQ,QAAZ,CAAqBE,kBAArE;AACH,aAHD;AAKA,iBAAKwK,aAAL;AACH;;;+CAEoBnE,Q,EAAUxD,K,EAAO4H,U,EAAY;AAAA;;AAC9CpE,YAAAA,QAAQ,CAACtC,UAAT,CAAoBqC,OAApB,CAA4B,UAACtB,MAAD,EAAS0C,WAAT,EAAyB;AACjDnB,cAAAA,QAAQ,CAACwD,CAAT,GAAahH,KAAK,GAAG4H,UAArB;AACA,kBAAIC,cAAc,GAAG,OAAI,CAACxL,aAAL,CAAmB6E,UAAnB,CAA8ByD,WAA9B,CAArB;AACAkD,cAAAA,cAAc,CAACC,MAAf,GAAwB,OAAI,CAACzL,aAAL,CAAmBiL,WAAnB,GAAiC3C,WAAzD;;AAEA,kBAAIA,WAAW,GAAG,CAAlB,EAAqB;AACjBkD,gBAAAA,cAAc,CAACC,MAAf,IAAyB,OAAI,CAACrL,MAAL,CAAYQ,QAAZ,CAAqBK,8BAArB,GAAsDqH,WAA/E;AACH;;AAED1C,cAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACO,KAAD,EAAQmD,UAAR,EAAuB;AACvCnD,gBAAAA,KAAK,CAACoD,CAAN,GAAUW,cAAc,CAACC,MAAf,GAAwBb,UAAU,GAAG,OAAI,CAACxK,MAAL,CAAYQ,QAAZ,CAAqBC,UAApE;AACA4G,gBAAAA,KAAK,CAAClG,KAAN,GAAc,OAAI,CAACuJ,eAAL,CAAqBrD,KAAK,CAACJ,KAA3B,EAAkC,OAAI,CAACrH,aAAL,CAAmB6E,UAAnB,CAA8ByD,WAA9B,EAA2CV,QAA7E,CAAd;AACA,gBAAA,OAAI,CAAC9D,eAAL,CAAqBiH,SAArB,GAAiCtD,KAAK,CAAClG,KAAvC;;AACA,gBAAA,OAAI,CAACuC,eAAL,CAAqBkH,QAArB,CAA8BvD,KAAK,CAACoD,CAApC,EAAuC1D,QAAQ,CAACwD,CAAhD,EAAmD,OAAI,CAACvK,MAAL,CAAYQ,QAAZ,CAAqBC,UAAxE,EAAoF0K,UAApF;AACH,eALD;AAOAC,cAAAA,cAAc,CAACE,IAAf,GAAsBF,cAAc,CAACC,MAAf,GAAwB,OAAI,CAACzL,aAAL,CAAmBiL,WAAjE;AACH,aAjBD;AAkBH;;;0CAEe;AAAA;;AACZ,gBAAIU,MAAM,GAAG,KAAKzL,KAAL,CAAWiC,IAAX,CAAgB8H,aAAhB,GAAgC,KAAK7J,MAAL,CAAYQ,QAAZ,CAAqBK,8BAAlE;AAEA,iBAAKjB,aAAL,CAAmBkJ,SAAnB,CAA6BhC,OAA7B,CAAqC,UAACiC,KAAD,EAAQiC,UAAR,EAAuB;AACxD,kBAAIM,IAAI,GAAGC,MAAM,GAAGxC,KAAK,CAACG,YAAN,CAAmB5C,MAAvC;AACA,kBAAIkF,MAAM,GAAGR,UAAU,GAAG,OAAI,CAAChL,MAAL,CAAYQ,QAAZ,CAAqBE,kBAA/C;AACA,kBAAI+K,IAAI,GAAGD,MAAM,GAAG,OAAI,CAACxL,MAAL,CAAYQ,QAAZ,CAAqBE,kBAAzC;;AACA,cAAA,OAAI,CAACgD,eAAL,CAAqBgI,SAArB;;AACA,cAAA,OAAI,CAAChI,eAAL,CAAqBiI,MAArB,CAA4BJ,MAA5B,EAAoCC,MAApC;;AACA,cAAA,OAAI,CAAC9H,eAAL,CAAqBkI,MAArB,CAA4BN,IAA5B,EAAkCE,MAAlC;;AACA,cAAA,OAAI,CAAC9H,eAAL,CAAqBkI,MAArB,CAA4BN,IAA5B,EAAkCG,IAAlC;;AACA,cAAA,OAAI,CAAC/H,eAAL,CAAqBkI,MAArB,CAA4BL,MAA5B,EAAoCE,IAApC;;AACA,cAAA,OAAI,CAAC/H,eAAL,CAAqBmI,SAArB;;AACA,cAAA,OAAI,CAACnI,eAAL,CAAqBiH,SAArB,GAAiC,MAAjC;;AACA,cAAA,OAAI,CAACjH,eAAL,CAAqBoI,IAArB;AACH,aAZD;AAaH;;;0CAEe;AAAA;;AACZ,iBAAKlM,aAAL,CAAmBsK,sBAAnB,GAA4C,KAAKlK,MAAL,CAAYQ,QAAZ,CAAqBG,oBAAjE;AAEA,iBAAKf,aAAL,CAAmBwE,IAAnB,CAAwB0C,OAAxB,CAAgC,UAACC,QAAD,EAAWuD,aAAX,EAA6B;AACzD,cAAA,OAAI,CAACW,oBAAL,CAA0BlE,QAA1B,EAAoCuD,aAApC,EAAmD,OAAI,CAACtK,MAAL,CAAYQ,QAAZ,CAAqBG,oBAAxE;AACH,aAFD;AAIA,iBAAKoL,aAAL;AACH;;;0CAEe;AACZ,gBAAIC,SAAS,GAAG,CAAC,KAAKhM,MAAL,CAAYQ,QAAZ,CAAqBO,iBAArB,GAAyC,KAAKf,MAAL,CAAYQ,QAAZ,CAAqBQ,eAA/D,IAAkF,KAAKpB,aAAL,CAAmBkJ,SAAnB,CAA6BxC,MAA/H;;AAEA,iBAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/H,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAAlD,EAA0D,EAAEqB,CAA5D,EAA+D;AAC3D,kBAAI8C,CAAC,GAAG,KAAK7K,aAAL,CAAmB6E,UAAnB,CAA8BkD,CAA9B,EAAiC0D,MAAjC,GAA0C,KAAKrL,MAAL,CAAYQ,QAAZ,CAAqBK,8BAArB,GAAsD,CAAxG;AACA,mBAAKoL,sBAAL,CAA4BxB,CAA5B,EAA+BuB,SAA/B;AACH;AACJ;;;iDAEsBvB,C,EAAGuB,S,EAAW;AAAA;;AACjC,gBAAIzB,CAAC,GAAG,CAAR;AAEA,iBAAK3K,aAAL,CAAmBkJ,SAAnB,CAA6BhC,OAA7B,CAAqC,UAACiC,KAAD,EAAQiC,UAAR,EAAuB;AACxD,kBAAIkB,SAAS,GAAG7G,IAAI,CAACC,KAAL,CAAW,OAAI,CAACtF,MAAL,CAAYQ,QAAZ,CAAqBO,iBAArB,GAAyCiL,SAAS,GAAGhB,UAAhE,CAAhB;AACA,kBAAIL,SAAS,GAAG,UAAUuB,SAAV,GAAsB,IAAtB,GAA6BA,SAA7B,GAAyC,IAAzC,GAAgDA,SAAhD,GAA4D,MAA5E;AACA,cAAA,OAAI,CAACxI,eAAL,CAAqBiH,SAArB,GAAiCA,SAAjC;AACA,kBAAIhB,MAAM,GAAGZ,KAAK,CAACG,YAAN,CAAmB5C,MAAnB,GAA4B,OAAI,CAACtG,MAAL,CAAYQ,QAAZ,CAAqBG,oBAA9D;;AACA,cAAA,OAAI,CAAC+C,eAAL,CAAqBkH,QAArB,CAA8BH,CAAC,GAAGpF,IAAI,CAAC8G,KAAL,CAAW,OAAI,CAACnM,MAAL,CAAYQ,QAAZ,CAAqBS,aAArB,GAAqC,CAAhD,CAAlC,EAAsFsJ,CAAtF,EACI,OAAI,CAACvK,MAAL,CAAYQ,QAAZ,CAAqBS,aADzB,EACwC0I,MADxC;;AAEAY,cAAAA,CAAC,IAAIZ,MAAL;AACH,aARD;AASH;;;+CAEoB;AACjB,iBAAKJ,gBAAL;AACH;;;yCAEc;AACX,iBAAK6C,aAAL;AACH;;;+CAEoB;AACjB,iBAAKxF,wBAAL;AACA,iBAAK2C,gBAAL;AACH;;;uDAE4B;AACzB,iBAAK3C,wBAAL;AACA,iBAAK2C,gBAAL;AACH;;;yCAEc;AACX,iBAAKzJ,KAAL,CAAWiC,IAAX,CAAgBa,SAAhB,GAA4B,CAAC,KAAK9C,KAAL,CAAWiC,IAAX,CAAgBa,SAA7C;AACA,iBAAK2G,gBAAL;AACH;;;wCAEanG,G,EAAK;AACf,gBAAI,CAAC,KAAKiJ,gBAAV,EAA4B;AACxB,mBAAKC,SAAL,CAAelJ,GAAf;AACAA,cAAAA,GAAG,CAACmJ,cAAJ;AACH;AACJ;;;uCAEYnJ,G,EAAK;AACd,gBAAI,KAAKiJ,gBAAT,EAA2B;AACvB,mBAAKC,SAAL,CAAelJ,GAAf;AACH;;AAED,iBAAKiJ,gBAAL,GAAwB,CAAC,KAAKA,gBAA9B;AACAjJ,YAAAA,GAAG,CAACmJ,cAAJ;AACH;;;oCAESnJ,G,EAAK;AACX,iBAAKvD,UAAL,CAAgB2M,aAAhB,GAAgC,KAAKC,WAAL,CAAiBrJ,GAAjB,EAAsB,KAAKI,cAA3B,CAAhC;AACA,iBAAK4I,aAAL;;AAEA,iBAAK,IAAIzE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/H,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAAlD,EAA0D,EAAEqB,CAA5D,EAA+D;AAC3D,kBAAInC,MAAM,GAAG,KAAK5F,aAAL,CAAmB6E,UAAnB,CAA8BkD,CAA9B,CAAb,CAD2D,CAG3D;;AACA,kBAAInC,MAAM,CAAC6F,MAAP,IAAiB,KAAKxL,UAAL,CAAgB2M,aAAhB,CAA8B/B,CAA/C,IAAoD,KAAK5K,UAAL,CAAgB2M,aAAhB,CAA8B/B,CAA9B,IAAmCjF,MAAM,CAAC8F,IAAlG,EAAwG;AACpG,qBAAKoB,cAAL;AACA,qBAAKC,mBAAL;AACA;AACH;AACJ;AACJ;;;sCAEWvJ,G,EAAKwJ,M,EAAQ;AACrB,gBAAIC,IAAI,GAAGD,MAAM,CAACE,qBAAP,EAAX;AAEA,mBAAO;AACHrC,cAAAA,CAAC,EAAErH,GAAG,CAAC2J,OAAJ,GAAcF,IAAI,CAACG,IADnB;AAEHzC,cAAAA,CAAC,EAAEnH,GAAG,CAAC6J,OAAJ,GAAcJ,IAAI,CAACK;AAFnB,aAAP;AAIH;;;0CAEe;AACZ,gBAAI,KAAKrN,UAAL,CAAgB2M,aAApB,EAAmC;AAC/B,kBAAIpL,IAAI,GAAG,KAAK+L,gBAAL,EAAX;AACA,mBAAKtN,UAAL,CAAgBuN,WAAhB,GAA8B/H,IAAI,CAAC8B,GAAL,CAAS9B,IAAI,CAAC+B,GAAL,CAAS,CAAT,EAAY,KAAKvH,UAAL,CAAgB2M,aAAhB,CAA8BjC,CAA9B,GAAkCnJ,IAAI,GAAG,CAArD,CAAT,EAAkE,KAAKoC,cAAL,CAAoBmG,MAApB,GAA6BvI,IAA/F,CAA9B;;AAEA,kBAAI,KAAKtB,KAAL,CAAWiC,IAAX,CAAgBE,YAAhB,IAAgC,KAAKnC,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBC,YAAzB,CAAsCC,SAA1E,EAAqF;AACjF,qBAAKmL,qBAAL,CAA2B,IAA3B;AACH,eAFD,MAEO;AACH,qBAAKC,mBAAL;AACH;AACJ;AACJ;;;6CAEkB;AACf,mBAAO,KAAKtN,MAAL,CAAYkB,SAAZ,CAAsBE,IAAtB,GAA6B,CAApC;AACH;;;gDAEqB;AAClB,iBAAKkI,UAAL;AACA,gBAAIlI,IAAI,GAAG,KAAK+L,gBAAL,EAAX;AACA,iBAAKtN,UAAL,CAAgBuN,WAAhB,GAA8B/H,IAAI,CAAC8B,GAAL,CAAS9B,IAAI,CAAC+B,GAAL,CAAS,CAAT,EAAY,KAAKvH,UAAL,CAAgB2M,aAAhB,CAA8BjC,CAA9B,GAAkCnJ,IAAI,GAAG,CAArD,CAAT,EAAkE,KAAKoC,cAAL,CAAoBmG,MAApB,GAA6B,KAAKwD,gBAAL,EAA/F,CAA9B;AACA,iBAAKtN,UAAL,CAAgB0N,WAAhB,GAA8BlI,IAAI,CAAC8B,GAAL,CAAS9B,IAAI,CAAC+B,GAAL,CAAS,CAAT,EAAY,KAAKvH,UAAL,CAAgB2M,aAAhB,CAA8B/B,CAA9B,GAAkC,KAAKzK,MAAL,CAAYkB,SAAZ,CAAsBE,IAApE,CAAT,EAAoF,KAAKoC,cAAL,CAAoBkG,KAApB,GAA4BtI,IAAhH,CAA9B;AACA,iBAAKyC,gBAAL,CAAsB2J,WAAtB,GAAoC,KAAKxN,MAAL,CAAYkB,SAAZ,CAAsBC,KAA1D;AACA,iBAAK0C,gBAAL,CAAsB4J,UAAtB,CAAiC,KAAK5N,UAAL,CAAgB0N,WAAjD,EAA8D,KAAK1N,UAAL,CAAgBuN,WAA9E,EAA2FhM,IAA3F,EAAiGA,IAAjG;AACH;;;gDAEqBsM,a,EAAe;AAAA;;AACjC,gBAAItM,IAAI,GAAG,KAAK+L,gBAAL,EAAX;AACA,gBAAIQ,MAAM,GAAG,KAAKC,kBAAL,EAAb;;AAEA,gBAAID,MAAM,IAAI,CAAd,EAAiB;AACb,kBAAID,aAAJ,EAAmB;AACf,qBAAKpE,UAAL;AACH;;AAED,mBAAKzF,gBAAL,CAAsB2J,WAAtB,GAAoC,KAAKxN,MAAL,CAAYkB,SAAZ,CAAsBC,KAA1D;AAEA,mBAAKvB,aAAL,CAAmB6E,UAAnB,CAA8BqC,OAA9B,CAAsC,UAACtB,MAAD,EAAY;AAC9CA,gBAAAA,MAAM,CAAC+H,WAAP,GAAqB/H,MAAM,CAAC6F,MAAP,GAAgBsC,MAArC;;AACA,gBAAA,OAAI,CAAC9J,gBAAL,CAAsB4J,UAAtB,CAAiCjI,MAAM,CAAC+H,WAAxC,EAAqD,OAAI,CAAC1N,UAAL,CAAgBuN,WAArE,EAAkFhM,IAAlF,EAAwFA,IAAxF;AACH,eAHD;;AAKA,kBAAIsM,aAAJ,EAAmB;AACf,qBAAKG,WAAL;AACH;AACJ;AACJ;;;+CAEoB;AACjB,iBAAK,IAAIlG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/H,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAAlD,EAA0D,EAAEqB,CAA5D,EAA+D;AAC3D,kBAAInC,MAAM,GAAG,KAAK5F,aAAL,CAAmB6E,UAAnB,CAA8BkD,CAA9B,CAAb;;AAEA,kBAAI,KAAKmG,oBAAL,CAA0BtI,MAA1B,CAAJ,EAAuC;AACnC,qBAAK3F,UAAL,CAAgBkO,oBAAhB,GAAuC,KAAKlO,UAAL,CAAgB2M,aAAhB,CAA8B/B,CAA9B,GAAkCjF,MAAM,CAAC6F,MAAhF;AACA,qBAAKxL,UAAL,CAAgBmO,iBAAhB,GAAoCrG,CAApC;AAEA,uBAAOtC,IAAI,CAAC8B,GAAL,CAAS9B,IAAI,CAAC+B,GAAL,CAAS5B,MAAM,CAAC6F,MAAhB,EACZ,KAAKxL,UAAL,CAAgB2M,aAAhB,CAA8B/B,CAA9B,GAAkC,KAAKzK,MAAL,CAAYkB,SAAZ,CAAsBE,IAD5C,CAAT,EAEHoE,MAAM,CAAC8F,IAAP,GAAc,KAAK6B,gBAAL,EAFX,IAEsC3H,MAAM,CAAC6F,MAFpD;AAGH;AACJ;AACJ;;;+CAEoB7F,M,EAAQ;AACzB,mBAAOA,MAAM,CAAC6F,MAAP,IAAiB,KAAKxL,UAAL,CAAgB2M,aAAhB,CAA8B/B,CAA/C,IAAoD,KAAK5K,UAAL,CAAgB2M,aAAhB,CAA8B/B,CAA9B,IAAmCjF,MAAM,CAAC8F,IAArG;AACH;;;wCAEa;AAAA;;AACV,gBAAI2C,SAAS,GAAG,KAAKvK,eAAL,CAAqBwK,YAArB,CAAkC,KAAKrO,UAAL,CAAgB2M,aAAhB,CAA8B/B,CAAhE,EAAmE,KAAK5K,UAAL,CAAgB2M,aAAhB,CAA8BjC,CAAjG,EAAoG,CAApG,EAAuG,CAAvG,EAA0GnG,IAA1H;AACA,iBAAKP,gBAAL,CAAsB2J,WAAtB,GAAoC,SAASS,SAAS,CAAC,CAAD,CAAlB,GAAwB,GAAxB,GAA8BA,SAAS,CAAC,CAAD,CAAvC,GAA6C,GAA7C,GAAmDA,SAAS,CAAC,CAAD,CAA5D,GAAkE,GAAtG;AACA,gBAAIlH,QAAQ,GAAG,KAAKoH,uBAAL,EAAf;AACApH,YAAAA,QAAQ,GAAG,IAAX,CAJU,CAIO;;AAEjB,gBAAIA,QAAJ,EAAc;AACV,mBAAKnH,aAAL,CAAmB6E,UAAnB,CAA8BqC,OAA9B,CAAsC,UAACtB,MAAD,EAASjC,KAAT,EAAmB;AACrD,oBAAI,CAAC,OAAI,CAACuK,oBAAL,CAA0BtI,MAA1B,CAAL,EAAwC;AACpC,kBAAA,OAAI,CAAC4I,iBAAL,CAAuB5I,MAAvB,EAA+BuB,QAA/B,EAAyCxD,KAAzC;AACH;AACJ,eAJD;AAKH;AACJ;;;oDAEyB;AACtB,iBAAK,IAAIoE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/H,aAAL,CAAmBwE,IAAnB,CAAwBkC,MAA5C,EAAoD,EAAEqB,CAAtD,EAAyD;AACrD,kBAAIZ,QAAQ,GAAG,KAAKnH,aAAL,CAAmBwE,IAAnB,CAAwBuD,CAAxB,CAAf;;AAEA,kBAAIZ,QAAQ,CAACwD,CAAT,GAAa,KAAKvK,MAAL,CAAYQ,QAAZ,CAAqBG,oBAAlC,IAA0D,KAAKd,UAAL,CAAgB2M,aAAhB,CAA8BjC,CAAxF,IACA,KAAK1K,UAAL,CAAgB2M,aAAhB,CAA8BjC,CAA9B,IAAmCxD,QAAQ,CAACwD,CADhD,EACmD;AAC/C,uBAAOxD,QAAP;AACH;AACJ;AACJ;;;4CAEiBvB,M,EAAQuB,Q,EAAUxD,K,EAAO;AACvC,oBAAQ,KAAKzD,KAAL,CAAWiC,IAAX,CAAgBK,WAAxB;AACI,mBAAK,KAAKtC,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBI,WAAzB,CAAqCC,OAA1C;AACI,qBAAKgM,UAAL,CAAgB7I,MAAhB,EAAwBuB,QAAxB;AACA;;AAEJ,mBAAK,KAAKjH,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBI,WAAzB,CAAqCE,YAA1C;AACI,qBAAKgM,eAAL,CAAqB9I,MAArB,EAA6BuB,QAA7B;AACA;;AAEJ,mBAAK,KAAKjH,KAAL,CAAWiC,IAAX,CAAgBC,QAAhB,CAAyBI,WAAzB,CAAqCG,YAA1C;AACI,qBAAKgM,mBAAL,CAAyB/I,MAAzB,EAAiCuB,QAAjC,EAA2CxD,KAA3C;AACA;;AAEJ;AACI;AAdR;AAgBH;;;qCAEUiC,M,EAAQuB,Q,EAAU;AACzB,gBAAIyH,OAAO,GAAGhJ,MAAM,CAAC6F,MAAP,GAAgB,KAAKxL,UAAL,CAAgBkO,oBAA9C;AACA,gBAAIU,UAAU,GAAGD,OAAO,GAAG,KAAKxO,MAAL,CAAYkB,SAAZ,CAAsBG,UAAjD;AACA,gBAAIqN,WAAW,GAAGF,OAAO,GAAG,KAAKxO,MAAL,CAAYQ,QAAZ,CAAqBC,UAAjD;AACA,gBAAIkO,cAAc,GAAG5H,QAAQ,CAACwD,CAAT,GAAa,KAAKvK,MAAL,CAAYQ,QAAZ,CAAqBG,oBAAvD;AAEA,iBAAKiO,cAAL,CAAoBH,UAApB,EAAgC1H,QAAQ,CAACwD,CAAT,GAAa,KAAKvK,MAAL,CAAYkB,SAAZ,CAAsBG,UAAnE,EAA+E0F,QAAQ,CAACwD,CAAxF;AACA,iBAAKqE,cAAL,CAAoBF,WAApB,EAAiC3H,QAAQ,CAACwD,CAA1C,EAA6CxD,QAAQ,CAACwD,CAAT,GAAa,KAAKvK,MAAL,CAAYkB,SAAZ,CAAsBG,UAAhF;AACA,iBAAKuN,cAAL,CAAoBH,UAApB,EAAgCE,cAAc,GAAG,KAAK3O,MAAL,CAAYkB,SAAZ,CAAsBG,UAAvE,EAAmFsN,cAAnF;AACA,iBAAKC,cAAL,CAAoBF,WAApB,EAAiCC,cAAjC,EAAiDA,cAAc,GAAG,KAAK3O,MAAL,CAAYkB,SAAZ,CAAsBG,UAAxF;AACH;;;yCAEcgK,M,EAAQwD,M,EAAQpD,I,EAAM;AACjC,iBAAKqD,yBAAL,CAA+BzD,MAA/B,EAAuCwD,MAAvC,EAA+CxD,MAAM,GAAG,KAAKrL,MAAL,CAAYkB,SAAZ,CAAsBG,UAA9E,EAA0FoK,IAA1F;AACH;;;oDAEyBJ,M,EAAQwD,M,EAAQvD,I,EAAMG,I,EAAM;AAClD,iBAAK5H,gBAAL,CAAsB6H,SAAtB;AACA,iBAAK7H,gBAAL,CAAsB8H,MAAtB,CAA6BN,MAA7B,EAAqCwD,MAArC;AACA,iBAAKhL,gBAAL,CAAsB+H,MAAtB,CAA6BN,IAA7B,EAAmCG,IAAnC;AACA,iBAAK5H,gBAAL,CAAsBkL,MAAtB;AACA,iBAAKlL,gBAAL,CAAsBgI,SAAtB;AACH;;;0CAEerG,M,EAAQuB,Q,EAAU;AAC9B,gBAAIiI,SAAS,GAAG,KAAK7B,gBAAL,EAAhB;AACA,gBAAI8B,QAAQ,GAAGzJ,MAAM,CAAC6F,MAAP,GAAgB,KAAKxL,UAAL,CAAgBkO,oBAA/C;AACA,gBAAIzC,IAAI,GAAG9F,MAAM,CAAC+H,WAAP,GAAqByB,SAAhC;AACA,gBAAIE,oBAAoB,GAAG,KAAKlP,MAAL,CAAYQ,QAAZ,CAAqBC,UAArB,GAAkC,CAA7D;AACA,gBAAI0O,SAAS,GAAGF,QAAQ,GAAGC,oBAA3B;AACA,gBAAIE,UAAU,GAAGH,QAAQ,GAAGC,oBAA5B;AACA,gBAAIG,QAAQ,GAAGtI,QAAQ,CAACwD,CAAT,GAAa2E,oBAA5B;AACA,gBAAII,WAAW,GAAGvI,QAAQ,CAACwD,CAAT,GAAa2E,oBAA/B;AACA,gBAAIzD,IAAI,GAAG,KAAK5L,UAAL,CAAgBuN,WAAhB,GAA8B4B,SAAzC;AAEA,iBAAKO,oBAAL,CAA0B/J,MAA1B,EAAkC8F,IAAlC,EAAwC6D,SAAxC,EAAmDC,UAAnD,EAA+DC,QAA/D,EAAyEC,WAAzE,EAAsF7D,IAAtF;AACH;;;+CAEoBjG,M,EAAQ8F,I,EAAM6D,S,EAAWC,U,EAAYC,Q,EAAUC,W,EAAa7D,I,EAAM;AACnF;AACA,iBAAKqD,yBAAL,CAA+BtJ,MAAM,CAAC+H,WAAtC,EAAmD8B,QAAnD,EAA6DF,SAA7D,EAAwEE,QAAxE;AACA,iBAAKP,yBAAL,CAA+BM,UAA/B,EAA2CC,QAA3C,EAAqD/D,IAArD,EAA2D+D,QAA3D,EAHmF,CAKnF;;AACA,iBAAKP,yBAAL,CAA+BtJ,MAAM,CAAC+H,WAAtC,EAAmD+B,WAAnD,EAAgEH,SAAhE,EAA2EG,WAA3E;AACA,iBAAKR,yBAAL,CAA+BM,UAA/B,EAA2CE,WAA3C,EAAwDhE,IAAxD,EAA8DgE,WAA9D,EAPmF,CASnF;;AACA,iBAAKR,yBAAL,CAA+BK,SAA/B,EAA0C,KAAKtP,UAAL,CAAgBuN,WAA1D,EAAuE+B,SAAvE,EAAkFE,QAAlF;AACA,iBAAKP,yBAAL,CAA+BK,SAA/B,EAA0CG,WAA1C,EAAuDH,SAAvD,EAAkE1D,IAAlE,EAXmF,CAanF;;AACA,iBAAKqD,yBAAL,CAA+BM,UAA/B,EAA2C,KAAKvP,UAAL,CAAgBuN,WAA3D,EAAwEgC,UAAxE,EAAoFC,QAApF;AACA,iBAAKP,yBAAL,CAA+BM,UAA/B,EAA2CE,WAA3C,EAAwDF,UAAxD,EAAoE3D,IAApE;AACH;;;8CAEmBjG,M,EAAQuB,Q,EAAUxD,K,EAAO;AAAA;;AACzC,gBAAIA,KAAK,IAAI,CAAb,EAAgB;AACZ,mBAAK+F,UAAL;AACH;;AAEDvC,YAAAA,QAAQ,CAACtC,UAAT,CAAoBlB,KAApB,EAA2Ba,IAA3B,CAAgC0C,OAAhC,CAAwC,UAAC0I,aAAD,EAAgBhF,UAAhB,EAA+B;AACnE,kBAAIhD,QAAQ,GAAG,OAAI,CAACC,WAAL,CAAiBjC,MAAjB,EAAyB,OAAI,CAACxF,MAAL,CAAYC,MAAZ,CAAmB,OAAI,CAACJ,UAAL,CAAgBmO,iBAAnC,CAAzB,CAAf;;AACA,cAAA,OAAI,CAACnK,gBAAL,CAAsB8G,SAAtB,GAAkC,OAAI,CAACD,eAAL,CAAqB8E,aAAa,CAACvI,KAAnC,EAA0CO,QAA1C,CAAlC;;AACA,cAAA,OAAI,CAAC3D,gBAAL,CAAsB+G,QAAtB,CAA+B4E,aAAa,CAAC/E,CAA7C,EAAgD1D,QAAQ,CAACwD,CAAzD,EAA4D,OAAI,CAAC3K,aAAL,CAAmBsK,sBAA/E,EAAuG,OAAI,CAACtK,aAAL,CAAmBsK,sBAA1H;;AAEA,kBAAIsF,aAAa,CAAC/E,CAAd,IAAmBjF,MAAM,CAAC6F,MAAP,GAAgB,OAAI,CAACxL,UAAL,CAAgBkO,oBAAvD,EAA6E;AACzE;AACAvI,gBAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACqB,cAAD,EAAiBsH,mBAAjB,EAAyC;AACzD,sBAAIC,WAAW,GAAGvH,cAAc,CAACnB,MAAf,CAAsBwD,UAAtB,CAAlB;AACA,sBAAIvD,KAAK,GAAGyI,WAAW,GAAGA,WAAW,CAAC,CAAD,CAAd,GAAoB,CAA3C;AACA,kBAAA,OAAI,CAAC7L,gBAAL,CAAsB8G,SAAtB,GAAkC,OAAI,CAACD,eAAL,CAAqBzD,KAArB,EAA4BO,QAA5B,CAAlC;;AACA,kBAAA,OAAI,CAAC3D,gBAAL,CAAsB+G,QAAtB,CAA+B4E,aAAa,CAAC/E,CAA7C,EAAgD,OAAI,CAAC7K,aAAL,CAAmBwE,IAAnB,CAAwBqL,mBAAxB,EAA6ClF,CAA7F,EACI,OAAI,CAAC3K,aAAL,CAAmBsK,sBADvB,EAC+C,OAAI,CAACtK,aAAL,CAAmBsK,sBADlE;AAEH,iBAND;AAOH;AACJ,aAfD;;AAiBA,gBAAI3G,KAAK,IAAIwD,QAAQ,CAACtC,UAAT,CAAoB6B,MAApB,GAA6B,CAA1C,EAA6C;AACzC,mBAAK+G,qBAAL,CAA2B,KAA3B;AACH;AACJ;;;2CAEgB;AAAA;;AACb,iBAAKsC,wBAAL;;AAEA,gBAAI,KAAK9P,UAAL,CAAgBuE,IAAhB,CAAqBkC,MAArB,GAA8B,CAAlC,EAAqC;AACjC,mBAAKjH,QAAL,CAAc,YAAM;AAChB,gBAAA,OAAI,CAACS,KAAL,CAAWiC,IAAX,CAAgBgC,gBAAhB,GAAmC,OAAI,CAACnE,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAA9B,GAAuC,OAAI,CAACtG,MAAL,CAAYsB,UAAZ,CAAuBC,eAA9D,GAC/B,CAAC,OAAI,CAAC3B,aAAL,CAAmB6E,UAAnB,CAA8B6B,MAA9B,GAAuC,CAAxC,IAA6C,OAAI,CAACtG,MAAL,CAAYsB,UAAZ,CAAuBE,oBADxE;AAEA,gBAAA,OAAI,CAAC1B,KAAL,CAAWiC,IAAX,CAAgB+B,eAAhB,GAAkC,OAAI,CAACjE,UAAL,CAAgBuE,IAAhB,CAAqB,CAArB,EAAwBK,UAAxB,CAAmC,CAAnC,EAAsCL,IAAtC,CAA2CkC,MAA3C,GAAoD,OAAI,CAACtG,MAAL,CAAYsB,UAAZ,CAAuBb,UAA7G;;AACA,gBAAA,OAAI,CAACX,KAAL,CAAW0E,MAAX;;AACA,gBAAA,OAAI,CAAC3E,UAAL,CAAgB+P,cAAhB,GAAiC,OAAI,CAACnM,cAAL,CAAoB,iBAApB,EAAuCoM,YAAxE;;AACA,gBAAA,OAAI,CAACC,kBAAL;AACH,eAPD;AAQH;AACJ;;;qDAE0B;AAAA;;AACvB,gBAAI,CAAC,KAAKjQ,UAAL,CAAgBuE,IAArB,EAA2B;AACvB,mBAAKvE,UAAL,CAAgBuE,IAAhB,GAAuB,EAAvB;AACH;;AAED,iBAAKvE,UAAL,CAAgBuE,IAAhB,CAAqBkC,MAArB,GAA8B,CAA9B;;AAEA,gBAAI,KAAKxG,KAAL,CAAWiC,IAAX,CAAgBa,SAApB,EAA+B;AAC3B,mBAAKhD,aAAL,CAAmBkJ,SAAnB,CAA6BhC,OAA7B,CAAqC,UAACiC,KAAD,EAAQiC,UAAR,EAAuB;AACxD,oBAAI+E,aAAa,GAAGhH,KAAK,CAACG,YAAN,CAAmB,CAAnB,CAApB;;AAEA,oBAAI,OAAI,CAAC8G,oBAAL,CAA0BD,aAA1B,CAAJ,EAA8C;AAC1C,sBAAIE,aAAa,GAAG,OAAI,CAACC,uBAAL,CAA6BH,aAA7B,EAA4C,OAAI,CAACI,yBAAL,CAA+BJ,aAA/B,CAA5C,CAApB;;AACAE,kBAAAA,aAAa,CAACjF,UAAd,GAA2BA,UAAU,GAAG,CAAxC;AACH;AACJ,eAPD;AAQH,aATD,MASO;AACH,mBAAKpL,aAAL,CAAmBwE,IAAnB,CAAwB0C,OAAxB,CAAgC,UAACC,QAAD,EAAc;AAC1C,oBAAI,OAAI,CAACiJ,oBAAL,CAA0BjJ,QAA1B,CAAJ,EAAyC;AACrC,kBAAA,OAAI,CAACmJ,uBAAL,CAA6BnJ,QAA7B,EAAuC,OAAI,CAACoJ,yBAAL,CAA+BpJ,QAA/B,CAAvC;AACH;AACJ,eAJD;AAKH;AACJ;;;+CAEoBA,Q,EAAU;AAC3B,mBAAOA,QAAQ,CAACwD,CAAT,IAAc,KAAK1K,UAAL,CAAgBuN,WAAhB,GAA8B,KAAKD,gBAAL,EAA5C,IACHpG,QAAQ,CAACwD,CAAT,GAAa,KAAK3K,aAAL,CAAmBsK,sBAAhC,IAA0D,KAAKrK,UAAL,CAAgBuN,WAD9E;AAEH;;;oDAEyBrG,Q,EAAU;AAAA;;AAChC,gBAAIqJ,OAAO,GAAG,EAAd;;AAEA,iBAAK,IAAIzI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,QAAQ,CAACtC,UAAT,CAAoB6B,MAAxC,EAAgD,EAAEqB,CAAlD,EAAqD;AACjD,kBAAInC,MAAM,GAAGuB,QAAQ,CAACtC,UAAT,CAAoBkD,CAApB,CAAb;;AAEA,kBAAInC,MAAM,CAACpB,IAAP,CAAYkC,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,oBAAI8E,cAAc,GAAG,KAAKxL,aAAL,CAAmB6E,UAAnB,CAA8BkD,CAA9B,CAArB;AAEAnC,gBAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACO,KAAD,EAAQ9D,KAAR,EAAkB;AAClC,sBAAI6H,cAAc,CAACmC,WAAf,IAA8BlG,KAAK,CAACoD,CAApC,IAAyCpD,KAAK,CAACoD,CAAN,IAAWW,cAAc,CAACmC,WAAf,GAA6B,OAAI,CAACJ,gBAAL,EAArF,EAA8G;AAC1GiD,oBAAAA,OAAO,CAAC7H,IAAR,CAAahF,KAAb;AACH;AACJ,iBAJD;AAMA;AACH;AACJ;;AAED,mBAAO6M,OAAP;AACH;;;kDAEuBC,gB,EAAkBC,S,EAAW;AACjD,gBAAIL,aAAa,GAAG,EAApB;AACAA,YAAAA,aAAa,CAAClJ,QAAd,GAAyBsJ,gBAAgB,CAACtJ,QAA1C;AACAkJ,YAAAA,aAAa,CAACxL,UAAd,GAA2B,EAA3B;AACA,iBAAK8L,eAAL,CAAqBN,aAArB,EAAoCI,gBAApC,EAAsDC,SAAtD;AACA,iBAAKE,wBAAL,CAA8BP,aAA9B;AACA,iBAAKpQ,UAAL,CAAgBuE,IAAhB,CAAqBmE,IAArB,CAA0B0H,aAA1B;AACA,mBAAOA,aAAP;AACH;;;0CAEeA,a,EAAeI,gB,EAAkBC,S,EAAW;AACxD,iBAAK1Q,aAAL,CAAmB6E,UAAnB,CAA8BqC,OAA9B,CAAsC,UAACtB,MAAD,EAAS0C,WAAT,EAAyB;AAC3D,kBAAIuI,WAAW,GAAG,EAAlB;AACAA,cAAAA,WAAW,CAACrM,IAAZ,GAAmB,EAAnB;AACAqM,cAAAA,WAAW,CAACC,SAAZ,GAAwB,EAAxB;AAEAJ,cAAAA,SAAS,CAACxJ,OAAV,CAAkB,UAACvD,KAAD,EAAW;AACzB,oBAAI8D,KAAK,GAAGgJ,gBAAgB,CAAC5L,UAAjB,CAA4ByD,WAA5B,EAAyC9D,IAAzC,CAA8Cb,KAA9C,CAAZ;;AAEA,oBAAI8D,KAAJ,EAAW;AACPoJ,kBAAAA,WAAW,CAACrM,IAAZ,CAAiBmE,IAAjB,CAAsBlB,KAAtB;AACH;AACJ,eAND;AAQA4I,cAAAA,aAAa,CAACxL,UAAd,CAAyB8D,IAAzB,CAA8BkI,WAA9B;AACH,aAdD;AAeH;;;mDAEwB1J,Q,EAAU;AAAA;;AAC/BA,YAAAA,QAAQ,CAACtC,UAAT,CAAoBqC,OAApB,CAA4B,UAACtB,MAAD,EAAS0C,WAAT,EAAyB;AACjD,cAAA,OAAI,CAAClI,MAAL,CAAYC,MAAZ,CAAmBiI,WAAnB,EAAgCpB,OAAhC,CAAwC,YAAM;AAC1C,oBAAI6J,KAAK,GAAG,EAAZ;AACAA,gBAAAA,KAAK,CAACC,SAAN,GAAkB,EAAlB;AACApL,gBAAAA,MAAM,CAACkL,SAAP,CAAiBnI,IAAjB,CAAsBoI,KAAtB;AACH,eAJD;;AAMAnL,cAAAA,MAAM,CAACpB,IAAP,CAAY0C,OAAZ,CAAoB,UAACO,KAAD,EAAW;AAC3B,oBAAIJ,KAAK,GAAGI,KAAK,CAACJ,KAAlB;AAEAzB,gBAAAA,MAAM,CAACkL,SAAP,CAAiB5J,OAAjB,CAAyB,UAAC6J,KAAD,EAAW;AAChCA,kBAAAA,KAAK,CAACC,SAAN,CAAgBrI,IAAhB,CAAqBtB,KAAK,GAAG,CAAR,GAAYA,KAAZ,GAAoB,CAAzC;AACAA,kBAAAA,KAAK,IAAI,OAAI,CAACrH,aAAL,CAAmB6E,UAAnB,CAA8ByD,WAA9B,EAA2CX,UAApD;AACH,iBAHD;AAIH,eAPD;AAQH,aAfD;AAgBH;;;+CAEoB;AAAA;;AACjB,iBAAK1H,UAAL,CAAgBuE,IAAhB,CAAqB0C,OAArB,CAA6B,UAACC,QAAD,EAAWuD,aAAX,EAA6B;AACtD,kBAAIsC,MAAM,GAAG,OAAI,CAACnJ,cAAL,CAAoB,sBAAsB6G,aAA1C,CAAb;;AACA,kBAAIuG,OAAO,GAAGjE,MAAM,CAACjJ,UAAP,CAAkB,IAAlB,CAAd;AACAkN,cAAAA,OAAO,CAACpH,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBmD,MAAM,CAAClD,KAA/B,EAAsCkD,MAAM,CAACjD,MAA7C;AAEA5C,cAAAA,QAAQ,CAACtC,UAAT,CAAoBqC,OAApB,CAA4B,UAACtB,MAAD,EAAS0C,WAAT,EAAyB;AACjD1C,gBAAAA,MAAM,CAACkL,SAAP,CAAiB5J,OAAjB,CAAyB,UAAC6J,KAAD,EAAQG,UAAR,EAAuB;AAC5C,sBAAIvG,CAAC,GAAG,CAAC,OAAI,CAACvK,MAAL,CAAYsB,UAAZ,CAAuBC,eAAvB,GAAyC,OAAI,CAACvB,MAAL,CAAYsB,UAAZ,CAAuBE,oBAAjE,IAAyF0G,WAAzF,GACJ,OAAI,CAAClI,MAAL,CAAYsB,UAAZ,CAAuBC,eAD3B;AAEAsP,kBAAAA,OAAO,CAACnF,SAAR;AACAmF,kBAAAA,OAAO,CAAClF,MAAR,CAAe,CAAf,EAAkBpB,CAAlB;AACA,sBAAIE,CAAC,GAAG,CAAR;AACA,sBAAIsG,SAAS,GAAG,CAAhB;AACA,sBAAIC,aAAa,GAAG,CAApB;AAEAL,kBAAAA,KAAK,CAACC,SAAN,CAAgB9J,OAAhB,CAAwB,UAACG,KAAD,EAAQgK,UAAR,EAAuB;AAC3CxG,oBAAAA,CAAC,GAAG,OAAI,CAACzK,MAAL,CAAYsB,UAAZ,CAAuBb,UAAvB,GAAoCwQ,UAAxC;;AACA,oBAAA,OAAI,CAACC,uBAAL,CAA6BL,OAA7B,EAAsC5J,KAAtC,EAA6C8J,SAA7C,EAAwDC,aAAxD,EAAuEF,UAAvE,EAAmFrG,CAAnF,EAAsFF,CAAtF,EACI,OAAI,CAAC3K,aAAL,CAAmB6E,UAAnB,CAA8ByD,WAA9B,EAA2CX,UAD/C;;AAEAwJ,oBAAAA,SAAS,GAAGtG,CAAZ;AACAuG,oBAAAA,aAAa,GAAG/J,KAAhB;AACH,mBAND;AAQA4J,kBAAAA,OAAO,CAACjF,MAAR,CAAenB,CAAf,EAAkBF,CAAlB;AACAsG,kBAAAA,OAAO,CAACjF,MAAR,CAAe,OAAI,CAAC/L,UAAL,CAAgBsR,WAA/B,EAA4C5G,CAA5C;AACAsG,kBAAAA,OAAO,CAAChF,SAAR;AACAgF,kBAAAA,OAAO,CAAClG,SAAR,GAAoB,MAAM,OAAI,CAAC3K,MAAL,CAAYC,MAAZ,CAAmBiI,WAAnB,EAAgC4I,UAAhC,CAA1B;AACAD,kBAAAA,OAAO,CAAC/E,IAAR;AACH,iBAtBD;AAuBH,eAxBD;AAyBH,aA9BD;AA+BH;;;kDAEuB+E,O,EAAS5J,K,EAAO8J,S,EAAWC,a,EAAeF,U,EAAYrG,C,EAAGF,C,EAAGhD,U,EAAY;AAC5F,gBAAIN,KAAK,IAAI,CAAb,EAAgB;AACZ;AACA4J,cAAAA,OAAO,CAACjF,MAAR,CAAemF,SAAf,EAA0BxG,CAA1B;AACH,aAHD,MAGO;AACH;AACA,kBAAIuG,UAAU,GAAG,CAAb,IAAkBE,aAAa,IAAI,CAAvC,EAA0C;AACtCH,gBAAAA,OAAO,CAACjF,MAAR,CAAenB,CAAf,EAAkBF,CAAlB;AACH;;AAED,kBAAItD,KAAK,IAAIM,UAAb,EAAyB;AACrBsJ,gBAAAA,OAAO,CAACjF,MAAR,CAAenB,CAAf,EAAkBF,CAAC,GAAG,KAAKvK,MAAL,CAAYsB,UAAZ,CAAuBC,eAA7C;AACH,eAFD,MAEO;AACHsP,gBAAAA,OAAO,CAACjF,MAAR,CAAenB,CAAf,EAAkBF,CAAC,GAAGtD,KAAK,GAAG,KAAKjH,MAAL,CAAYsB,UAAZ,CAAuBC,eAA/B,GAAiDgG,UAAvE;AACH;AACJ;AACJ;;;gDAEqB;AAClB,gBAAI,KAAKzH,KAAL,CAAWiC,IAAX,CAAgBa,SAApB,EAA+B;AAC3B,mBAAKwO,gBAAL,CAAsB,KAAKC,+BAAL,EAAtB;AACH,aAFD,MAEO;AACH,mBAAKD,gBAAL,CAAsB,KAAKjD,uBAAL,EAAtB;AACH;AACJ;;;2CAEgBpH,Q,EAAU;AACvB,iBAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK9H,UAAL,CAAgBuE,IAAhB,CAAqBkC,MAAzC,EAAiD,EAAEqB,CAAnD,EAAsD;AAClD,kBAAI2J,kBAAkB,GAAG,KAAKzR,UAAL,CAAgBuE,IAAhB,CAAqBuD,CAArB,CAAzB;;AAEA,kBAAIZ,QAAQ,CAACA,QAAT,IAAqBuK,kBAAkB,CAACvK,QAA5C,EAAsD;AAClDuK,gBAAAA,kBAAkB,CAACC,UAAnB,GAAgC,IAAhC;AACA,qBAAKvN,mBAAL,CAAyBwN,SAAzB,GAAqC,KAAK3R,UAAL,CAAgB+P,cAAhB,GAAiCjI,CAAtE;AACH,eAHD,MAGO;AACH2J,gBAAAA,kBAAkB,CAACC,UAAnB,GAAgC,KAAhC;AACH;AACJ;AACJ;;;4DAEiC;AAC9B,iBAAK,IAAI5J,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/H,aAAL,CAAmBkJ,SAAnB,CAA6BxC,MAAjD,EAAyD,EAAEqB,CAA3D,EAA8D;AAC1D,kBAAIoB,KAAK,GAAG,KAAKnJ,aAAL,CAAmBkJ,SAAnB,CAA6BnB,CAA7B,CAAZ;AACA,kBAAIoI,aAAa,GAAGhH,KAAK,CAACG,YAAN,CAAmB,CAAnB,CAApB;;AAEA,kBAAI6G,aAAa,CAACxF,CAAd,IAAmB,KAAK1K,UAAL,CAAgB2M,aAAhB,CAA8BjC,CAAjD,IAAsD,KAAK1K,UAAL,CAAgB2M,aAAhB,CAA8BjC,CAA9B,IACtDwF,aAAa,CAACxF,CAAd,GAAkB,KAAKvK,MAAL,CAAYQ,QAAZ,CAAqBE,kBAD3C,EAC+D;AAC3D,uBAAOqP,aAAP;AACH;AACJ;AACJ;;;qCAEUxM,K,EAAO;AACd,iBAAK1D,UAAL,CAAgBuE,IAAhB,CAAqB0C,OAArB,CAA6B,UAACmJ,aAAD,EAAmB;AAC5CA,cAAAA,aAAa,CAACsB,UAAd,GAA2B,KAA3B;AACH,aAFD;AAIA,gBAAIxK,QAAQ,GAAG,KAAKlH,UAAL,CAAgBuE,IAAhB,CAAqBb,KAArB,CAAf;AACAwD,YAAAA,QAAQ,CAACwK,UAAT,GAAsB,IAAtB;AACA,iBAAKE,cAAL,CAAoB1K,QAApB;AACH;;;yCAEcA,Q,EAAU;AAAA;;AACrB,iBAAKzH,WAAL,CAAiBoS,SAAjB,CAA2B5K,OAA3B,CAAmC,UAAC6K,CAAD,EAAO;AACtC,kBAAIA,CAAC,CAACC,IAAF,IAAU,MAAd,EAAsB;AAClB,gBAAA,OAAI,CAACtS,WAAL,CAAiBuS,kBAAjB,CAAoCF,CAApC,EAAuC;AACnCG,kBAAAA,IAAI,EAAE/K,QAAQ,CAACA,QADoB;AAEnCE,kBAAAA,KAAK,EAAEF,QAAQ,CAACA;AAFmB,iBAAvC;;AAKA,gBAAA,OAAI,CAAC1C,kBAAL,GAA0B,IAA1B;;AACA,gBAAA,OAAI,CAAC/E,WAAL,CAAiByS,eAAjB,CAAiCJ,CAAjC,EAAoC,IAApC;AACH;AACJ,aAVD;AAWH;;;;QA1mC4B3S,gB;;AA6mCjCE,MAAAA,WAAW,CAAC8S,WAAZ,GAA0B,aAA1B","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n        this.overviewModel = {};\n        this.focusModel = {};\n        this.scope.focusModel = this.focusModel;\n        this.initialiseConfig();\n    }\n\n    initialiseConfig() {\n        this.config = {\n            // color schemes for metrics\n            colors: [\n                [\"f2d9e6\", \"d98cb3\", \"bf4080\", \"73264d\"], // red\n                [\"ccddff\", \"6699ff\", \"0055ff\", \"003399\"], // blue\n                [\"eeeedd\", \"cccc99\", \"aaaa55\", \"666633\"], // green\n            ],\n\n            // determines which the order of attributes to use for sorting\n            sortOrder: [0, 1, 2],\n\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            marginBetweenOverviewAndFocus: 50,\n        }\n\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            pointWidth: 1,\n            groupedPointHeight: 5,\n            ungroupedPointHeight: 1,\n            verticalMarginalBetweenMetrics: 2,\n            horizontalMarginBetweenMetrics: 30,\n            marginBetweenInstances: 6,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            groupBarWidth: 9,\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            size: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            pointWidth: 20,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxWidth: 10000,\n            maxHeight: 10000\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIFunctions();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.scope.ctrl.enumList = {\n            overviewMode: {\n                SEPARATED: \"1\",\n                INTEGRATED: \"2\"\n            },\n\n            linkingMode: {\n                X_CROSS: \"1\",\n                NORMAL_CROSS: \"2\",\n                CHANGE_COLOR: \"3\",\n            },\n\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            }\n        };\n\n        this.scope.ctrl.overviewMode = this.scope.ctrl.enumList.overviewMode.SEPARATED;\n        this.scope.ctrl.linkingMode = this.scope.ctrl.enumList.linkingMode.X_CROSS;\n        this.scope.ctrl.groupingMode = this.scope.ctrl.enumList.groupingMode.SINGLE;\n        this.scope.ctrl.attributeForGrouping = \"0\";\n        this.scope.ctrl.isGrouped = true;\n    }\n\n    initialiseUIFunctions() {\n        var parent = this;\n\n        this.scope.selectOverviewMode = function () {\n            parent.selectOverviewMode();\n        }\n\n        this.scope.selectLinker = function () {\n            parent.selectLinker();\n        }\n\n        this.scope.selectGroupingMode = function () {\n            parent.selectGroupingMode();\n        }\n\n        this.scope.selectAttributeForGrouping = function () {\n            parent.selectAttributeForGrouping();\n        }\n\n        this.scope.groupUngroup = function () {\n            parent.groupUngroup();\n        }\n\n        this.scope.moveFocusArea = function (evt) {\n            parent.moveFocusArea.bind(parent, evt)();\n        }\n\n        this.scope.fixFocusArea = function (evt) {\n            parent.fixFocusArea.bind(parent, evt)();\n        }\n\n        this.scope.selectNode = function (index) {\n            parent.selectNode.bind(parent, index)();\n        }\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.overviewCanvas.getContext(\"2d\");\n\n        // focus area\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.focusAreaCanvas.getContext(\"2d\");\n\n        // focus graph\n        this.scope.ctrl.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.scope.ctrl.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n        this.focusGraphTable = this.getElementByID(\"focusGraphTable\");\n    }\n\n    getElementByID(id) {\n        return this.elem.find(\"#\" + id)[0];\n    }\n\n    onDataReceived(data) {\n        if (this.isUpdatingVariable) {\n            this.isUpdatingVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            if (this.scope.ctrl.isLoading) {\n                this.load();\n            } else {\n                this.scope.ctrl.isLoading = true;\n                this.scope.$apply();\n                this.overviewModel.metricList = [null, null, null];\n                this.loadCount = 0;\n                this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n                this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n                this.getDataFromAPI(\"node_load1{job='node'}\", 0);\n\n                this.getDataFromAPI(`\n                        100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) \n                                * 100 / \n                                (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\n                    `, 1);\n\n                this.getDataFromAPI(`\n                    100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)',\n                                                                            mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) \n                                * 100 / \n                            (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\n                `, 2);\n\n                this.processRawData();\n            }\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(metric, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(metric) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.scope.ctrl.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colors = this.config.colors[index];\n            metric.layerRange = metric.max / colors.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colors);\n        });\n    }\n\n    getColorMap(metric, colors) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colors.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2\n            colorMap.set(threshold, colors[i]);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.config.colors.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < this.config.sortOrder.length; ++i) {\n                var metricIndex = this.config.sortOrder[i];\n\n                if (first.metricList[metricIndex].total != second.metricList[metricIndex].total) {\n                    return first.metricList[metricIndex].total - second.metricList[metricIndex].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.overviewModel.groupList = [];\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(this.overviewModel.groupList, (search) => {\n                return this.checkInstanceInGroup(instance, search);\n            });\n\n            if (!group) {\n                group = this.initialiseNewGroup(instance);\n                this.overviewModel.groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceInGroup(instance, group) {\n        if (this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n            var index = parseInt(this.scope.ctrl.attributeForGrouping);\n            return instance.metricList[index].total == group.metricList[index].total;\n        } else {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                if (instance.metricList[i].total != group.metricList[i].total) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n\n    initialiseNewGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocus();\n            this.drawOverviewData();\n        }\n    }\n\n    clearFocus() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverviewData() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            var length = this.getInstanceHorizontalLength();\n\n            if (this.scope.ctrl.overviewMode == this.scope.ctrl.enumList.overviewMode.SEPARATED) {\n                this.scope.ctrl.overviewWidth = length * this.config.overview.pointWidth;\n\n                if (this.scope.ctrl.isGrouped) {\n                    this.scope.ctrl.overviewHeight = this.overviewModel.groupList.length * this.config.overview.groupedPointHeight;\n                    this.scope.ctrl.overviewCanvasWidth = this.scope.ctrl.overviewWidth + this.getMaxGroupSize() +\n                        this.config.overview.horizontalMarginBetweenMetrics;\n                } else {\n                    this.scope.ctrl.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n                    this.scope.ctrl.overviewCanvasWidth = this.scope.ctrl.overviewWidth;\n                }\n\n                this.scope.$apply();\n                this.drawSeparated();\n            } else {\n                this.overviewModel.overviewInstanceHeight =\n                    this.config.overview.ungroupedPointHeight * this.overviewModel.metricList.length +\n                    this.config.overview.verticalMarginalBetweenMetrics * (this.overviewModel.metricList.length - 1) +\n                    this.config.overview.marginBetweenInstances;\n                this.scope.ctrl.overviewWidth = length * this.config.overview.pointWidth;\n                this.scope.ctrl.overviewCanvasWidth = this.scope.ctrl.overviewWidth;\n                this.scope.ctrl.overviewHeight = this.overviewModel.data.length * this.overviewModel.overviewInstanceHeight;\n                this.scope.$apply();\n                this.drawIntengrated();\n            };\n\n            this.scope.ctrl.focusGraphMarginTop = this.scope.ctrl.overviewHeight + this.config.marginBetweenOverviewAndFocus;\n        });\n    }\n\n    getInstanceHorizontalLength() {\n        var length = this.getMaxMetricLength();\n\n        if (this.scope.ctrl.overviewMode == this.scope.ctrl.enumList.overviewMode.SEPARATED) {\n            return length * this.overviewModel.metricList.length +\n                (this.overviewModel.metricList.length - 1) * this.config.overview.horizontalMarginBetweenMetrics;\n        } else {\n            return length;\n        }\n    }\n\n    getMaxGroupSize() {\n        var result = 0;\n\n        this.overviewModel.groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((point) => {\n                if (point.values.length > length) {\n                    length = point.values.length;\n                }\n            });\n        });\n\n        return length;\n    }\n\n    drawIntengrated() {\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            instance.y = instanceIndex * this.overviewModel.overviewInstanceHeight;\n\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.data.forEach((point, pointIndex) => {\n                    point.x = pointIndex * this.config.overview.pointWidth;\n                    point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                    this.overviewContext.fillStyle = point.color;\n                    var y = instance.y + metricIndex * this.config.overview.ungroupedPointHeight * this.config.overview.verticalMarginalBetweenMetrics;\n                    this.overviewContext.fillRect(point.x, y, this.config.overview.ungroupedPointHeight, this.config.overview.ungroupedPointHeight);\n                });\n            });\n        });\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = color;\n            }\n        });\n\n        return \"#\" + result;\n    }\n\n    drawSeparated() {\n        this.overviewModel.metricWidth = this.getMaxMetricLength() * this.config.overview.pointWidth;\n\n        if (this.scope.ctrl.isGrouped) {\n            this.drawGrouped();\n        } else {\n            this.drawUngrouped();\n        }\n    }\n\n    drawGrouped() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var instance = group.instanceList[0];\n            this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight);\n        });\n\n        this.drawGroupSize();\n    }\n\n    drawOverviewInstance(instance, index, pointHeigh) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            instance.y = index * pointHeigh;\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n            overviewMetric.startX = this.overviewModel.metricWidth * metricIndex;\n\n            if (metricIndex > 0) {\n                overviewMetric.startX += this.config.overview.horizontalMarginBetweenMetrics * metricIndex;\n            }\n\n            metric.data.forEach((point, pointIndex) => {\n                point.x = overviewMetric.startX + pointIndex * this.config.overview.pointWidth;\n                point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                this.overviewContext.fillStyle = point.color;\n                this.overviewContext.fillRect(point.x, instance.y, this.config.overview.pointWidth, pointHeigh);\n            });\n\n            overviewMetric.endX = overviewMetric.startX + this.overviewModel.metricWidth;\n        });\n    }\n\n    drawGroupSize() {\n        var beginX = this.scope.ctrl.overviewWidth + this.config.overview.horizontalMarginBetweenMetrics;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var endX = beginX + group.instanceList.length;\n            var beginY = groupIndex * this.config.overview.groupedPointHeight;\n            var endY = beginY + this.config.overview.groupedPointHeight;\n            this.overviewContext.beginPath();\n            this.overviewContext.moveTo(beginX, beginY);\n            this.overviewContext.lineTo(endX, beginY);\n            this.overviewContext.lineTo(endX, endY);\n            this.overviewContext.lineTo(beginX, endY);\n            this.overviewContext.closePath();\n            this.overviewContext.fillStyle = \"gray\";\n            this.overviewContext.fill();\n        });\n    }\n\n    drawUngrouped() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight);\n        });\n\n        this.drawGroupBars();\n    }\n\n    drawGroupBars() {\n        var colorStep = (this.config.overview.startingGreyColor - this.config.overview.endingGrayColor) / this.overviewModel.groupList.length;\n\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.horizontalMarginBetweenMetrics / 2;\n            this.drawGroupBarAtPosition(x, colorStep);\n        }\n    }\n\n    drawGroupBarAtPosition(x, colorStep) {\n        var y = 0;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var greyValue = Math.round(this.config.overview.startingGreyColor - colorStep * groupIndex);\n            var fillStyle = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            this.overviewContext.fillStyle = fillStyle;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x - Math.floor(this.config.overview.groupBarWidth / 2), y,\n                this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    selectOverviewMode() {\n        this.drawOverviewData();\n    }\n\n    selectLinker() {\n        this.drawFocusArea();\n    }\n\n    selectGroupingMode() {\n        this.initialiseOverviewGroups();\n        this.drawOverviewData();\n    }\n\n    selectAttributeForGrouping() {\n        this.initialiseOverviewGroups();\n        this.drawOverviewData();\n    }\n\n    groupUngroup() {\n        this.scope.ctrl.isGrouped = !this.scope.ctrl.isGrouped;\n        this.drawOverviewData();\n    }\n\n    moveFocusArea(evt) {\n        if (!this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n            evt.preventDefault();\n        }\n    }\n\n    fixFocusArea(evt) {\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        evt.preventDefault();\n    }\n\n    drawFocus(evt) {\n        this.focusModel.mousePosition = this.getMousePos(evt, this.overviewCanvas);\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            // only update focus graph if mouse is pointing on one of metric overview graphs\n            if (metric.startX <= this.focusModel.mousePosition.x && this.focusModel.mousePosition.x <= metric.endX) {\n                this.drawFocusGraph();\n                this.autoSrollFocusGraph();\n                break;\n            }\n        }\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    drawFocusArea() {\n        if (this.focusModel.mousePosition) {\n            var size = this.getFocusAreaSize();\n            this.focusModel.focusStartY = Math.min(Math.max(0, this.focusModel.mousePosition.y - size / 2), this.overviewCanvas.height - size);\n\n            if (this.scope.ctrl.overviewMode == this.scope.ctrl.enumList.overviewMode.SEPARATED) {\n                this.drawMultipleFocusArea(true);\n            } else {\n                this.drawSingleFocusArea();\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return this.config.focusArea.size * 2;\n    }\n\n    drawSingleFocusArea() {\n        this.clearFocus();\n        var size = this.getFocusAreaSize();\n        this.focusModel.focusStartY = Math.min(Math.max(0, this.focusModel.mousePosition.y - size / 2), this.overviewCanvas.height - this.getFocusAreaSize());\n        this.focusModel.focusStartX = Math.min(Math.max(0, this.focusModel.mousePosition.x - this.config.focusArea.size), this.overviewCanvas.width - size);\n        this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n        this.focusAreaContext.strokeRect(this.focusModel.focusStartX, this.focusModel.focusStartY, size, size);\n    }\n\n    drawMultipleFocusArea(doDrawLinkers) {\n        var size = this.getFocusAreaSize();\n        var offset = this.getFocusAreaOffset();\n\n        if (offset >= 0) {\n            if (doDrawLinkers) {\n                this.clearFocus();\n            }\n\n            this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.focusStartX = metric.startX + offset;\n                this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n            });\n\n            if (doDrawLinkers) {\n                this.drawLinkers();\n            }\n        }\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (this.checkMouseIsInMetric(metric)) {\n                this.focusModel.mousePositionXOffset = this.focusModel.mousePosition.x - metric.startX;\n                this.focusModel.sourceMetricIndex = i;\n\n                return Math.min(Math.max(metric.startX,\n                    this.focusModel.mousePosition.x - this.config.focusArea.size),\n                    metric.endX - this.getFocusAreaSize()) - metric.startX;\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return metric.startX <= this.focusModel.mousePosition.x && this.focusModel.mousePosition.x <= metric.endX;\n    }\n\n    drawLinkers() {\n        var pixelData = this.overviewContext.getImageData(this.focusModel.mousePosition.x, this.focusModel.mousePosition.y, 1, 1).data;\n        this.focusAreaContext.strokeStyle = \"rgb(\" + pixelData[0] + \",\" + pixelData[1] + \",\" + pixelData[2] + \")\";\n        var instance = this.getLinkerTargetInstance();\n        instance = null; // temp flag to prevent drawing linkers\n\n        if (instance) {\n            this.overviewModel.metricList.forEach((metric, index) => {\n                if (!this.checkMouseIsInMetric(metric)) {\n                    this.drawLinkersByMode(metric, instance, index);\n                }\n            });\n        }\n    }\n\n    getLinkerTargetInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (instance.y - this.config.overview.ungroupedPointHeight <= this.focusModel.mousePosition.y &&\n                this.focusModel.mousePosition.y <= instance.y) {\n                return instance;\n            }\n        }\n    }\n\n    drawLinkersByMode(metric, instance, index) {\n        switch (this.scope.ctrl.linkingMode) {\n            case this.scope.ctrl.enumList.linkingMode.X_CROSS:\n                this.drawXCross(metric, instance);\n                break;\n\n            case this.scope.ctrl.enumList.linkingMode.NORMAL_CROSS:\n                this.drawNormalCross(metric, instance);\n                break;\n\n            case this.scope.ctrl.enumList.linkingMode.CHANGE_COLOR:\n                this.changeInstanceColor(metric, instance, index);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    drawXCross(metric, instance) {\n        var centerX = metric.startX + this.focusModel.mousePositionXOffset;\n        var leftBeginX = centerX - this.config.focusArea.xCrossSize;\n        var rightBeginX = centerX + this.config.overview.pointWidth;\n        var bottomInstance = instance.y + this.config.overview.ungroupedPointHeight;\n\n        this.drawXCrossLine(leftBeginX, instance.y - this.config.focusArea.xCrossSize, instance.y);\n        this.drawXCrossLine(rightBeginX, instance.y, instance.y - this.config.focusArea.xCrossSize);\n        this.drawXCrossLine(leftBeginX, bottomInstance + this.config.focusArea.xCrossSize, bottomInstance);\n        this.drawXCrossLine(rightBeginX, bottomInstance, bottomInstance + this.config.focusArea.xCrossSize);\n    }\n\n    drawXCrossLine(startX, startY, endY) {\n        this.drawLineOnFocusAreaCanvas(startX, startY, startX + this.config.focusArea.xCrossSize, endY);\n    }\n\n    drawLineOnFocusAreaCanvas(startX, startY, endX, endY) {\n        this.focusAreaContext.beginPath();\n        this.focusAreaContext.moveTo(startX, startY);\n        this.focusAreaContext.lineTo(endX, endY);\n        this.focusAreaContext.stroke();\n        this.focusAreaContext.closePath();\n    }\n\n    drawNormalCross(metric, instance) {\n        var focusSize = this.getFocusAreaSize();\n        var centertX = metric.startX + this.focusModel.mousePositionXOffset;\n        var endX = metric.focusStartX + focusSize;\n        var distanceBetweenLines = this.config.overview.pointWidth * 2;\n        var leftLineX = centertX - distanceBetweenLines;\n        var rightLineX = centertX + distanceBetweenLines;\n        var topLineY = instance.y - distanceBetweenLines;\n        var bottomLineY = instance.y + distanceBetweenLines;\n        var endY = this.focusModel.focusStartY + focusSize;\n\n        this.drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY);\n    }\n\n    drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY) {\n        // top horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, topLineY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, topLineY, endX, topLineY);\n\n        // botton horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, bottomLineY, leftLineX, bottomLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, endX, bottomLineY);\n\n        // left vertical\n        this.drawLineOnFocusAreaCanvas(leftLineX, this.focusModel.focusStartY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(leftLineX, bottomLineY, leftLineX, endY);\n\n        // right vertical\n        this.drawLineOnFocusAreaCanvas(rightLineX, this.focusModel.focusStartY, rightLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, rightLineX, endY);\n    }\n\n    changeInstanceColor(metric, instance, index) {\n        if (index == 0) {\n            this.clearFocus();\n        }\n\n        instance.metricList[index].data.forEach((instancePoint, pointIndex) => {\n            var colorMap = this.getColorMap(metric, this.config.colors[this.focusModel.sourceMetricIndex]);\n            this.focusAreaContext.fillStyle = this.getColorFromMap(instancePoint.value, colorMap);\n            this.focusAreaContext.fillRect(instancePoint.x, instance.y, this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n\n            if (instancePoint.x == metric.startX + this.focusModel.mousePositionXOffset) {\n                // vertical line\n                metric.data.forEach((metricInstance, metricInstanceIndex) => {\n                    var metricPoint = metricInstance.values[pointIndex];\n                    var value = metricPoint ? metricPoint[1] : 0\n                    this.focusAreaContext.fillStyle = this.getColorFromMap(value, colorMap);\n                    this.focusAreaContext.fillRect(instancePoint.x, this.overviewModel.data[metricInstanceIndex].y,\n                        this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n                });\n            }\n        });\n\n        if (index == instance.metricList.length - 1) {\n            this.drawMultipleFocusArea(false);\n        }\n    }\n\n    drawFocusGraph() {\n        this.initialiseFocusGraphData();\n\n        if (this.focusModel.data.length > 0) {\n            this.$timeout(() => {\n                this.scope.ctrl.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.scope.ctrl.focusGraphWidth = this.focusModel.data[0].metricList[0].data.length * this.config.focusGraph.pointWidth;\n                this.scope.$apply();\n                this.focusModel.focusRowHeight = this.getElementByID(\"focusGraphRow-0\").offsetHeight;\n                this.drawFocusGraphData();\n            });\n        }\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        if (this.scope.ctrl.isGrouped) {\n            this.overviewModel.groupList.forEach((group, groupIndex) => {\n                var firstInstance = group.instanceList[0];\n\n                if (this.checkInstanceInFocus(firstInstance)) {\n                    var focusInstance = this.initialiseFocusInstance(firstInstance, this.getIndexesOfPointsInFocus(firstInstance));\n                    focusInstance.groupIndex = groupIndex + 1;\n                }\n            });\n        } else {\n            this.overviewModel.data.forEach((instance) => {\n                if (this.checkInstanceInFocus(instance)) {\n                    this.initialiseFocusInstance(instance, this.getIndexesOfPointsInFocus(instance));\n                }\n            });\n        }\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(instance) {\n        var indexes = [];\n\n        for (var i = 0; i < instance.metricList.length; ++i) {\n            var metric = instance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (overviewMetric.focusStartX <= point.x && point.x <= overviewMetric.focusStartX + this.getFocusAreaSize()) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    initialiseFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n        this.focusModel.data.push(focusInstance);\n        return focusInstance;\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.config.colors[metricIndex].forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    drawFocusGraphData() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n            var context = canvas.getContext(\"2d\");\n            context.clearRect(0, 0, canvas.width, canvas.height);\n\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.layerList.forEach((layer, layerIndex) => {\n                    var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                        this.config.focusGraph.metricMaxHeight;\n                    context.beginPath();\n                    context.moveTo(0, y);\n                    var x = 0;\n                    var previousX = 0;\n                    var previousValue = 0;\n\n                    layer.valueList.forEach((value, valueIndex) => {\n                        x = this.config.focusGraph.pointWidth * valueIndex;\n                        this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                            this.overviewModel.metricList[metricIndex].layerRange);\n                        previousX = x;\n                        previousValue = value;\n                    });\n\n                    context.lineTo(x, y);\n                    context.lineTo(this.focusModel.graphBeginX, y);\n                    context.closePath();\n                    context.fillStyle = \"#\" + this.config.colors[metricIndex][layerIndex];\n                    context.fill();\n                });\n            });\n        });\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.scope.ctrl.isGrouped) {\n            this.scrollByInstance(this.getFirstInstanceOfSelectedGroup());\n        } else {\n            this.scrollByInstance(this.getLinkerTargetInstance());\n        }\n    }\n\n    scrollByInstance(instance) {\n        for (var i = 0; i < this.focusModel.data.length; ++i) {\n            var focusModelInstance = this.focusModel.data[i];\n\n            if (instance.instance == focusModelInstance.instance) {\n                focusModelInstance.isSelected = true;\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n            } else {\n                focusModelInstance.isSelected = false;\n            }\n        }\n    }\n\n    getFirstInstanceOfSelectedGroup() {\n        for (var i = 0; i < this.overviewModel.groupList.length; ++i) {\n            var group = this.overviewModel.groupList[i];\n            var firstInstance = group.instanceList[0];\n\n            if (firstInstance.y <= this.focusModel.mousePosition.y && this.focusModel.mousePosition.y <=\n                firstInstance.y + this.config.overview.groupedPointHeight) {\n                return firstInstance;\n            }\n        }\n    }\n\n    selectNode(index) {\n        this.focusModel.data.forEach((focusInstance) => {\n            focusInstance.isSelected = false;\n        });\n\n        var instance = this.focusModel.data[index];\n        instance.isSelected = true;\n        this.updateVariable(instance);\n    }\n\n    updateVariable(instance) {\n        this.variableSrv.variables.forEach((v) => {\n            if (v.name == \"node\") {\n                this.variableSrv.setOptionAsCurrent(v, {\n                    text: instance.instance,\n                    value: instance.instance\n                });\n\n                this.isUpdatingVariable = true;\n                this.variableSrv.variableUpdated(v, true);\n            }\n        });\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}