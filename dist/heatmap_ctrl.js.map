{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","_","HeatmapCtrl","$scope","$injector","$timeout","variableSrv","timeSrv","events","on","onDataReceived","bind","overviewModel","focusModel","initialiseConfig","config","colors","sortOrder","apiAddress","marginBetweenOverviewAndFocus","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseFocusGraphConfig","overview","pointWidth","groupedPointHeight","ungroupedPointHeight","verticalMarginalBetweenMetrics","horizontalMarginBetweenMetrics","marginBetweenInstances","startingGreyColor","groupBarWidth","focusArea","color","size","xCrossSize","focusGraph","leftMargin","fontSize","metricMaxHeight","marginBetweenMetrics","scope","elem","attrs","ctrl","initialiseControl","initialiseUIFunctions","initialiseCanvases","enums","overviewMode","SEPARATED","INTEGRATED","linkingMode","X_CROSS","NORMAL_CROSS","CHANGE_COLOR","isGrouped","parent","selectOverviewMode","selectLinker","groupUngroup","moveFocusArea","evt","fixFocusArea","selectNode","overviewCanvas","find","overviewContext","getContext","focusAreaCanvas","focusAreaContext","focusGraphCanvas","focusGraphContext","font","data","isUpdatingVariable","load","isLoading","$apply","metricList","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","Math","round","getTime","metric","index","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","url","encodeURIComponent","open","send","length","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","renderOverview","forEach","instance","values","value","parseFloat","min","max","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","i","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","push","total","getThresholdAverage","map","sort","first","second","groupList","group","checkInstanceInGroup","initialiseNewGroup","instanceList","instanceMetric","groupMetric","clearFocus","drawOverviewData","drawOverviewDataWrapper","clearRect","width","height","getInstanceHorizontalLength","overviewWidth","overviewHeight","drawSeparated","overviewInstanceHeight","drawIntengrated","focusGraphMarginTop","getMaxMetricLength","instanceIndex","y","pointIndex","x","getColorFromMap","fillStyle","fillRect","metricWidth","drawGrouped","drawUngrouped","groupIndex","drawOverviewInstance","pointHeigh","overviewMetric","startX","endX","drawGroupBars","colorStep","drawGroupBarAtPosition","greyValue","floor","drawFocusArea","focusAreaIsFixed","drawFocus","preventDefault","mousePosition","getMousePos","drawFocusGraph","hasFocus","canvas","rect","getBoundingClientRect","clientX","left","clientY","top","getFocusAreaSize","focusStartY","drawMultipleFocusArea","drawSingleFocusArea","focusStartX","strokeStyle","strokeRect","doDrawLinkers","offset","getFocusAreaOffset","drawLinkers","checkMouseIsInMetric","mousePositionXOffset","sourceMetricIndex","pixelData","getImageData","getLinkerTargetInstance","drawLinkersByMode","drawXCross","drawNormalCross","changeInstanceColor","centerX","leftBeginX","rightBeginX","bottomInstance","drawXCrossLine","startY","endY","drawLineOnFocusAreaCanvas","beginPath","moveTo","lineTo","stroke","closePath","focusSize","centertX","distanceBetweenLines","leftLineX","rightLineX","topLineY","bottomLineY","drawNormalCrossLines","instancePoint","metricInstanceIndex","metricPoint","initialiseFocusGraphData","drawFocusGraphLabels","drawFocusGraphData","firstInstance","checkInstanceInFocus","initialiseFocusInstance","getIndexesOfPointsInFocus","indexes","overviewInstance","indexList","focusInstance","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","horizontalX","setLineDash","instanceHeight","drawFocusGraphLabelByInstance","label","metrics","measureText","labelY","fillText","drawSeperator","lineY","layerIndex","previousX","previousValue","valueIndex","moveContextBasedOnValue","fill","mousePos","event","updateVariable","variables","v","name","setOptionAsCurrent","text","variableUpdated","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n        this.overviewModel = {};\n        this.focusModel = {};\n        this.initialiseConfig();\n    }\n\n    initialiseConfig() {\n        this.config = {\n            // color schemes for metrics\n            colors: [\n                [\"f2d9e6\", \"d98cb3\", \"bf4080\", \"73264d\"], // red\n                [\"ccddff\", \"6699ff\", \"0055ff\", \"003399\"], // blue\n                [\"eeeedd\", \"cccc99\", \"aaaa55\", \"666633\"], // green\n            ],\n\n            // determines which the order of attributes to use for sorting\n            sortOrder: [0, 1, 2],\n\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            marginBetweenOverviewAndFocus: 50,\n        }\n\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            pointWidth: 1,\n            groupedPointHeight: 5,\n            ungroupedPointHeight: 1,\n            verticalMarginalBetweenMetrics: 2,\n            horizontalMarginBetweenMetrics: 30,\n            marginBetweenInstances: 6,\n            startingGreyColor: 240,\n            groupBarWidth: 9,\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            size: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            leftMargin: 40,\n            fontSize: 15,\n            pointWidth: 5,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            marginBetweenInstances: 20\n        }\n    }\n\n    link(scope, elem, attrs, ctrl) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIFunctions();\n        this.initialiseCanvases();\n    }\n\n    initialiseControl() {\n        this.scope.ctrl.enums = {\n            overviewMode: {\n                SEPARATED: \"1\",\n                INTEGRATED: \"2\"\n            },\n\n            linkingMode: {\n                X_CROSS: \"1\",\n                NORMAL_CROSS: \"2\",\n                CHANGE_COLOR: \"3\",\n            }\n        };\n\n        this.scope.ctrl.overviewMode = this.scope.ctrl.enums.overviewMode.SEPARATED;\n        this.scope.ctrl.linkingMode = this.scope.ctrl.enums.linkingMode.X_CROSS;\n        this.scope.ctrl.isGrouped = true;\n    }\n\n    initialiseUIFunctions() {\n        var parent = this;\n\n        this.scope.selectOverviewMode = function () {\n            parent.selectOverviewMode();\n        }\n\n        this.scope.selectLinker = function () {\n            parent.selectLinker();\n        }\n\n        this.scope.groupUngroup = function () {\n            parent.groupUngroup();\n        }\n\n        this.scope.moveFocusArea = function (evt) {\n            parent.moveFocusArea.bind(parent, evt)();\n        }\n\n        this.scope.fixFocusArea = function (evt) {\n            parent.fixFocusArea.bind(parent, evt)();\n        }\n\n        this.scope.selectNode = function () {\n            parent.selectNode.bind(parent)();\n        }\n    }\n\n    initialiseCanvases() {\n        this.overviewCanvas = this.elem.find(\"#overviewCanvas\")[0];\n        this.overviewContext = this.overviewCanvas.getContext(\"2d\");\n\n        this.focusAreaCanvas = this.elem.find(\"#focusAreaCanvas\")[0];\n        this.focusAreaContext = this.focusAreaCanvas.getContext(\"2d\");\n\n        this.focusGraphCanvas = this.elem.find(\"#focusGraphCanvas\")[0];\n        this.focusGraphContext = this.focusGraphCanvas.getContext(\"2d\");\n        this.focusGraphContext.font = this.config.focusGraph.fontSize + \"px arial\";\n    }\n\n    onDataReceived(data) {\n        if (this.isUpdatingVariable) {\n            this.isUpdatingVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            if (this.scope.ctrl.isLoading) {\n                this.load();\n            } else {\n                this.scope.ctrl.isLoading = true;\n                this.scope.$apply();\n                this.overviewModel.metricList = [null, null, null];\n                this.loadCount = 0;\n                this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n                this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n                this.getDataFromAPI(\"node_load1{job='node'}\", 0);\n\n                this.getDataFromAPI(`\n                        100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) \n                                * 100 / \n                                (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\n                    `, 1);\n\n                this.getDataFromAPI(`\n                    100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)',\n                                                                            mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) \n                                * 100 / \n                            (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\n                `, 2);\n\n                this.processRawData();\n            }\n        }, 100);\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(metric, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(metric) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.scope.ctrl.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colors = this.config.colors[index];\n            metric.layerRange = metric.max / colors.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colors);\n        });\n    }\n\n    getColorMap(metric, colors) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colors.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2\n            colorMap.set(threshold, colors[i]);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.config.colors.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < this.config.sortOrder.length; ++i) {\n                var metricIndex = this.config.sortOrder[i];\n\n                if (first.metricList[metricIndex].total != second.metricList[metricIndex].total) {\n                    return first.metricList[metricIndex].total - second.metricList[metricIndex].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.overviewModel.groupList = [];\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(this.overviewModel.groupList, (search) => {\n                return this.checkInstanceInGroup(instance, search);\n            });\n\n            if (!group) {\n                group = this.initialiseNewGroup(instance);\n                this.overviewModel.groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceInGroup(instance, group) {\n        for (var i = 0; i < instance.metricList.length; ++i) {\n            if (instance.metricList[i].total != group.metricList[i].total) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    initialiseNewGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocus();\n            this.drawOverviewData();\n        }\n    }\n\n    drawOverviewData() {\n        var parent = this;\n\n        this.$timeout(() => {\n            parent.drawOverviewDataWrapper.bind(parent)();\n        }, 100);\n    }\n\n    drawOverviewDataWrapper() {\n        this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n        var length = this.getInstanceHorizontalLength();\n\n        if (this.scope.ctrl.overviewMode == this.scope.ctrl.enums.overviewMode.SEPARATED) {\n            this.scope.ctrl.overviewWidth = length * this.config.overview.pointWidth;\n\n            if (this.scope.ctrl.isGrouped) {\n                this.scope.ctrl.overviewHeight = this.overviewModel.groupList.length * this.config.overview.groupedPointHeight;\n            } else {\n                this.scope.ctrl.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n            }\n\n            this.scope.$apply();\n            this.drawSeparated();\n        } else {\n            this.overviewModel.overviewInstanceHeight =\n                this.config.overview.ungroupedPointHeight * this.overviewModel.metricList.length +\n                this.config.overview.verticalMarginalBetweenMetrics * (this.overviewModel.metricList.length - 1) +\n                this.config.overview.marginBetweenInstances;\n            this.scope.ctrl.overviewWidth = length * this.config.overview.pointWidth;\n            this.scope.ctrl.overviewHeight = this.overviewModel.data.length * this.overviewModel.overviewInstanceHeight;\n            this.scope.$apply();\n            this.drawIntengrated();\n        };\n\n        this.scope.ctrl.focusGraphMarginTop = this.scope.ctrl.overviewHeight + this.config.marginBetweenOverviewAndFocus;\n    }\n\n    getInstanceHorizontalLength() {\n        var length = this.getMaxMetricLength();\n\n        if (this.scope.ctrl.overviewMode == this.scope.ctrl.enums.overviewMode.SEPARATED) {\n            return length * this.overviewModel.metricList.length +\n                (this.overviewModel.metricList.length - 1) * this.config.overview.horizontalMarginBetweenMetrics;\n        } else {\n            return length;\n        }\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((point) => {\n                if (point.values.length > length) {\n                    length = point.values.length;\n                }\n            });\n        });\n\n        return length;\n    }\n\n    drawIntengrated() {\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            instance.y = instanceIndex * this.overviewModel.overviewInstanceHeight;\n\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.data.forEach((point, pointIndex) => {\n                    point.x = pointIndex * this.config.overview.pointWidth;\n                    point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                    this.overviewContext.fillStyle = point.color;\n                    var y = instance.y + metricIndex * this.config.overview.ungroupedPointHeight * this.config.overview.verticalMarginalBetweenMetrics;\n                    this.overviewContext.fillRect(point.x, y, this.config.overview.ungroupedPointHeight, this.config.overview.ungroupedPointHeight);\n                });\n            });\n        });\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = color;\n            }\n        });\n\n        return \"#\" + result;\n    }\n\n    drawSeparated() {\n        this.overviewModel.metricWidth = this.getMaxMetricLength() * this.config.overview.pointWidth;\n\n        if (this.scope.ctrl.isGrouped) {\n            this.drawGrouped();\n        } else {\n            this.drawUngrouped();\n        }\n    }\n\n    drawGrouped() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var instance = group.instanceList[0];\n            this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight);\n        });\n    }\n\n    drawOverviewInstance(instance, index, pointHeigh) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            instance.y = index * pointHeigh;\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n            overviewMetric.startX = this.overviewModel.metricWidth * metricIndex;\n\n            if (metricIndex > 0) {\n                overviewMetric.startX += this.config.overview.horizontalMarginBetweenMetrics * metricIndex;\n            }\n\n            metric.data.forEach((point, pointIndex) => {\n                point.x = overviewMetric.startX + pointIndex * this.config.overview.pointWidth;\n                point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                this.overviewContext.fillStyle = point.color;\n                this.overviewContext.fillRect(point.x, instance.y, this.config.overview.pointWidth, pointHeigh);\n            });\n\n            overviewMetric.endX = overviewMetric.startX + this.overviewModel.metricWidth;\n        });\n    }\n\n    drawUngrouped() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight);\n        });\n\n        this.drawGroupBars();\n    }\n\n    drawGroupBars() {\n        var colorStep = this.config.overview.startingGreyColor / this.overviewModel.groupList.length;\n\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.horizontalMarginBetweenMetrics / 2;\n            this.drawGroupBarAtPosition(x, colorStep);\n        }\n    }\n\n    drawGroupBarAtPosition(x, colorStep) {\n        var y = 0;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var greyValue = Math.round(this.config.overview.startingGreyColor - colorStep * groupIndex);\n            var fillStyle = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            this.overviewContext.fillStyle = fillStyle;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x - Math.floor(this.config.overview.groupBarWidth / 2), y,\n                this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    selectOverviewMode() {\n        this.drawOverviewData();\n    }\n\n    selectLinker() {\n        this.drawFocusArea();\n    }\n\n    groupUngroup() {\n        this.scope.ctrl.isGrouped = !this.scope.ctrl.isGrouped;\n        this.drawOverviewData();\n    }\n\n    moveFocusArea(evt) {\n        if (!this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n            evt.preventDefault();\n        }\n    }\n\n    fixFocusArea(evt) {\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        evt.preventDefault();\n    }\n\n    drawFocus(evt) {\n        this.focusModel.mousePosition = this.getMousePos(evt, this.overviewCanvas);\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            // only update focus graph if mouse is pointing on one of metric overview graphs\n            if (metric.startX <= this.focusModel.mousePosition.x && this.focusModel.mousePosition.x <= metric.endX) {\n                this.drawFocusGraph();\n                break;\n            }\n        }\n    }\n\n    clearFocus() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n        this.focusGraphContext.clearRect(0, 0, this.focusGraphCanvas.width, this.focusGraphCanvas.height);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    drawFocusArea() {\n        if (this.focusModel.mousePosition) {\n            var size = this.getFocusAreaSize();\n            this.focusModel.focusStartY = Math.min(Math.max(0, this.focusModel.mousePosition.y - size / 2), this.overviewCanvas.height - size);\n\n            if (this.scope.ctrl.overviewMode == this.scope.ctrl.enums.overviewMode.SEPARATED) {\n                this.drawMultipleFocusArea(true);\n            } else {\n                this.drawSingleFocusArea();\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return this.config.focusArea.size * 2;\n    }\n\n    drawSingleFocusArea() {\n        this.clearFocus();\n        var size = this.getFocusAreaSize();\n        this.focusModel.focusStartY = Math.min(Math.max(0, this.focusModel.mousePosition.y - size / 2), this.overviewCanvas.height - this.getFocusAreaSize());\n        this.focusModel.focusStartX = Math.min(Math.max(0, this.focusModel.mousePosition.x - this.config.focusArea.size), this.overviewCanvas.width - size);\n        this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n        this.focusAreaContext.strokeRect(this.focusModel.focusStartX, this.focusModel.focusStartY, size, size);\n    }\n\n    drawMultipleFocusArea(doDrawLinkers) {\n        var size = this.getFocusAreaSize();\n        var offset = this.getFocusAreaOffset();\n\n        if (offset >= 0) {\n            if (doDrawLinkers) {\n                this.clearFocus();\n            }\n\n            this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.focusStartX = metric.startX + offset;\n                this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n            });\n\n            if (doDrawLinkers) {\n                this.drawLinkers();\n            }\n        }\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (this.checkMouseIsInMetric(metric)) {\n                this.focusModel.mousePositionXOffset = this.focusModel.mousePosition.x - metric.startX;\n                this.focusModel.sourceMetricIndex = i;\n\n                return Math.min(Math.max(metric.startX,\n                    this.focusModel.mousePosition.x - this.config.focusArea.size),\n                    metric.endX - this.getFocusAreaSize()) - metric.startX;\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return metric.startX <= this.focusModel.mousePosition.x && this.focusModel.mousePosition.x <= metric.endX;\n    }\n\n    drawLinkers() {\n        var pixelData = this.overviewContext.getImageData(this.focusModel.mousePosition.x, this.focusModel.mousePosition.y, 1, 1).data;\n        this.focusAreaContext.strokeStyle = \"rgb(\" + pixelData[0] + \",\" + pixelData[1] + \",\" + pixelData[2] + \")\";\n        var instance = this.getLinkerTargetInstance();\n\n        if (instance) {\n            this.overviewModel.metricList.forEach((metric, index) => {\n                if (!this.checkMouseIsInMetric(metric)) {\n                    this.drawLinkersByMode(metric, instance, index);\n                }\n            });\n        }\n    }\n\n    getLinkerTargetInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (instance.y <= this.focusModel.mousePosition.y && this.focusModel.mousePosition.y <= instance.y + this.config.overview.ungroupedPointHeight) {\n                return instance;\n            }\n        }\n    }\n\n    drawLinkersByMode(metric, instance, index) {\n        switch (this.scope.ctrl.linkingMode) {\n            case this.scope.ctrl.enums.linkingMode.X_CROSS:\n                this.drawXCross(metric, instance);\n                break;\n\n            case this.scope.ctrl.enums.linkingMode.NORMAL_CROSS:\n                this.drawNormalCross(metric, instance);\n                break;\n\n            case this.scope.ctrl.enums.linkingMode.CHANGE_COLOR:\n                this.changeInstanceColor(metric, instance, index);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    drawXCross(metric, instance) {\n        var centerX = metric.startX + this.focusModel.mousePositionXOffset;\n        var leftBeginX = centerX - this.config.focusArea.xCrossSize;\n        var rightBeginX = centerX + this.config.overview.pointWidth;\n        var bottomInstance = instance.y + this.config.overview.ungroupedPointHeight;\n\n        this.drawXCrossLine(leftBeginX, instance.y - this.config.focusArea.xCrossSize, instance.y);\n        this.drawXCrossLine(rightBeginX, instance.y, instance.y - this.config.focusArea.xCrossSize);\n        this.drawXCrossLine(leftBeginX, bottomInstance + this.config.focusArea.xCrossSize, bottomInstance);\n        this.drawXCrossLine(rightBeginX, bottomInstance, bottomInstance + this.config.focusArea.xCrossSize);\n    }\n\n    drawXCrossLine(startX, startY, endY) {\n        this.drawLineOnFocusAreaCanvas(startX, startY, startX + this.config.focusArea.xCrossSize, endY);\n    }\n\n    drawLineOnFocusAreaCanvas(startX, startY, endX, endY) {\n        this.focusAreaContext.beginPath();\n        this.focusAreaContext.moveTo(startX, startY);\n        this.focusAreaContext.lineTo(endX, endY);\n        this.focusAreaContext.stroke();\n        this.focusAreaContext.closePath();\n    }\n\n    drawNormalCross(metric, instance) {\n        var focusSize = this.getFocusAreaSize();\n        var centertX = metric.startX + this.focusModel.mousePositionXOffset;\n        var endX = metric.focusStartX + focusSize;\n        var distanceBetweenLines = this.config.overview.pointWidth * 2;\n        var leftLineX = centertX - distanceBetweenLines;\n        var rightLineX = centertX + distanceBetweenLines;\n        var topLineY = instance.y - distanceBetweenLines;\n        var bottomLineY = instance.y + distanceBetweenLines;\n        var endY = this.focusModel.focusStartY + focusSize;\n\n        this.drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY);\n    }\n\n    drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY) {\n        // top horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, topLineY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, topLineY, endX, topLineY);\n\n        // botton horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, bottomLineY, leftLineX, bottomLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, endX, bottomLineY);\n\n        // left vertical\n        this.drawLineOnFocusAreaCanvas(leftLineX, this.focusModel.focusStartY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(leftLineX, bottomLineY, leftLineX, endY);\n\n        // right vertical\n        this.drawLineOnFocusAreaCanvas(rightLineX, this.focusModel.focusStartY, rightLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, rightLineX, endY);\n    }\n\n    changeInstanceColor(metric, instance, index) {\n        if (index == 0) {\n            this.clearFocus();\n        }\n\n        instance.metricList[index].data.forEach((instancePoint, pointIndex) => {\n            var colorMap = this.getColorMap(metric, this.config.colors[this.focusModel.sourceMetricIndex]);\n            this.focusAreaContext.fillStyle = this.getColorFromMap(instancePoint.value, colorMap);\n            this.focusAreaContext.fillRect(instancePoint.x, instance.y, this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n\n            if (instancePoint.x == metric.startX + this.focusModel.mousePositionXOffset) {\n                // vertical line\n                metric.data.forEach((metricInstance, metricInstanceIndex) => {\n                    var metricPoint = metricInstance.values[pointIndex];\n                    var value = metricPoint ? metricPoint[1] : 0\n                    this.focusAreaContext.fillStyle = this.getColorFromMap(value, colorMap);\n                    this.focusAreaContext.fillRect(instancePoint.x, this.overviewModel.data[metricInstanceIndex].y,\n                        this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n                });\n            }\n        });\n\n        if (index == instance.metricList.length - 1) {\n            this.drawMultipleFocusArea(false);\n        }\n    }\n\n    drawFocusGraph() {\n        this.initialiseFocusGraphData();\n        this.drawFocusGraphLabels();\n        this.drawFocusGraphData();\n    }\n\n    initialiseFocusGraphData() {\n        this.focusModel.data = [];\n\n        if (this.scope.ctrl.isGrouped) {\n            this.overviewModel.groupList.forEach((group) => {\n                var firstInstance = group.instanceList[0];\n\n                if (this.checkInstanceInFocus(firstInstance)) {\n                    group.instanceList.forEach((instance) => {\n                        this.initialiseFocusInstance(instance, this.getIndexesOfPointsInFocus(firstInstance));\n                    });\n                }\n            });\n        } else {\n            this.overviewModel.data.forEach((instance) => {\n                if (this.checkInstanceInFocus(instance)) {\n                    this.initialiseFocusInstance(instance, this.getIndexesOfPointsInFocus(instance));\n                }\n            });\n        }\n    }\n\n    getIndexesOfPointsInFocus(instance) {\n        var indexes = [];\n\n        for (var i = 0; i < instance.metricList.length; ++i) {\n            var metric = instance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (overviewMetric.focusStartX <= point.x && point.x <= overviewMetric.focusStartX + this.getFocusAreaSize()) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    initialiseFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n        this.focusModel.data.push(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, index) => {\n            this.config.colors.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[index].layerRange;\n                });\n            });\n        });\n    }\n\n    drawFocusGraphLabels() {\n        this.focusModel.horizontalX = 0;\n        this.focusGraphContext.setLineDash([10, 10]);\n        this.focusGraphContext.fillStyle = \"black\";\n        this.focusModel.instanceHeight = this.config.focusGraph.metricMaxHeight * this.overviewModel.metricList.length +\n            this.config.focusGraph.marginBetweenMetrics * (this.overviewModel.metricList.length - 1) + this.config.focusGraph.marginBetweenInstances;\n\n        this.focusModel.data.forEach((instance, index) => {\n            this.drawFocusGraphLabelByInstance(instance, index);\n        });\n\n        this.focusModel.horizontalX += this.config.focusGraph.leftMargin;\n    }\n\n    drawFocusGraphLabelByInstance(instance, index) {\n        var label = instance.instance;\n        var metrics = this.focusGraphContext.measureText(label);\n        instance.y = index * this.focusModel.instanceHeight;\n        var labelY = instance.y + this.focusModel.instanceHeight / 2;\n        this.focusGraphContext.fillText(label, 0, labelY);\n\n        if (index > 0) {\n            this.drawSeperator(instance);\n        }\n\n        if (metrics.width > this.focusModel.horizontalX) {\n            this.focusModel.horizontalX = metrics.width;\n        }\n    }\n\n    drawSeperator(instance) {\n        var lineY = instance.y - this.config.focusGraph.marginBetweenInstances / 2;\n        this.focusGraphContext.beginPath();\n        this.focusGraphContext.moveTo(0, lineY);\n        this.focusGraphContext.lineTo(10000, lineY);\n        this.focusGraphContext.stroke();\n    }\n\n    drawFocusGraphData() {\n        this.focusModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.layerList.forEach((layer, layerIndex) => {\n                    var y = instance.y +\n                        (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                        this.config.focusGraph.metricMaxHeight;\n                    this.focusGraphContext.beginPath();\n                    this.focusGraphContext.moveTo(this.focusModel.horizontalX, y);\n                    var x = this.focusModel.horizontalX;\n                    var previousX = x;\n                    var previousValue = 0;\n\n                    layer.valueList.forEach((value, valueIndex) => {\n                        x += valueIndex * this.config.focusGraph.pointWidth;\n                        this.moveContextBasedOnValue(value, previousX, previousValue, layerIndex, x, y, this.overviewModel.metricList[metricIndex].layerRange);\n                        previousX = x;\n                        previousValue = value;\n                    });\n\n                    this.focusGraphContext.lineTo(x, y);\n                    this.focusGraphContext.lineTo(this.focusModel.horizontalX, y);\n                    this.focusGraphContext.closePath();\n                    this.focusGraphContext.fillStyle = \"#\" + this.config.colors[metricIndex][layerIndex];\n                    this.focusGraphContext.fill();\n                });\n            });\n        });\n    }\n\n    moveContextBasedOnValue(value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            this.focusGraphContext.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                this.focusGraphContext.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                this.focusGraphContext.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                this.focusGraphContext.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    selectNode() {\n        if (!this.isUpdatingVariable) {\n            var mousePos = this.getMousePos(event, this.focusGraphCanvas);\n            var height = this.focusModel.instanceHeight;\n\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                if (height * i <= mousePos.y && mousePos.y <= height * (i + 1)) {\n                    this.updateVariable(this.focusModel.data[i]);\n                    break;\n                }\n            }\n        }\n    }\n\n    updateVariable(instance) {\n        this.variableSrv.variables.forEach((v) => {\n            if (v.name == \"node\") {\n                this.variableSrv.setOptionAsCurrent(v, {\n                    text: instance.instance,\n                    value: instance.instance\n                });\n\n                this.isUpdatingVariable = true;\n                this.variableSrv.variableUpdated(v, true);\n            }\n        });\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}