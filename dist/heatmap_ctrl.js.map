{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","HeatmapCtrl","$scope","$injector","$timeout","variableSrv","timeSrv","events","on","onDataReceived","bind","overviewModel","focusModel","initialiseConfig","loadData","config","apiAddress","instancePropertyName","dateFormat","focusAreaColor","focusAreaSize","colors","luminanceLevel","fontSize","overviewPointSize","focusPointWidth","focusPointHeight","leftPadding","horizontalPadding","verticalPadding","paddingBetweenGraphs","rawData","maxLoadCount","loadCount","fromDate","Math","round","timeRange","from","_d","getTime","toDate","to","getDataFromAPI","data","totalMemory","freeMemory","cachedMemory","bufferMemory","processRawData","metric","callback","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","url","open","send","scope","elem","attrs","ctrl","parent","toggleFocus","moveFocusArea","evt","fixFocusArea","selectNode","initialiseCanvases","focusMode","clearFocus","focusAreaIsFixed","hasFocus","focusAreaContext","clearRect","focusAreaCanvas","width","height","focusGraphContext","focusGraphCanvas","drawFocus","preventDefault","mousePos","getMousePos","overviewCanvas","drawFocusArea","drawFocusGraph","canvas","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","size","getFocusAreaSize","focusStartX","min","max","focusStartY","strokeStyle","strokeRect","initialiseFocusGraphData","drawVertical","drawFocusGraphData","forEach","instance","index","checkInstanceIsFocused","modalInstance","pointList","push","point","checkPointIsFocused","initialiseInstanceLayers","layers","color","layer","valueList","value","Value","layerRange","overviewY","horizontalX","fillStyle","label","fillText","metrics","measureText","layerIndex","beginPath","moveTo","previousX","previousValue","valueIndex","moveContextBasedOnValue","lineTo","closePath","fill","updateVariable","event","menuX","menuY","instanceHeight","i","length","variables","v","name","setOptionAsCurrent","text","variableUpdated","find","overviewContext","getContext","font","dataList","parseTable","initialiseColorMap","renderOverview","table","console","log","instanceColumnIndex","getInstanceColumnIndex","rowIndex","rows","row","getExistingInstance","columnIndex","columns","instanceName","current","initialiseOverviewMixMax","colorMap","Map","threshold","set","checkAndSetOverviewMinMax","drawOverviewData","drawOverviewDataWrapper","overviewWidth","overviewHeight","focusGraphMarginTop","$apply","getColorFromMap","fillRect","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, variableSrv, timeSrv) {\n        super($scope, $injector);\n\n        this.$timeout = $timeout;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n        this.overviewModel = {};\n        this.focusModel = {};\n        this.initialiseConfig();\n        this.loadData();\n    }\n\n    initialiseConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            instancePropertyName: \"instance\",\n            dateFormat: \"DD-MM-YYYY HH:mm\",\n            focusAreaColor: \"aqua\",\n            focusAreaSize: 20,\n            colors: [\"ff9494\", \"ff3030\", \"c70000\", \"600000\"],\n            luminanceLevel: 0.5,\n            fontSize: 15,\n            overviewPointSize: 1,\n            focusPointWidth: 5,\n            focusPointHeight: 30,\n            leftPadding: 0,\n            horizontalPadding: 40,\n            verticalPadding: 20,\n            paddingBetweenGraphs: 50,\n        }\n    }\n\n    loadData() {\n        this.rawData = {};\n        this.maxLoadCount = 5;\n        this.loadCount = 0;\n        this.fromDate = Math.round(this.timeSrv.timeRange().from._d.getTime() / 1000);\n        this.toDate = Math.round(this.timeSrv.timeRange().to._d.getTime() / 1000);\n\n        this.getDataFromAPI(\"node_load1\", (data) => {\n            this.rawData.totalMemory = data;\n        });\n\n        this.getDataFromAPI(\"node_memory_MemTotal_bytes\", (data) => {\n            this.rawData.totalMemory = data;\n        });\n\n        this.getDataFromAPI(\"node_memory_MemFree_bytes\", (data) => {\n            this.rawData.freeMemory = data;\n        });\n\n        this.getDataFromAPI(\"node_memory_Cached_bytes\", (data) => {\n            this.rawData.cachedMemory = data;\n        });\n\n        this.getDataFromAPI(\"node_memory_Buffers_bytes\", (data) => {\n            this.rawData.bufferMemory = data;\n        });\n\n        this.processRawData();\n    }\n\n    getDataFromAPI(metric, callback) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            ++this.loadCount;\n\n            if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {\n                callback(JSON.parse(xmlHttp.responseText).data.result);\n            }\n        }\n\n        var url = this.config.apiAddress + metric + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=15\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.maxLoadCount) {\n                this.processRawData();\n            } else {\n            }\n        }, 100);\n    }\n\n    link(scope, elem, attrs, ctrl) {\n        this.scope = scope;\n        this.elem = elem;\n        var parent = this;\n\n        scope.toggleFocus = function () {\n            parent.toggleFocus.bind(parent)();\n        }\n\n        scope.moveFocusArea = function (evt) {\n            parent.moveFocusArea.bind(parent, evt)();\n        }\n\n        scope.fixFocusArea = function (evt) {\n            parent.fixFocusArea.bind(parent, evt)();\n        }\n\n        scope.selectNode = function (evt) {\n            parent.selectNode.bind(parent, evt)();\n        }\n\n        this.initialiseCanvases();\n    }\n\n    toggleFocus() {\n        this.scope.ctrl.focusMode = !this.scope.ctrl.focusMode;\n\n        if (!this.scope.ctrl.focusMode) {\n            this.clearFocus();\n            this.focusAreaIsFixed = false;\n        }\n    }\n\n    clearFocus() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n        this.focusGraphContext.clearRect(0, 0, this.focusGraphCanvas.width, this.focusGraphCanvas.height);\n    }\n\n    moveFocusArea(evt) {\n        if (this.scope.ctrl.focusMode) {\n            if (!this.focusAreaIsFixed) {\n                this.drawFocus(evt);\n                evt.preventDefault();\n            }\n        }\n    }\n\n    fixFocusArea(evt) {\n        if (this.scope.ctrl.focusMode) {\n            if (this.focusAreaIsFixed) {\n                this.drawFocus(evt);\n            }\n\n            this.focusAreaIsFixed = !this.focusAreaIsFixed;\n            evt.preventDefault();\n        }\n    }\n\n    drawFocus(evt) {\n        this.mousePos = this.getMousePos(evt, this.overviewCanvas);\n        this.clearFocus();\n        this.drawFocusArea();\n        this.drawFocusGraph();\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    drawFocusArea() {\n        var size = this.getFocusAreaSize();\n        this.focusStartX = Math.min(Math.max(0, this.mousePos.x - this.config.focusAreaSize), this.overviewCanvas.width - size);\n        this.focusStartY = Math.min(Math.max(0, this.mousePos.y - this.config.focusAreaSize), this.overviewCanvas.height - size);\n        this.focusAreaContext.strokeStyle = this.config.focusAreaColor;\n        this.focusAreaContext.strokeRect(this.focusStartX, this.focusStartY, size, size);\n    }\n\n    getFocusAreaSize() {\n        return this.config.focusAreaSize * 2;\n    }\n\n    drawFocusGraph() {\n        this.initialiseFocusGraphData();\n        this.drawVertical();\n        this.drawFocusGraphData();\n    }\n\n    initialiseFocusGraphData() {\n        this.focusModel.data = [];\n\n        this.overviewModel.data.forEach((instance, index) => {\n            if (this.checkInstanceIsFocused(instance)) {\n                var modalInstance = {};\n                modalInstance.pointList = [];\n                modalInstance.instance = instance.instance;\n                this.focusModel.data.push(modalInstance);\n\n                instance.pointList.forEach((point) => {\n                    if (this.checkPointIsFocused(point)) {\n                        modalInstance.pointList.push(point);\n                    }\n                });\n\n                this.initialiseInstanceLayers(modalInstance);\n            }\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.layers = [];\n\n        this.config.colors.forEach((color) => {\n            var layer = {};\n            layer.valueList = [];\n            instance.layers.push(layer);\n        });\n\n        instance.pointList.forEach((point) => {\n            var value = point.Value;\n\n            instance.layers.forEach((layer) => {\n                layer.valueList.push(value > 0 ? value : 0);\n                value -= this.layerRange;\n            });\n        });\n    }\n\n    checkInstanceIsFocused(instance) {\n        return instance.overviewY >= this.focusStartY && instance.overviewY <= this.focusStartY + this.getFocusAreaSize();\n    }\n\n    checkPointIsFocused(point) {\n        return point.x >= this.focusStartX && point.x <= this.focusStartX + this.getFocusAreaSize();\n    }\n\n    drawVertical() {\n        this.focusModel.horizontalX = 0;\n        this.focusGraphContext.fillStyle = \"black\";\n\n        this.focusModel.data.forEach((instance, index) => {\n            var label = instance.instance;\n            instance.y = this.config.focusPointHeight + index * (this.config.focusPointHeight + this.config.verticalPadding);\n            this.focusGraphContext.fillText(label, this.config.leftPadding, instance.y);\n            var metrics = this.focusGraphContext.measureText(label);\n\n            if (metrics.width > this.focusModel.horizontalX) {\n                this.focusModel.horizontalX = metrics.width;\n            }\n        });\n\n        this.focusModel.horizontalX += this.config.horizontalPadding;\n    }\n\n    drawFocusGraphData() {\n        this.focusModel.data.forEach((instance) => {\n            instance.layers.forEach((layer, layerIndex) => {\n                this.focusGraphContext.beginPath();\n                this.focusGraphContext.moveTo(this.focusModel.horizontalX, instance.y);\n                var x = this.focusModel.horizontalX;\n                var previousX = 0;\n                var previousValue = 0;\n\n                layer.valueList.forEach((value, valueIndex) => {\n                    x += valueIndex * this.config.focusPointWidth;\n                    this.moveContextBasedOnValue(value, previousValue, previousX, instance, layerIndex, x);\n                    previousX = x;\n                    previousValue = value;\n                });\n\n                this.focusGraphContext.lineTo(x, instance.y);\n                this.focusGraphContext.lineTo(this.focusModel.horizontalX, instance.y);\n                this.focusGraphContext.closePath();\n                this.focusGraphContext.fillStyle = \"#\" + this.config.colors[layerIndex];\n                this.focusGraphContext.fill();\n            });\n        });\n    }\n\n    moveContextBasedOnValue(value, previousValue, previousX, instance, layerIndex, x) {\n        if (value == 0) {\n            this.focusGraphContext.lineTo(previousX, instance.y);\n        } else {\n            if (layerIndex > 0 && previousValue == 0) {\n                this.focusGraphContext.lineTo(x, instance.y);\n            }\n\n            if (value >= this.layerRange) {\n                this.focusGraphContext.lineTo(x, instance.y - this.config.focusPointHeight);\n            } else {\n                this.focusGraphContext.lineTo(x, instance.y - value * this.config.focusPointHeight / this.layerRange);\n            }\n        }\n    }\n\n    selectNode(evt) {\n        if (!this.updateVariable) {\n            var mousePos = this.getMousePos(event, this.focusGraphCanvas);\n            this.scope.ctrl.menuX = mousePos.x;\n            this.scope.ctrl.menuY = mousePos.y;\n            var instanceHeight = this.config.focusPointHeight + this.config.verticalPadding;\n\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                if (instanceHeight * i <= mousePos.y && mousePos.y <= instanceHeight * (i + 1)) {\n                    var instance = this.focusModel.data[i];\n\n                    this.variableSrv.variables.forEach((v) => {\n                        if (v.name == \"node\") {\n                            this.variableSrv.setOptionAsCurrent(v, {\n                                text: instance.instance,\n                                value: instance.instance\n                            });\n\n                            this.updateVariable = true;\n                            this.variableSrv.variableUpdated(v, true);\n                        }\n                    });\n\n                    break;\n                }\n            }\n        }\n    }\n\n    initialiseCanvases() {\n        this.overviewCanvas = this.elem.find(\"#overviewCanvas\")[0];\n        this.overviewContext = this.overviewCanvas.getContext(\"2d\");\n\n        this.focusAreaCanvas = this.elem.find(\"#focusAreaCanvas\")[0];\n        this.focusAreaContext = this.focusAreaCanvas.getContext(\"2d\");\n\n        this.focusGraphCanvas = this.elem.find(\"#focusGraphCanvas\")[0];\n        this.focusGraphContext = this.focusGraphCanvas.getContext(\"2d\");\n        this.focusGraphContext.font = this.config.fontSize + \"px arial\";\n    }\n\n    onDataReceived(dataList) {\n        if (this.updateVariable) {\n            this.updateVariable = false;\n        } else {\n            this.parseTable(dataList);\n            this.initialiseColorMap();\n            this.renderOverview();\n        }\n    }\n\n    parseTable(dataList) {\n        this.overviewModel.data = [];\n\n        if (dataList.length == 1) {\n            var table = dataList[0];\n            console.log(\"Table: \");\n            console.log(table);\n            var instanceColumnIndex = this.getInstanceColumnIndex(table);\n\n            for (var rowIndex = 0; rowIndex < table.rows.length; ++rowIndex) {\n                var row = table.rows[rowIndex];\n                var instance = this.getExistingInstance(row[instanceColumnIndex]);\n                var point = {};\n\n                for (var columnIndex = 0; columnIndex < table.columns.length; ++columnIndex) {\n                    point[table.columns[columnIndex].text] = row[columnIndex];\n                }\n\n                instance.pointList.push(point);\n            }\n\n            console.log(this.overviewModel.data);\n        }\n    }\n\n    getInstanceColumnIndex(table) {\n        for (var i = 0; i < table.columns.length; ++i) {\n            if (table.columns[i].text == this.config.instancePropertyName) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    getExistingInstance(instanceName) {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var current = this.overviewModel.data[i];\n\n            if (current.instance == instanceName) {\n                return current;\n            }\n        }\n\n        var instance = {};\n        instance.instance = instanceName;\n        instance.pointList = [];\n        this.overviewModel.data.push(instance);\n        return instance;\n    }\n\n    initialiseColorMap() {\n        this.initialiseOverviewMixMax();\n\n        this.overviewModel.colorMap = new Map();\n        this.layerRange = this.overviewModel.max / (this.config.colors.length - 0.5);\n\n        for (var i = 0; i < this.config.colors.length; ++i) {\n            var threshold = {};\n            threshold.min = i * this.layerRange;\n            threshold.max = threshold.min + this.layerRange;\n            this.overviewModel.colorMap.set(threshold, this.config.colors[i]);\n        }\n    }\n\n    initialiseOverviewMixMax() {\n        this.overviewModel.min = -1;\n        this.overviewModel.max = -1;\n\n        this.overviewModel.data.forEach((instance) => {\n            instance.pointList.forEach((point) => {\n                this.checkAndSetOverviewMinMax(point);\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(point) {\n        var value = point.Value;\n\n        if (this.overviewModel.min == -1) {\n            this.overviewModel.min = value;\n            this.overviewModel.max = value;\n        } else {\n            if (value < this.overviewModel.min) {\n                this.overviewModel.min = value;\n            }\n\n            if (value > this.overviewModel.max) {\n                this.overviewModel.max = value;\n            }\n        }\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data && this.overviewModel.data.length > 0) {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.clearFocus();\n            this.drawOverviewData();\n        }\n    }\n\n    drawOverviewData() {\n        var parent = this;\n\n        this.$timeout(() => {\n            parent.drawOverviewDataWrapper.bind(parent)();\n        }, 100);\n    }\n\n    drawOverviewDataWrapper() {\n        this.scope.ctrl.overviewWidth = this.overviewModel.data[0].pointList.length * this.config.overviewPointSize;\n        this.scope.ctrl.overviewHeight = this.overviewModel.data.length * this.config.overviewPointSize;\n        this.scope.ctrl.focusGraphMarginTop = this.scope.ctrl.overviewHeight + this.config.paddingBetweenGraphs;\n        this.scope.$apply();\n\n        this.overviewModel.data.forEach((instance, index) => {\n            instance.overviewY = index * this.config.overviewPointSize;\n\n            for (var i = 0; i < instance.pointList.length; ++i) {\n                var point = instance.pointList[i];\n                point.x = this.config.leftPadding + i * this.config.overviewPointSize;\n                point.color = this.getColorFromMap(point.Value);\n                this.overviewContext.fillStyle = point.color;\n                this.overviewContext.fillRect(point.x, instance.overviewY, this.config.overviewPointSize, this.config.overviewPointSize);\n            }\n        });\n    }\n\n    getColorFromMap(value) {\n        var result;\n\n        this.overviewModel.colorMap.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = color;\n            }\n        });\n\n        return \"#\" + result;\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}