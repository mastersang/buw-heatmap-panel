{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","scope","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","initialiseStartingVariables","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupSizeBarWidth","pieRadius","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","groupSizeColor","overlapColor","selectedInstancesForFocusOffset","focusArea","color","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLength","barWidth","minimumBarHeight","marginBetweenSliderAndChart","thresholdBarLength","focusGraph","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","maxWidth","markerSize","marginBetweenMarkers","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","initialiseColorListByMetric","colorList","luminanceChange","i","changeColorLuminance","firstLoad","overviewModel","histogramModel","focusAreaModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","groupSizeChart","HORIZONTAL_BAR","PIE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","isGrouped","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","metricIndex","point","checkAndSetOverviewMinMax","console","log","overviewMetric","panelMetric","initialiseColorMapByMetric","layerRange","colorMap","getColorMap","Map","threshold","average","set","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","sort","first","second","setHistogramMinMax","total","map","isBetween","target","start","end","initialiseSingleMetricGroups","initialiseMultiMetricGroups","initialiseSingleMetricGroupsByMetric","initialiseSingleMetricGroupsColor","initialiseSingleMetricInstanceGroupList","thresholdGroupListMap","populateSingleMetricGroupList","groupIndex","group","checkInstanceIsInGroup","initialiseNewSingleMetricGroup","instanceList","groupTotal","instanceTotal","thresholdValue","markerX","originalColor","getCurrentSingleMetricGroupList","populateMultiMetricGroupList","initialiseMultiMetricGroupsColor","findExistingMultiMetricGroup","initialiseNewMultiMetricGroup","instanceMetric","groupMetric","greyValue","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","getThresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","convertDateToString","toDateWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiMetricGroupSize","largestGroup","getCurrentMultiMetricGroupList","groupCount","getMaxGroupCount","instanceHeight","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","drawSingeMetricGroupedOverview","drawMultiMetricGroupedOverview","drawGroupSize","drawGroupedOverviewWrapper","drawMetricSeparator","metricIndexList","y","drawOverviewInstance","pointHeight","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","groupSizeLabelWidth","drawSingleMetricGroupSize","drawMultipleMetricGroupSize","drawSingleMetricBarGroupSize","drawSingleMetricPieGroupSize","drawGroupSizeLabel","drawBarGroupSizeWrapper","overlapCount","beginPath","moveTo","lineTo","closePath","fill","startAngle","PI","drawPieGroupSizeWrapper","size","endAngle","arc","fillText","maxEndX","strokeStyle","stroke","instanceIndex","getMetricDarkestColor","format","showHistogram","changedColorThreshold","temp","addOrRemoveGroupToFocus","overviewGroup","drawFocusGraph","removeExisting","focusGroup","isSelected","remove","removeExistingFocusGroupInSameMetric","addGroupToFocus","setShowMergeGroupsButton","newGroupList","existingGroup","showMergeSelectedGroups","setShowMergeGroupsButtonWrapper","selectedGroupCount","drawOverviewGroupMarker","marker","startY","initialiseData","initialiseFocusGraphData","showFocus","setFocusGraphCanvasHeight","pointCount","focusedIndexList","focusGraphWidth","floor","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","showAllMetrics","focusGraphHeight","evt","mousePosition","getMousePos","isSelectingBar","setNewThresholdValue","checkAndSetSelectedHistogramThresholdBar","horizontalAxisStartX","selectedBar","drawHistogram","histogramCursor","topY","sliderY","bottomY","thresholdBarList","bar","leftX","rightX","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","deselectSingleMetricGroups","deselectMultiMetricGroups","originalGroupList","previousGroupThreshold","timeRangeIndexList","mergeSingleMetricGroups","mergeMultipleMetricGroups","mergeFocusGroupList","initialiseGroupsOverlapCount","drawSelectedGroupsMarkers","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","getCopyOfGroup","newGroup","oldFocusGroupList","mergeFocusGroupListWrapper","setMainMetricIndexAfterMerging","mainMetricIndex","selectedMetricIndex","overviewInstance","metricWithMostData","focusInstance","getFocusInstance","oldGroup","selectedMetricIndexList","checkOverlappingGroups","check","overlappingInstance","overlappingList","firstGroup","overlappingGroup","isSelectingMetricLabel","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","focusAreaStartPoint","focusInArea","firstMetric","isDrawingFocusArea","histogramMetric","$watch","newValue","oldValue","drawHistogramAxes","drawHistogramMaxValueAndOccurence","drawHistogramBars","drawHistogramThresholdSlider","verticalAxisStartY","lineWdith","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","verticalLabelWidth","maxOccurenceWidth","horizontalAxisY","horizontalAxisEndX","labelX","labelY","occurenceLabelY","maxValueWidth","valueLabelY","originX","occurenceStep","minHeight","drawHistogramSliderLine","drawHistogramThresholdBars","thresholdBarY","setOverviewMousePosition","setSelectedMetricIndex","setOverviewCursorToPointer","deselectMetricLabel","handleMouseMoveOnGroupedOverview","drawfocusArea","focusAreaIsFixed","drawFocus","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","setSelectedTimeIndex","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","markerIndex","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","initialiseFocusAreaPoints","drawFocusAreaSquare","strokeRect","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","focusGroupWithInterval","stopInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","updatedSelectedGroups","initialiseOverlapList","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","layerIndex","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","metricListIndex","previousX","previousValue","valueIndex","positionIndex","moveFocusGraphContextBasedOnValue","graphBeginX","getUngroupedFocusCanvas","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","showOverlapDetails","drawOverlapDetails","overlapGraphHeight","drawOverlapInstance","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.scope = $scope;\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n        this.initialiseStartingVariables();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupSizeBarWidth: 1,\n            pieRadius: 8,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30,\n            groupSizeColor: \"lightgray\",\n            overlapColor: \"black\",\n            selectedInstancesForFocusOffset: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\"\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 20,\n            verticalAxisLength: 500,\n            barWidth: 5,\n            minimumBarHeight: 2,\n            marginBetweenSliderAndChart: 50,\n            thresholdBarLength: 10\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            groupedPointWidth: 5,\n            ungroupedPointWidth: 40,\n            metricMaxHeight: 20,\n            marginBetweenMetrics: 10,\n            maxWidth: 1200,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    //    query: \"node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        // this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                this.initialiseColorListByMetric(metric);\n            });\n        }\n    }\n\n    initialiseColorListByMetric(metric) {\n        // add lightest shade as defined by user\n        metric.colorList = [];\n        metric.colorList.push(metric.color);\n        var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n        // add the other shades\n        for (var i = 1; i < this.config.colorCount; ++i) {\n            var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n            metric.colorList.push(color);\n        }\n    }\n\n    initialiseStartingVariables() {\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.histogramModel = {};\n        this.focusAreaModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            groupSizeChart: {\n                HORIZONTAL_BAR: \"1\",\n                PIE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupSizeChart = this.enumList.groupSizeChart.HORIZONTAL_BAR;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = this.isGrouped ? \"default\" : \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n\n                if (metricIndex == 0 && metric.max > 100) {\n                    console.log(instance.metric.instance);\n                }\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((overviewMetric, index) => {\n            var panelMetric = this.panel.metricList[index];\n            this.initialiseColorMapByMetric(overviewMetric, panelMetric);\n        });\n    }\n\n    initialiseColorMapByMetric(overviewMetric, panelMetric) {\n        var colorList = panelMetric.colorList;\n        overviewMetric.layerRange = Math.round(overviewMetric.max / colorList.length);\n\n        // map a range of values to a color\n        overviewMetric.colorMap = this.getColorMap(overviewMetric, colorList);\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[0] - second[0];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    //    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                    metric.total += point.value;\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleMetricGroups();\n        this.initialiseMultiMetricGroups();\n    }\n\n    initialiseSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseSingleMetricGroupsByMetric(metric, metricIndex);\n            this.initialiseSingleMetricGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleMetricInstanceGroupList();\n    }\n\n    initialiseSingleMetricGroupsByMetric(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var group = groupList[groupIndex];\n                group.name = this.panel.metricList[metricIndex].name + \" group \" + (groupIndex + 1);\n            }\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold) {\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                return this.checkInstanceIsInGroup(search.total, instance.metricList[metricIndex].total, groupingThreshold);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleMetricGroup(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceIsInGroup(groupTotal, instanceTotal, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n        var min = groupTotal * (1 - thresholdValue);\n        var max = groupTotal * (1 + thresholdValue);\n        return this.isBetween(instanceTotal, min, max);\n    }\n\n    initialiseNewSingleMetricGroup(instance, metricIndex) {\n        var group = {};\n        group.metricIndex = metricIndex;\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleMetricGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleMetricInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                for (var i = 0; i < groupList.length; ++i) {\n                    var group = groupList[i];\n\n                    if (this.checkInstanceIsInGroup(group.total, instance.metricList[metricIndex].total, this.groupingThreshold)) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiMetricGroups() {\n        this.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiMetricGroupList(groupList, groupingThreshold);\n            this.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiMetricGroupsColor();\n    }\n\n    populateMultiMetricGroupList(groupList, groupingThreshold) {\n        this.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiMetricGroup(groupList, instance, groupingThreshold);\n\n            if (!group) {\n                group = this.initialiseNewMultiMetricGroup(instance, groupList);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiMetricGroup(groupList, instance, groupingThreshold) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n\n                if (!this.checkInstanceIsInGroup(metric.total, instance.metricList[i].total, groupingThreshold)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiMetricGroup(instance, groupList) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.name = \"Group \" + (groupList.length + 1);\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiMetricGroupsColor() {\n        this.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        this.clearFocusArea();\n        this.drawOverview();\n    }\n\n    clearFocusArea() {\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        if (!this.isLoading) {\n            this.$timeout(() => {\n                this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n                this.setOverviewCanvasSize();\n                this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n                this.scope.$apply();\n                this.drawOverviewData();\n            });\n        }\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n        this.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n            });\n\n            /*\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n                });\n            } else {\n                this.overviewCanvasWidth += this.overviewModel.metricList.length + this.config.overview.pieRadius * 2;\n            }*/\n        } else {\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                    this.getMaxMultiMetricGroupSize() * this.config.overview.groupSizeBarWidth;\n            } else {\n                this.overviewCanvasWidth += this.config.overview.pieRadius * 2;\n            }\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.groupSizeBarWidth;\n    }\n\n    getCurrentSingleMetricGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiMetricGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiMetricGroupList() {\n        return this.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewModel.instanceHeight = this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups;\n            } else {\n                this.overviewModel.instanceHeight = this.config.overview.pieRadius * 2 + this.config.overview.marginBetweenGroups;\n            }\n\n            this.overviewModel.overviewHeight = groupCount * this.overviewModel.instanceHeight;\n        } else {\n            this.overviewModel.instanceHeight = this.config.overview.ungroupedPointHeight;\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    metric.startX += this.config.overview.marginBetweenMetricAndGroupSize;\n\n                    if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                        var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                        metric.startX += maxGroupSizeBarLength;\n                    } else {\n                        metric.startX += this.config.overview.pieRadius * 2;\n                    }\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeMetricGroupedOverview();\n        } else {\n            this.drawMultiMetricGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeMetricGroupedOverview() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupedOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            if (metricIndex < this.overviewModel.metricList.length - 1) {\n                this.drawMetricSeparator(metric);\n            }\n        });\n    }\n\n    drawGroupedOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        instance.y = this.overviewModel.overviewStartY + groupIndex * this.overviewModel.instanceHeight;\n\n        if (this.groupSizeChart == this.enumList.groupSizeChart.PIE) {\n            instance.y += this.overviewModel.instanceHeight / 2;\n        }\n\n        this.drawOverviewInstance(instance, this.config.overview.groupedPointHeight, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, pointHeight, metricIndexList) {\n        var endY = instance.y + this.overviewModel.instanceHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex, this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result = null;\n\n        map.forEach((color, threshold) => {\n            if (!result && this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiMetricGroupedOverview() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupedOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        this.overviewModel.groupSizeLabelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleMetricGroupSize();\n        } else {\n            this.drawMultipleMetricGroupSize();\n        }\n    }\n\n    drawSingleMetricGroupSize() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                    this.drawSingleMetricBarGroupSize(group, startX);\n                } else {\n                    this.drawSingleMetricPieGroupSize(group, startX);\n                }\n            });\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - this.overviewModel.groupSizeLabelWidth) / 2);\n            } else {\n                this.drawGroupSizeLabel((startX * 2 + this.config.overview.pieRadius - this.overviewModel.groupSizeLabelWidth) / 2);\n            }\n        });\n    }\n\n    drawSingleMetricBarGroupSize(group, startX) {\n        this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n        this.drawBarGroupSizeWrapper(group, startX, group.overlapCount, this.config.overview.overlapColor);\n    }\n\n    drawBarGroupSizeWrapper(group, startX, length, color) {\n        var endX = startX + length * this.config.overview.groupSizeBarWidth;\n        var endY = group.y + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, group.y);\n        this.overviewContext.lineTo(endX, group.y);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawSingleMetricPieGroupSize(group, startX) {\n        var startAngle = -0.5 * Math.PI;\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.instanceList.length, this.config.overview.groupSizeColor);\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.overlapCount, this.config.overview.overlapColor);\n    }\n\n    drawPieGroupSizeWrapper(group, startX, startAngle, size, color) {\n        var x = startX + this.config.overview.pieRadius;\n        var endAngle = startAngle + size * 2 * Math.PI / 360;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, group.y);\n        this.overviewContext.arc(x, group.y, this.config.overview.pieRadius, startAngle, endAngle);\n        this.overviewContext.lineTo(x, group.y);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endAngle;\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.overviewModel.labelTextHeight);\n    }\n\n    drawMultipleMetricGroupSize() {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize +\n            this.overviewModel.groupSizeLabelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - this.overviewModel.groupSizeLabelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            x += this.config.overview.marginBetweenMetricAndGroupSize;\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                x += maxGroupSizeBarLength;\n            } else {\n                x += this.config.overview.pieRadius * 2;\n            }\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            instance.y = this.overviewModel.overviewStartY + instanceIndex * this.overviewModel.instanceHeight;\n            this.drawOverviewInstance(instance, this.overviewModel.instanceHeight, metricIndexList);\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    closeHistogram() {\n        this.showHistogram = false;\n\n        if (this.changedColorThreshold) {\n            this.changedColorThreshold = false;\n            this.drawOverview();\n\n            if (this.isGrouped) {\n                var temp = this.focusModel.groupList;\n                this.focusModel.groupList = [];\n\n                temp.forEach((group) => {\n                    this.addOrRemoveGroupToFocus(group.overviewGroup, true);\n                });\n\n                this.drawFocusGraph();\n            } else {\n                this.drawFocusGraph();\n            }\n        }\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        });\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                // deselect group from focus\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.removeExistingFocusGroupInSameMetric(group);\n            }\n\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    removeExistingFocusGroupInSameMetric(group) {\n        var newGroupList = [];\n\n        this.focusModel.groupList.forEach((existingGroup) => {\n            if (existingGroup.overviewGroup.metricIndex == group.metricIndex) {\n                existingGroup.overviewGroup.isSelected = false;\n            } else {\n                newGroupList.push(existingGroup);\n            }\n        });\n\n        this.focusModel.groupList = newGroupList;\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    drawFocusGraph(initialiseData) {\n        if (!this.isGrouped && initialiseData) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n            this.setFocusGraphCanvasHeight();\n            var pointCount = this.focusModel.focusedIndexList.length - 1;\n            var pointWidth = this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n            this.focusGraphWidth = Math.min(this.config.focusGraph.maxWidth, pointCount * pointWidth);\n            this.focusModel.pointWidth = Math.max(1, Math.floor(this.focusGraphWidth / pointCount));\n            var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n            if (focusGraphRow) {\n                this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                this.setFocusFromAndToDate();\n                this.positionFocusFromAndToDate();\n                this.$timeout(() => {\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                });\n            }\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    setFocusGraphCanvasHeight() {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                if (group.showAllMetrics) {\n                    group.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    group.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        } else {\n            this.focusModel.data.forEach((instance) => {\n                if (instance.showAllMetrics) {\n                    instance.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    instance.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        }\n    }\n\n    moveMouseOnHistogram(evt) {\n        this.histogramModel.mousePosition = this.getMousePos(evt, this.histogramCanvas);\n\n        if (this.histogramModel.isSelectingBar) {\n            this.setNewThresholdValue();\n        } else {\n            this.checkAndSetSelectedHistogramThresholdBar();\n        }\n    }\n\n    setNewThresholdValue() {\n        this.changedColorThreshold = true;\n        var value = Math.round((this.histogramModel.mousePosition.x - this.histogramModel.horizontalAxisStartX) / this.config.histogram.barWidth);\n        value = Math.max(value, 1);\n        value = Math.min(value, this.histogramModel.metric.max - 1);\n\n        this.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            if (threshold != this.histogramModel.selectedBar.threshold) {\n                if (value >= this.histogramModel.selectedBar.threshold.max) {\n                    // move right\n                    if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                        value = Math.min(value, threshold.max - 1);\n                        threshold.min = value;\n                    }\n                } else {\n                    // move left\n                    if (this.histogramModel.selectedBar.threshold.min == 0) {\n                        // left most threshold\n                        if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    } else {\n                        // left threshold\n                        if (threshold.max == this.histogramModel.selectedBar.threshold.min) {\n                            value = Math.max(value, threshold.max + 1);\n                        }\n\n                        // right threshold\n                        if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    }\n                }\n            }\n        });\n\n        this.histogramModel.selectedBar.threshold.max = value;\n        this.drawHistogram();\n    }\n\n    checkAndSetSelectedHistogramThresholdBar() {\n        this.histogramCursor = \"default\";\n        this.histogramModel.selectedBar = null;\n        var topY = this.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        var bottomY = this.histogramModel.sliderY + this.config.histogram.thresholdBarLength / 2;\n\n        if (this.isBetween(this.histogramModel.mousePosition.y, topY, bottomY)) {\n            for (var i = 0; i < this.histogramModel.thresholdBarList.length; ++i) {\n                var bar = this.histogramModel.thresholdBarList[i];\n                var leftX = bar.x - this.config.histogram.barWidth;\n                var rightX = bar.x + this.config.histogram.barWidth;\n\n                if (this.isBetween(this.histogramModel.mousePosition.x, leftX, rightX)) {\n                    this.histogramCursor = \"pointer\";\n                    this.histogramModel.selectedBar = bar;\n                    break;\n                }\n            }\n        }\n    }\n\n    mouseDownOnHistogram() {\n        if (this.histogramModel.selectedBar) {\n            this.histogramModel.isSelectingBar = true;\n        }\n    }\n\n    mouseUpOnHistogram() {\n        this.histogramModel.isSelectingBar = false;\n        this.histogramModel.selectedBar = null;\n        this.histogramCursor = \"default\";\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        if (!this.isLoading) {\n            this.drawOverview();\n            this.clearFocusArea();\n            this.clearTimeIndicator();\n            this.deselectAllGroups();\n            this.showFocus = false;\n            this.showMergeSelectedGroups = false;\n        }\n    }\n\n    deselectAllGroups() {\n        this.focusModel.groupList = [];\n        this.deselectSingleMetricGroups();\n        this.deselectMultiMetricGroups();\n    }\n\n    deselectSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                });\n            }\n        });\n    }\n\n    deselectMultiMetricGroups() {\n        if (this.overviewModel.originalGroupList) {\n            this.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.overviewModel.originalGroupList);\n            this.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.initialiseSingleMetricInstanceGroupList();\n        this.changeGroupingSelection();\n    }\n\n    selectGroupsizeChart() {\n        this.drawOverview();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    mergeSelectedGroups() {\n        this.showMergeSelectedGroups = false;\n\n        // store current threshold value to restore original groups when threshold is changed\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleMetricGroups();\n        } else {\n            this.mergeMultipleMetricGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.initialiseGroupsOverlapCount();\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n    }\n\n    mergeSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = this.getCopyOfGroup(group);\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    getCopyOfGroup(group) {\n        var newGroup = {};\n        newGroup.name = group.name;\n        newGroup.metricIndex = group.metricIndex;\n        newGroup.instanceList = group.instanceList;\n        newGroup.total = group.total;\n        newGroup.color = group.color;\n        newGroup.isSelected = group.isSelected;\n        newGroup.markerX = group.markerX;\n        newGroup.y = group.y;\n        return newGroup;\n    }\n\n    mergeFocusGroupList() {\n        var oldFocusGroupList = this.focusModel.groupList;\n        this.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiMetricGroupList());\n        }\n\n        this.setMainMetricIndexAfterMerging(oldFocusGroupList);\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n        focusGroup.mainMetricIndex = this.overviewModel.selectedMetricIndex;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    setMainMetricIndexAfterMerging(oldFocusGroupList) {\n        this.focusModel.groupList.forEach((group) => {\n            var oldGroup = _.find(oldFocusGroupList, (search) => {\n                return search.overviewGroup == group.overviewGroup;\n            });\n\n            if (oldGroup) {\n                group = oldGroup.mainMetricIndex;\n            }\n        });\n    }\n\n    initialiseGroupsOverlapCount() {\n        this.overviewModel.selectedMetricIndexList = [];\n\n        this.focusModel.groupList.forEach((group) => {\n            this.overviewModel.selectedMetricIndexList.push(group.overviewGroup.metricIndex);\n        });\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                group.overlapCount = 0;\n\n                if (this.focusModel.groupList.length > 0 && !this.overviewModel.selectedMetricIndexList.includes(metricIndex)) {\n                    this.checkOverlappingGroups(group);\n                }\n            });\n        });\n    }\n\n    checkOverlappingGroups(group) {\n        group.instanceList.forEach((instance) => {\n            var check = 0;\n\n            this.focusModel.groupList.forEach((group) => {\n                var overlappingInstance = _.find(group.overviewGroup.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++check;\n                }\n            });\n\n            if (check == this.overviewModel.selectedMetricIndexList.length) {\n                ++group.overlapCount;\n            }\n        });\n    }\n\n    initialiseOverlapList() {\n        this.focusModel.overlappingList = [];\n        var firstGroup = this.focusModel.groupList[0];\n\n        firstGroup.instanceList.forEach((instance) => {\n            var check = 0;\n\n            for (var groupIndex = 1; groupIndex < this.focusModel.groupList.length; ++groupIndex) {\n                var overlappingGroup = this.focusModel.groupList[groupIndex];\n\n                var overlappingInstance = _.find(overlappingGroup.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++check;\n                }\n            }\n\n            if (check == this.focusModel.groupList.length - 1) {\n                this.focusModel.overlappingList.push(instance);\n            }\n        });\n    }\n\n    mergeMultipleMetricGroups() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        if (!this.overviewModel.originalGroupList) {\n            this.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.thresholdGroupListMap) {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n                this.overviewModel.isSelectingTimeRange = true;\n                this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset - this.overviewModel.metricList[0].startX;\n                this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n            }\n        } else {\n            this.overviewModel.focusAreaStartPoint = {};\n            this.focusInArea = false;\n            var firstMetric = this.overviewModel.metricList[0];\n            this.overviewModel.focusAreaStartPoint.x = Math.max(firstMetric.startX, this.overviewModel.mousePositionXOffset - firstMetric.startX);\n            this.overviewModel.focusAreaStartPoint.y = this.overviewModel.mousePosition.y;\n            this.isDrawingFocusArea = true;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        this.histogramModel.metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        this.histogramMetric = this.panel.metricList[this.overviewModel.selectedMetricIndex];\n\n        this.scope.$watch(\"ctrl.histogramMetric.color\", (newValue, oldValue) => {\n            if (newValue != oldValue) {\n                this.initialiseColorListByMetric(this.histogramMetric);\n                this.initialiseColorMapByMetric(this.histogramModel.metric, this.histogramMetric);\n                this.drawHistogram();\n            }\n        });\n\n        this.drawHistogramAxes();\n        this.drawHistogramMaxValueAndOccurence();\n        this.drawHistogramBars();\n        this.drawHistogramThresholdSlider();\n    }\n\n    drawHistogramAxes() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.histogramModel.verticalAxisStartY = this.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.lineWdith = 1;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"gray\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis();\n        this.drawHistogramHorizontalAxis();\n    }\n\n    drawHistogramVerticalAxis() {\n        var occurences = \"occurences\";\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(this.histogramModel.metric.histogram.max).width;\n        this.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(\"occurences\", this.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.overviewModel.labelTextHeight);\n        this.histogramModel.horizontalAxisY = this.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLength;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis() {\n        this.histogramModel.horizontalAxisEndX = this.histogramModel.horizontalAxisStartX +\n            this.config.histogram.barWidth * (this.histogramModel.metric.max + 1);\n        var labelX = this.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.histogramModel.horizontalAxisY + this.overviewModel.labelTextHeight / 2;\n        this.histogramCanvasContext.fillText(this.histogramMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        var occurenceLabelY = this.histogramModel.verticalAxisStartY + this.overviewModel.labelTextHeight / 2\n        this.histogramCanvasContext.fillText(this.histogramModel.metric.histogram.max, 0, occurenceLabelY);\n        var maxValueWidth = this.histogramCanvasContext.measureText(this.histogramModel.metric.max).width;\n        var valueLabelY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(this.histogramModel.metric.max, this.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.histogramModel.horizontalAxisStartX - this.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    drawHistogramBars() {\n        var occurenceStep = this.config.histogram.verticalAxisLength / this.histogramModel.metric.histogram.max;\n\n        this.histogramModel.metric.histogram.data.forEach((occurences, value) => {\n            this.histogramCanvasContext.fillStyle = this.getColorFromMap(value, this.histogramModel.metric.colorMap);\n            var x = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * value;\n            var y = this.histogramModel.horizontalAxisY - occurenceStep * occurences;\n            var height = this.histogramModel.horizontalAxisY - y;\n            var minHeight = this.config.histogram.minimumBarHeight;\n\n            if (height < minHeight) {\n                y = this.histogramModel.horizontalAxisY - minHeight;\n                height = minHeight;\n            }\n\n            this.histogramCanvasContext.fillRect(x, y, this.config.histogram.barWidth, height);\n        });\n    }\n\n    drawHistogramThresholdSlider() {\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.drawHistogramSliderLine();\n        this.drawHistogramThresholdBars();\n    }\n\n    drawHistogramSliderLine() {\n        this.histogramModel.sliderY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenSliderAndChart;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.sliderY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.sliderY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramThresholdBars() {\n        var thresholdBarY = this.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        this.histogramModel.thresholdBarList = [];\n        var i = 0;\n\n        this.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            var bar = {};\n            bar.threshold = threshold;\n            bar.x = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * (threshold.max + 1);\n\n            // no need to draw slider bar for last threshold\n            if (i < this.histogramModel.metric.colorMap.size - 1) {\n                this.histogramCanvasContext.beginPath();\n                this.histogramCanvasContext.moveTo(bar.x, thresholdBarY);\n                this.histogramCanvasContext.lineTo(bar.x, thresholdBarY + this.config.histogram.thresholdBarLength);\n                this.histogramCanvasContext.stroke();\n                this.histogramCanvasContext.closePath();\n                ++i;\n            }\n\n            this.histogramModel.thresholdBarList.push(bar);\n        });\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.overviewModel.selectedMetricIndex > -1) {\n                // check if mouse is on metric label\n                if (this.isBetween(this.overviewModel.mousePosition.y, 0, this.overviewModel.overviewStartY)) {\n                    this.isSelectingMetricLabel = true;\n                    this.setOverviewCursorToPointer();\n                } else {\n                    this.deselectMetricLabel();\n                }\n            } else {\n                this.deselectMetricLabel();\n            }\n\n            if (this.isGrouped) {\n                this.handleMouseMoveOnGroupedOverview();\n            } else if (this.overviewModel.selectedMetricIndex > -1) {\n                if (this.isDrawingFocusArea) {\n                    this.drawfocusArea();\n                } else if (!this.focusAreaIsFixed) {\n                    this.clearFocusArea();\n                    this.drawFocus();\n                }\n            }\n        } else {\n            this.deselectMetricLabel();\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    // set x position of mouse per overview graph for easier manipulation with mouse positions\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX + this.overviewModel.metricList[0].startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    deselectMetricLabel() {\n        this.isSelectingMetricLabel = false;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.overviewModel.hoveredGroup = null;\n        this.overviewModel.hoveredMarker = null;\n        this.checkAndSetSelectedOverviewMarker();\n\n        if (this.overviewModel.selectedMetricIndex >= 0) {\n            this.checkAndSetHoveredGroup();\n        }\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n            if (this.overviewModel.hoveredGroup) {\n                if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                    this.setSelectedTimeIndex();\n                }\n\n                this.drawTimeIndicators();\n            } else {\n                this.clearTimeIndicator();\n            }\n        } else if (this.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.setOverviewCursorToPointer();\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.overviewModel.mousePositionXOffset - this.overviewModel.metricList[0].startX;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleMetricGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.timeRangeMetricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiMetricGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n    }\n\n    drawfocusArea() {\n        this.initialiseFocusAreaPoints();\n\n        if (this.focusAreaModel.startX != this.focusAreaModel.endX &&\n            this.focusAreaModel.startY != this.focusAreaModel.endY) {\n            this.focusInArea = true;\n            this.focusAreaIsFixed = false;\n            this.drawFocusAreaSquare();\n            this.drawFocus();\n        } else {\n            this.focusInArea = false;\n        }\n    }\n\n    initialiseFocusAreaPoints() {\n        var firstMetric = this.overviewModel.metricList[0];\n        this.focusAreaModel.startX = this.overviewModel.focusAreaStartPoint.x;\n        this.focusAreaModel.endX = this.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (this.focusAreaModel.startX > this.overviewModel.mousePositionXOffset) {\n            this.focusAreaModel.startX = this.overviewModel.mousePositionXOffset;\n            this.focusAreaModel.endX = this.overviewModel.focusAreaStartPoint.x;\n        }\n\n        this.focusAreaModel.startY = this.overviewModel.focusAreaStartPoint.y;\n        this.focusAreaModel.endY = this.overviewModel.mousePosition.y;\n\n        if (this.focusAreaModel.startY > this.overviewModel.mousePosition.y) {\n            this.focusAreaModel.startY = this.overviewModel.mousePosition.y;\n            this.focusAreaModel.endY = this.overviewModel.focusAreaStartPoint.y;\n        }\n\n        this.focusAreaModel.startX = Math.max(this.focusAreaModel.startX, firstMetric.startX);\n        this.focusAreaModel.endX = Math.min(this.focusAreaModel.endX, firstMetric.endX);\n        this.focusAreaModel.startY = Math.max(this.focusAreaModel.startY, this.overviewModel.overviewStartY);\n        this.focusAreaModel.endY = Math.min(this.focusAreaModel.endY, this.overviewModel.overviewEndY);\n    }\n\n    drawFocusAreaSquare() {\n        this.clearFocusArea();\n        this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n        var width = this.focusAreaModel.endX - this.focusAreaModel.startX;\n        var height = this.focusAreaModel.endY - this.focusAreaModel.startY;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            this.focusAreaContext.strokeRect(metric.startX + this.focusAreaModel.startX, this.focusAreaModel.startY, width, height);\n        });\n    }\n\n    mouseUpOnOverView() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph(false);\n            }\n        } else {\n            if (this.isDrawingFocusArea) {\n                this.isDrawingFocusArea = false;\n            }\n\n            this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.initialiseGroupsOverlapCount();\n\n                    if (this.focusModel.groupList.length > 1) {\n                        this.initialiseOverlapList();\n                    }\n\n                    this.drawOverview();\n                }\n\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph(false);\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    drawFocus() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph(true);\n                    break;\n                }\n            }\n        }\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n        var topY = Math.max(0, this.overviewModel.mousePosition.y - this.config.overview.selectedInstancesForFocusOffset);\n        var bottomY = Math.min(this.overviewModel.overviewEndY, this.overviewModel.mousePosition.y + this.config.overview.selectedInstancesForFocusOffset);\n\n        if (this.focusInArea) {\n            topY = this.focusAreaModel.startY;\n            bottomY = this.focusAreaModel.endY;\n        }\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.isBetween(overviewInstance.y, topY, bottomY)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var metricIndex = 0; metricIndex < overviewInstance.metricList.length; ++metricIndex) {\n            var instanceMetric = overviewInstance.metricList[metricIndex];\n\n            if (instanceMetric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var leftX = Math.max(overviewMetric.startX, this.overviewModel.mousePositionXOffset - this.config.overview.selectedInstancesForFocusOffset);\n                var rightX = Math.min(overviewMetric.endX, this.overviewModel.mousePositionXOffset + this.config.overview.selectedInstancesForFocusOffset);\n\n                if (this.focusInArea) {\n                    leftX = overviewMetric.startX + this.focusAreaModel.startX;\n                    rightX = overviewMetric.startX + this.focusAreaModel.endX;\n                }\n\n                instanceMetric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, leftX, rightX)) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((instanceMetric, metricIndex) => {\n            for (var i = 0; i < this.config.colorCount; ++i) {\n                var layer = {};\n                layer.valueList = [];\n                instanceMetric.layerList.push(layer);\n            }\n\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            instanceMetric.data.forEach((point) => {\n                var value = point.value;\n                var colorList = this.panel.metricList[metricIndex].colorList;\n\n                instanceMetric.layerList.forEach((layer, layerIndex) => {\n                    overviewMetric.colorMap.forEach((color, threshold) => {\n                        if (color == colorList[layerIndex]) {\n                            layer.valueList.push(value > 0 ? value : 0);\n                            value -= threshold.max;\n                            layer.range = threshold.max - threshold.min;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        var toDateWidth = this.overviewContext.measureText(this.focusedToDate).width;\n        this.toDateLeftMargin = this.focusGraphWidth - (fromDateWidth + toDateWidth) / 2;\n    }\n\n    drawFocusGraphData() {\n        if (this.overviewModel.selectedMetricIndex > -1) {\n            if (this.isGrouped) {\n                this.$timeout(() => {\n                    if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                        this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                            this.overviewModel.metricList.length;\n                    } else {\n                        this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                    }\n\n                    this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                    this.scope.$apply();\n                    this.drawGroupFocusMarkers();\n                    this.drawGroupedFocusGraph();\n                });\n            } else {\n                this.drawUngroupedFocusGraph();\n            }\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        var valueList = Array.from(Array(maxMetricLength).keys());\n        var metricList = instance.metricList;\n        var metricIndexList = Array.from(Array(instance.metricList.length).keys())\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && !group.showAllMetrics) {\n            metricList = [instance.metricList[group.mainMetricIndex]];\n            metricIndexList = [group.mainMetricIndex];\n        }\n\n\n        this.drawGroupedFocusGraphInstance(canvas, valueList, this.focusModel.pointWidth, metricList, metricIndexList);\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            var pointWidth = Math.max(1, Math.floor(this.focusGraphWidth / group.overviewGroup.timeRangeIndexList.length));\n            this.drawGroupedFocusGraphInstance(canvas, group.overviewGroup.timeRangeIndexList, pointWidth, metricList, metricIndexList);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, valueIndexList, pointWidth, metricList, metricIndexList) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList) {\n        metricList.forEach((metric, metricListIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var panelMetric = this.panel.metricList[metricIndexList[metricListIndex]];\n                context.fillStyle = panelMetric.colorList[layerIndex];\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricListIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != null) {\n                        x = pointWidth * positionIndex;\n                        this.moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n            var metricList = [instance.metricList[this.overviewModel.selectedMetricIndex]];\n            var metricIndexList = [this.overviewModel.selectedMetricIndex];\n\n            if (instance.showAllMetrics) {\n                metricList = instance.metricList;\n                metricIndexList = Array.from(Array(instance.metricList.length).keys());\n            }\n\n            this.drawFocusGraphInstance(context, valueIndexList, this.focusModel.pointWidth, metricList, metricIndexList);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(x, y);\n        } else {\n            // move to previous position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(previousX, y);\n            }\n\n            var height;\n\n            if (value >= layer.range) {\n                height = this.config.focusGraph.metricMaxHeight;\n            } else {\n                height = value * this.config.focusGraph.metricMaxHeight / layer.range;\n            }\n\n            height = Math.max(5, height);\n            context.lineTo(x, y - height);\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    showHideAllMetrics() {\n        this.drawFocusGraph(false);\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    showHideOverlapDetails() {\n        this.showOverlapDetails = !this.showOverlapDetails;\n\n        if (this.showOverlapDetails) {\n            this.drawOverlapDetails();\n        }\n    }\n\n    drawOverlapDetails() {\n        this.$timeout(() => {\n            this.overlapGraphHeight = this.focusModel.groupList.length * this.config.focusGraph.metricMaxHeight +\n                (this.focusModel.groupList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n            this.scope.$apply();\n\n            var metricIndexList = [];\n\n            this.focusModel.groupList.forEach((group) => {\n                metricIndexList.push(group.overviewGroup.metricIndex);\n            });\n\n            this.focusModel.overlappingList.forEach((instance, instanceIndex) => {\n                this.drawOverlapInstance(instance, instanceIndex, metricIndexList);\n            });\n        });\n    }\n\n    drawOverlapInstance(instance, instanceIndex, metricIndexList) {\n        var canvas = this.getElementByID(\"focusGraphOverlapCanvas-\" + instanceIndex)\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n        var metricList = [];\n\n        metricIndexList.forEach((metricIndex) => {\n            metricList.push(instance.metricList[metricIndex]);\n        });\n\n        this.drawFocusGraphInstance(context, valueIndexList, this.focusModel.pointWidth, metricList, metricIndexList);\n    }\n\n    selectNode(index, evt) {\n        var instance = this.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}