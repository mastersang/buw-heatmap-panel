{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","relativeTimeThreshold","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","firstLoad","overviewModel","groupMarkerList","focusModel","groupList","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","events","on","onInitEditMode","bind","onDataReceived","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","startingGreyColor","endingGrayColor","sortOrder","intervalTimer","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseFocusGraphConfig","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","groupedPointHeight","ungroupedPointHeight","verticalMarginBetweenMetrics","horizontalMarginBetweenMetrics","marginBetweenGroups","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","focusAreaSize","xCrossSize","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","panelDefaults","predefinedMetricList","name","query","defaults","panel","predefinedMetricOptionList","forEach","metric","push","metricList","colorList","luminanceChange","i","changeColorLuminance","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","scope","elem","initialiseControl","initialiseUIElements","enumList","linkingMode","X_CROSS","NORMAL_CROSS","CHANGE_COLOR","groupingMode","SINGLE","MULTIPLE","isGrouped","initialiseOverviewCanvasCursor","overviewCursor","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","timeIndicatorCanvas","timeIndicatorContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","isUpdatingVariable","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","renderOverview","instance","values","value","parseFloat","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","total","getThresholdAverage","map","isBetween","target","start","end","sort","first","second","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","group","initialiseNewSingleAttributeGroups","instanceList","initialiseSingleAttributeGroupsColor","initialiseSingleAttributeInstanceGroupList","markerX","originalColor","groupIndex","initialiseNewMultiAttributeGroup","initialiseMultiAttributeGroupsColor","instanceMetric","groupMetric","colorStep","greyValue","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getDateString","toDateWidth","overviewWidth","getMaxMetricLength","overviewCanvasWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","largestGroup","groupCount","getMaxGroupCount","overviewHeight","metricWithMostGroups","font","metricWidth","overviewEndY","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","overviewInstanceHeight","drawGroupOverviewWrapper","metricIndexList","getAllMetricIndexList","drawGroupSize","drawMetricSeparator","drawOverviewInstance","y","pointHeight","marginBetweenInstances","endY","drawOverviewInstanceMetric","overviewMetric","previousMetric","startX","endX","maxGroupSizeBarLength","drawOverviewInstancePoints","pointIndex","x","getColorFromMap","fillStyle","fillRect","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","instanceIndex","drawGroupBars","drawGroupBarAtPosition","floor","format","drawFocusArea","changeGroupingSelection","isSelected","showFocus","evt","setOverviewMousePosition","hoveredGroup","hoveredMarker","found","checkMouseIsOnGroupAndSetGroupSelected","drawTimeIndicators","clearTimeIndicator","checkAndSetSelectedOverviewMarker","focusAreaIsFixed","drawFocus","mousePosition","getMousePos","rect","getBoundingClientRect","clientX","left","clientY","top","overviewIndex","selectedMetric","mousePositionXOffset","checkAndSetSelectedGroup","checkGroupIsSelected","markerIndex","marker","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","verticalLineX","addOrRemoveGroupToFocus","drawSelectedGroupsMarkers","startFocusMarkerInterval","stopInterval","drawFocusGraph","fixFocusArea","focusGroup","overviewGroup","remove","addGroupToFocus","overviewInstance","metricWithMostData","focusedIndexList","focusInstance","getFocusInstance","drawOverviewGroupMarker","focusGroupWithInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","marginBetweenMarkers","checkMouseIsInMetric","size","getFocusAreaSize","minimumTopY","focusStartY","drawFocusAreaAndLinkers","doDrawLinkers","offset","getFocusAreaOffset","focusStartX","strokeRect","drawLinkers","sourceMetricIndex","pixelData","getImageData","getLinkerTargetInstance","drawLinkersByMode","drawXCross","drawNormalCross","changeInstanceColor","centerX","leftStartX","rightStartX","bottomInstance","drawXCrossLine","drawLineOnFocusAreaCanvas","focusSize","centertX","distanceBetweenLines","leftLineX","rightLineX","topLineY","bottomLineY","drawNormalCrossLines","instancePoint","metricInstanceIndex","metricPoint","initialiseFocusGraphData","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","moveContextBasedOnValue","graphBeginX","rowCount","scrollTop","scrollByInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","updateVariable","variables","v","setOptionAsCurrent","text","variableUpdated","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment, { relativeTimeThreshold } from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n\n            // determines which the order of attributes to use for sorting\n            sortOrder: [0, 1, 2],\n            intervalTimer: 70\n        }\n\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 15,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            groupedPointHeight: 5,\n            ungroupedPointHeight: 1,\n            verticalMarginBetweenMetrics: 2,\n            horizontalMarginBetweenMetrics: 30,\n            marginBetweenGroups: 10,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 3,\n            ungroupedPointWidth: 20,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    query: \"100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    query: \"sum by (instance) (node_network_receive_bytes_total{job='node',device!~'^(?:docker|vboxnet|veth|lo).*'})\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    query: \"sum by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        _.defaults(this.panel, this.panelDefaults);\n        this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        this.panel.metricList.forEach((metric) => {\n            metric.colorList = [];\n            metric.colorList.push(metric.color);\n            var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n            for (var i = 0; i < this.config.colorCount - 1; ++i) {\n                var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n                metric.colorList.push(color);\n            }\n        });\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            linkingMode: {\n                X_CROSS: \"1\",\n                NORMAL_CROSS: \"2\",\n                CHANGE_COLOR: \"3\",\n            },\n\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            }\n        };\n\n        this.linkingMode = this.enumList.linkingMode.X_CROSS;\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.isGrouped = true;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // overview time indicator\n        this.timeIndicatorCanvas = this.getElementByID(\"timeIndicatorCanvas\");\n        this.timeIndicatorContext = this.getCanvasContext(this.timeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        if (this.isUpdatingVariable) {\n            this.isUpdatingVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.panel.metricList[index].colorList;\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < this.config.sortOrder.length; ++i) {\n                var metricIndex = this.config.sortOrder[i];\n\n                if (first.metricList[metricIndex].total != second.metricList[metricIndex].total) {\n                    return first.metricList[metricIndex].total - second.metricList[metricIndex].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.groupList = [];\n\n            this.overviewModel.data.forEach((instance) => {\n                var group = _.find(metric.groupList, (search) => {\n                    return instance.metricList[metricIndex].total == search.total;\n                });\n\n                if (!group) {\n                    group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                    metric.groupList.push(group);\n                }\n\n                group.instanceList.push(instance);\n            });\n\n            metric.groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            this.initialiseSingleAttributeGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleAttributeInstanceGroupList();\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleAttributeGroupsColor(metric, metricIndex) {\n        var luminanceChange = -this.config.maxLuminanceChange / metric.groupList.length;\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.groupList.forEach((group, groupIndex) => {\n            group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n        });\n    }\n\n    initialiseSingleAttributeInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                for (var i = 0; i < metric.groupList.length; ++i) {\n                    var group = metric.groupList[i];\n\n                    if (instance.metricList[metricIndex].total == group.total) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.groupList = [];\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(this.overviewModel.groupList, (search) => {\n                for (var i = 0; i < instance.metricList.length; ++i) {\n                    if (instance.metricList[i].total != search.metricList[i].total) {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                this.overviewModel.groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n\n        this.initialiseMultiAttributeGroupsColor();\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiAttributeGroupsColor() {\n        var colorStep = (this.config.startingGreyColor - this.config.endingGrayColor) / this.overviewModel.groupList.length;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var greyValue = Math.round(this.config.startingGreyColor - colorStep * groupIndex);\n            group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n        });\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocusArea();\n            this.drawOverview();\n        }\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n        this.scope.$apply();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        this.overviewModel.toDate = this.getDateString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        // total width of overiew graph (groupsize excluded)\n        this.overviewModel.overviewWidth = this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth +\n            this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            this.config.overview.horizontalMarginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleAttributeGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiAttributeGroupSize() * this.config.overview.multipleAttributeGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var largestGroup = _.maxBy(metric.groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n\n        this.overviewModel.groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metricWithMostGroups = _.maxBy(this.overviewModel.metricList, (metric) => {\n                return metric.groupList.length;\n            });\n\n            groupCount = metricWithMostGroups.groupList.length;\n        } else {\n            groupCount = this.overviewModel.groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.metricWidth = this.getMaxMetricLength() * this.config.overview.pointWidth;\n        this.overviewModel.overviewEndY = 0;\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                metric.groupList.forEach((group, groupIndex) => {\n                    this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n                });\n            });\n        } else {\n            this.overviewModel.groupList.forEach((group, groupIndex) => {\n                var metricIndexList = this.getAllMetricIndexList();\n                this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n            });\n        }\n\n        this.drawGroupSize();\n        this.drawMetricSeparator();\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight,\n            this.config.overview.marginBetweenGroups, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, index, pointHeight, marginBetweenInstances, metricIndexList) {\n        instance.y = this.overviewModel.overviewStartY + index * (pointHeight + marginBetweenInstances);\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstanceMetric(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstanceMetric(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            overviewMetric.startX = previousMetric.endX + this.config.overview.horizontalMarginBetweenMetrics;\n\n            if (this.isGrouped) {\n                overviewMetric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                    overviewMetric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                }\n            }\n        } else {\n            overviewMetric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n\n        this.drawOverviewInstancePoints(instance, metricIndex, overviewMetric, pointHeight);\n        overviewMetric.endX = overviewMetric.startX + this.overviewModel.metricWidth;\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, overviewMetric, pointHeight) {\n        var instanceMetric = instance.metricList[metricIndex];\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            point.x = overviewMetric.startX + pointIndex * this.config.overview.pointWidth;\n            point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n            this.overviewContext.fillStyle = point.color;\n            this.overviewContext.fillRect(point.x, instance.y, this.config.overview.pointWidth, pointHeight);\n        });\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n\n            metric.groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.overviewContext.fillStyle = \"black\";\n            this.overviewContext.fillText(\"Groups size\", (startX * 2 + maxGroupSizeBarLength - labelWidth) / 2, this.overviewModel.labelTextHeight);\n        });\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY +\n            groupIndex * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.horizontalMarginBetweenMetrics;\n        var maxEndX = 0;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", (startX + maxEndX - labelWidth) / 2, this.overviewModel.labelTextHeight);\n    }\n\n    drawMetricSeparator() {\n        this.overviewContext.strokeStyle = \"gray\";\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var x = metric.endX + this.config.overview.horizontalMarginBetweenMetrics / 2;\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n            }\n\n            this.overviewContext.beginPath();\n            this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n            this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n            this.overviewContext.stroke();\n            this.overviewContext.closePath();\n        }\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        this.drawGroupBars();\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.horizontalMarginBetweenMetrics / 2;\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.groupList.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x - Math.floor(this.config.overview.groupBarWidth / 2), y,\n                this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n        this.overviewContext.fillStyle = \"black\";\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var label = this.panel.metricList[i].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    getDateString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectLinker() {\n        this.drawFocusArea();\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.focusModel.groupList = [];\n\n        this.overviewModel.groupList.forEach((group) => {\n            group.isSelected = false;\n        })\n\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.groupList) {\n                metric.groupList.forEach((group) => {\n                    group.isSelected = false;\n                });\n            }\n        });\n\n        this.showFocus = false;\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    moveMouseOnOverview(evt) {\n        this.setOverviewMousePosition(evt);\n\n        if (this.isGrouped) {\n            this.initialiseOverviewCanvasCursor();\n            this.overviewModel.hoveredGroup = null;\n            this.overviewModel.hoveredMarker = null;\n            var found = this.checkMouseIsOnGroupAndSetGroupSelected();\n\n            if (found) {\n                this.drawTimeIndicators();\n            } else {\n                this.clearTimeIndicator();\n                this.checkAndSetSelectedOverviewMarker();\n            }\n        } else if (!this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    checkMouseIsOnGroupAndSetGroupSelected() {\n        for (var overviewIndex = 0; overviewIndex < this.overviewModel.metricList.length; ++overviewIndex) {\n            var metric = this.overviewModel.metricList[overviewIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX)) {\n                    this.overviewModel.selectedMetric = metric;\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n\n                    if (this.checkAndSetSelectedGroup(metric)) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    checkAndSetSelectedGroup(metric) {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            for (var i = 0; i < metric.groupList.length; ++i) {\n                var group = metric.groupList[i];\n\n                if (this.checkGroupIsSelected(group)) {\n                    return true;\n                }\n            }\n        } else {\n            for (var i = 0; i < this.overviewModel.groupList.length; ++i) {\n                var group = this.overviewModel.groupList[i];\n\n                if (this.checkGroupIsSelected(group)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsSelected(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.overviewCursor = \"pointer\";\n            return true;\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.overviewCursor = \"pointer\";\n                this.overviewModel.hoveredMarker = marker;\n                break;\n            }\n        }\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.timeIndicatorContext.strokeStyle = \"black\";\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.selectedMetric);\n        } else {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.drawTimeIndicatorWrapper(metric);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(metric) {\n        // horizontal line\n        var horizontalLineY = this.overviewModel.hoveredGroup.y - this.config.overview.marginBetweenGroups / 2;\n        this.timeIndicatorContext.beginPath();\n        this.timeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.timeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.timeIndicatorContext.stroke();\n        this.timeIndicatorContext.closePath();\n\n        // vertical line\n        var verticalLineX = metric.startX + this.overviewModel.mousePositionXOffset\n        this.timeIndicatorContext.beginPath();\n        this.timeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.timeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.timeIndicatorContext.stroke();\n        this.timeIndicatorContext.closePath();\n    }\n\n    clearTimeIndicator() {\n        this.timeIndicatorContext.clearRect(0, 0, this.timeIndicatorCanvas.width, this.timeIndicatorCanvas.height);\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var instanceMetric = this.overviewModel.hoveredGroup.instanceList[0].metricList[metricIndex];\n\n            for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                var point = instanceMetric.data[pointIndex];\n\n                if (this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth)) {\n                    this.timeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n                    this.timeIndicatorContext.fillStyle = \"black\";\n                    var date = this.getDateString(point.date * 1000);\n                    var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n                    var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n                    this.timeIndicatorContext.fillText(date, x, y);\n                    return;\n                }\n            }\n        }\n    }\n\n    clickOnOverView(evt) {\n        this.setOverviewMousePosition(evt);\n\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus();\n                    this.drawSelectedGroupsMarkers();\n                } else if (this.overviewModel.hoveredMarker) {\n                    this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n                } else {\n                    this.stopInterval();\n                }\n\n                this.drawFocusGraph();\n            });\n        } else {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    addOrRemoveGroupToFocus() {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == this.overviewModel.hoveredGroup;\n        })\n\n        if (focusGroup) {\n            this.overviewModel.hoveredGroup.isSelected = false;\n\n            _.remove(this.focusModel.groupList, (group) => {\n                return group.overviewGroup == this.overviewModel.hoveredGroup;\n            });\n        } else {\n            this.overviewModel.hoveredGroup.isSelected = true;\n            this.addGroupToFocus();\n        }\n\n        this.scope.$apply();\n    }\n\n    addGroupToFocus() {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = this.overviewModel.hoveredGroup;\n\n        this.overviewModel.hoveredGroup.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.clearFocusArea();\n        this.overviewModel.groupMarkerList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, [metric])\n                });\n            });\n        } else {\n            this.overviewModel.groupList.forEach((group) => {\n                this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n            });\n        }\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = 0;\n                });\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            // only update focus graph if mouse is pointing on one of metric overview graphs\n            if (this.checkMouseIsInMetric(metric)) {\n                this.drawFocusGraph();\n                break;\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            this.drawFocusAreaAndLinkers(true);\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    drawFocusAreaAndLinkers(doDrawLinkers) {\n        var size = this.getFocusAreaSize();\n        var offset = this.getFocusAreaOffset();\n\n        if (offset >= 0) {\n            if (doDrawLinkers) {\n                this.clearFocusArea();\n            }\n\n            this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.focusStartX = metric.startX + offset;\n                this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n            });\n\n            if (doDrawLinkers) {\n                this.drawLinkers();\n            }\n        }\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (this.checkMouseIsInMetric(metric)) {\n                this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                this.focusModel.sourceMetricIndex = i;\n\n                return Math.min(Math.max(metric.startX,\n                    this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                    metric.endX - this.getFocusAreaSize()) - metric.startX;\n            }\n        }\n    }\n\n    drawLinkers() {\n        var pixelData = this.overviewContext.getImageData(this.overviewModel.mousePosition.x, this.overviewModel.mousePosition.y, 1, 1).data;\n        this.focusAreaContext.strokeStyle = \"rgb(\" + pixelData[0] + \",\" + pixelData[1] + \",\" + pixelData[2] + \")\";\n        var instance = this.getLinkerTargetInstance();\n        instance = null; // temp flag to prevent drawing linkers\n\n        if (instance) {\n            this.overviewModel.metricList.forEach((metric, index) => {\n                if (!this.checkMouseIsInMetric(metric)) {\n                    this.drawLinkersByMode(metric, instance, index);\n                }\n            });\n        }\n    }\n\n    getLinkerTargetInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    drawLinkersByMode(metric, instance, index) {\n        switch (this.linkingMode) {\n            case this.enumList.linkingMode.X_CROSS:\n                this.drawXCross(metric, instance);\n                break;\n\n            case this.enumList.linkingMode.NORMAL_CROSS:\n                this.drawNormalCross(metric, instance);\n                break;\n\n            case this.enumList.linkingMode.CHANGE_COLOR:\n                this.changeInstanceColor(metric, instance, index);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    drawXCross(metric, instance) {\n        var centerX = metric.startX + this.overviewModel.mousePositionXOffset;\n        var leftStartX = centerX - this.config.focusArea.xCrossSize;\n        var rightStartX = centerX + this.config.overview.pointWidth;\n        var bottomInstance = instance.y + this.config.overview.ungroupedPointHeight;\n\n        this.drawXCrossLine(leftStartX, instance.y - this.config.focusArea.xCrossSize, instance.y);\n        this.drawXCrossLine(rightStartX, instance.y, instance.y - this.config.focusArea.xCrossSize);\n        this.drawXCrossLine(leftStartX, bottomInstance + this.config.focusArea.xCrossSize, bottomInstance);\n        this.drawXCrossLine(rightStartX, bottomInstance, bottomInstance + this.config.focusArea.xCrossSize);\n    }\n\n    drawXCrossLine(startX, startY, endY) {\n        this.drawLineOnFocusAreaCanvas(startX, startY, startX + this.config.focusArea.xCrossSize, endY);\n    }\n\n    drawLineOnFocusAreaCanvas(startX, startY, endX, endY) {\n        this.focusAreaContext.beginPath();\n        this.focusAreaContext.moveTo(startX, startY);\n        this.focusAreaContext.lineTo(endX, endY);\n        this.focusAreaContext.stroke();\n        this.focusAreaContext.closePath();\n    }\n\n    drawNormalCross(metric, instance) {\n        var focusSize = this.getFocusAreaSize();\n        var centertX = metric.startX + this.overviewModel.mousePositionXOffset;\n        var endX = metric.focusStartX + focusSize;\n        var distanceBetweenLines = this.config.overview.pointWidth * 2;\n        var leftLineX = centertX - distanceBetweenLines;\n        var rightLineX = centertX + distanceBetweenLines;\n        var topLineY = instance.y - distanceBetweenLines;\n        var bottomLineY = instance.y + distanceBetweenLines;\n        var endY = this.focusModel.focusStartY + focusSize;\n\n        this.drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY);\n    }\n\n    drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY) {\n        // top horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, topLineY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, topLineY, endX, topLineY);\n\n        // botton horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, bottomLineY, leftLineX, bottomLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, endX, bottomLineY);\n\n        // left vertical\n        this.drawLineOnFocusAreaCanvas(leftLineX, this.focusModel.focusStartY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(leftLineX, bottomLineY, leftLineX, endY);\n\n        // right vertical\n        this.drawLineOnFocusAreaCanvas(rightLineX, this.focusModel.focusStartY, rightLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, rightLineX, endY);\n    }\n\n    changeInstanceColor(metric, instance, index) {\n        if (index == 0) {\n            this.clearFocusArea();\n        }\n\n        instance.metricList[index].data.forEach((instancePoint, pointIndex) => {\n            var colorList = this.panel.metricList[this.focusModel.sourceMetricIndex].colorList;\n            var colorMap = this.getColorMap(metric, colorList);\n            this.focusAreaContext.fillStyle = this.getColorFromMap(instancePoint.value, colorMap);\n            this.focusAreaContext.fillRect(instancePoint.x, instance.y, this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n\n            if (instancePoint.x == metric.startX + this.overviewModel.mousePositionXOffset) {\n                // vertical line\n                metric.data.forEach((metricInstance, metricInstanceIndex) => {\n                    var metricPoint = metricInstance.values[pointIndex];\n                    var value = metricPoint ? metricPoint[1] : 0\n                    this.focusAreaContext.fillStyle = this.getColorFromMap(value, colorMap);\n                    this.focusAreaContext.fillRect(instancePoint.x, this.overviewModel.data[metricInstanceIndex].y,\n                        this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n                });\n            }\n        });\n\n        if (index == instance.metricList.length - 1) {\n            this.drawFocusAreaAndLinkers(false);\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.panel.metricList[metricIndex].colorList.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.getDateString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.getDateString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context);\n    }\n\n    drawFocusGraphInstance(instance, context) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                layer.valueList.forEach((value, valueIndex) => {\n                    x = this.getFocusGraphPointWidth() * valueIndex;\n                    this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                        this.overviewModel.metricList[metricIndex].layerRange);\n                    previousX = x;\n                    previousValue = value;\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context);\n        });\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getLinkerTargetInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n            });\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectNode(instance) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        this.updateVariable(instance);\n    }\n\n    updateVariable(instance) {\n        this.variableSrv.variables.forEach((v) => {\n            if (v.name == \"node\") {\n                this.variableSrv.setOptionAsCurrent(v, {\n                    text: instance.instance,\n                    value: instance.instance\n                });\n\n                this.isUpdatingVariable = true;\n                this.variableSrv.variableUpdated(v, true);\n            }\n        });\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}