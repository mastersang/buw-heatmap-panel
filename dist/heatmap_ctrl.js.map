{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","scope","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupSizeBarWidth","pieRadius","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","groupSizeColor","overlapColor","selectedInstancesForFocusOffset","focusArea","color","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLength","barWidth","minimumBarHeight","marginBetweenSliderAndChart","thresholdBarLength","focusGraph","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","metricMinHeight","marginBetweenMetrics","maxWidth","markerSize","marginBetweenMarkers","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","initialiseColorListByMetric","colorList","luminanceChange","i","changeColorLuminance","tab","overviewModel","histogramModel","focusAreaModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","groupSizeChart","HORIZONTAL_BAR","PIE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","isGrouped","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","tabList","currentTab","initialiseNewTab","convertDateToString","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","metricIndex","point","checkAndSetOverviewMinMax","console","log","overviewMetric","panelMetric","initialiseColorMapByMetric","layerRange","colorMap","getColorMap","Map","threshold","average","set","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","sort","first","second","setHistogramMinMax","total","map","isBetween","target","start","end","initialiseSingleMetricGroups","initialiseMultiMetricGroups","initialiseSingleMetricGroupsByMetric","initialiseSingleMetricGroupsColor","initialiseSingleMetricInstanceGroupList","thresholdGroupListMap","populateSingleMetricGroupList","groupIndex","group","checkInstanceIsInGroup","initialiseNewSingleMetricGroup","instanceList","groupTotal","instanceTotal","thresholdValue","markerX","originalColor","getCurrentSingleMetricGroupList","populateMultiMetricGroupList","initialiseMultiMetricGroupsColor","findExistingMultiMetricGroup","initialiseNewMultiMetricGroup","instanceMetric","groupMetric","greyValue","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","getThresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","toDateWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiMetricGroupSize","largestGroup","getCurrentMultiMetricGroupList","groupCount","getMaxGroupCount","instanceHeight","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","drawSingeMetricGroupedOverview","drawMultiMetricGroupedOverview","drawGroupSize","drawGroupedOverviewWrapper","drawMetricSeparator","metricIndexList","y","drawOverviewInstance","pointHeight","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","groupSizeLabelWidth","drawSingleMetricGroupSize","drawMultipleMetricGroupSize","drawSingleMetricBarGroupSize","drawSingleMetricPieGroupSize","drawGroupSizeLabel","drawBarGroupSizeWrapper","overlapCount","beginPath","moveTo","lineTo","closePath","fill","startAngle","PI","drawPieGroupSizeWrapper","size","endAngle","arc","fillText","maxEndX","strokeStyle","stroke","instanceIndex","getMetricDarkestColor","format","showHistogram","changedColorThreshold","temp","addOrRemoveGroupToFocus","overviewGroup","drawFocusGraph","removeExisting","focusGroup","isSelected","remove","removeExistingFocusGroupInSameMetric","addGroupToFocus","setShowMergeGroupsButton","newGroupList","existingGroup","showMergeSelectedGroups","setShowMergeGroupsButtonWrapper","selectedGroupCount","drawOverviewGroupMarker","marker","startY","initialiseData","initialiseFocusGraphData","showFocus","setFocusGraphCanvasHeight","pointCount","focusedIndexList","focusGraphWidth","floor","focusGraphRow","setFocusFromAndToDate","positionFocusFromAndToDate","focusRowHeight","offsetHeight","drawFocusGraphData","autoSrollFocusGraph","showAllMetrics","focusGraphHeight","evt","mousePosition","getMousePos","isSelectingBar","setNewThresholdValue","checkAndSetSelectedHistogramThresholdBar","horizontalAxisStartX","selectedBar","drawHistogram","histogramCursor","topY","sliderY","bottomY","thresholdBarList","bar","leftX","rightX","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","deselectSingleMetricGroups","deselectMultiMetricGroups","originalGroupList","previousGroupThreshold","timeRangeIndexList","mergeSingleMetricGroups","mergeMultipleMetricGroups","mergeFocusGroupList","initialiseGroupsOverlapCount","drawSelectedGroupsMarkers","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","getCopyOfGroup","newGroup","oldFocusGroupList","mergeFocusGroupListWrapper","setMainMetricIndexAfterMerging","mainMetricIndex","selectedMetricIndex","overviewInstance","metricWithMostData","focusInstance","getFocusInstance","oldGroup","selectedMetricIndexList","checkOverlappingGroups","check","overlappingInstance","timeRangePositionMap","isSelectingMetricLabel","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","focusAreaStartPoint","focusInArea","firstMetric","isDrawingFocusArea","histogramMetric","$watch","newValue","oldValue","drawHistogramAxes","drawHistogramMaxValueAndOccurence","drawHistogramBars","drawHistogramThresholdSlider","verticalAxisStartY","lineWdith","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","verticalLabelWidth","maxOccurenceWidth","horizontalAxisY","horizontalAxisEndX","labelX","labelY","occurenceLabelY","maxValueWidth","valueLabelY","originX","occurenceStep","minHeight","drawHistogramSliderLine","drawHistogramThresholdBars","thresholdBarY","setOverviewMousePosition","setSelectedMetricIndex","setOverviewCursorToPointer","deselectMetricLabel","handleMouseMoveOnGroupedOverview","drawFocusArea","focusAreaIsFixed","drawFocus","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","checkMouseIsOnTimeRange","isHoveringOnTimeRange","setSelectedTimeIndexAndDrawTimeIndicators","markerIndex","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","setSelectedTimeIndex","drawTimeIndicators","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","mouseIsInsideTimeRange","hoveredTimeRangeGroup","position","timeRangeMetricIndex","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","initialiseFocusAreaPoints","drawFocusAreaSquare","strokeRect","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","focusGroupWithInterval","stopInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","updatedSelectedGroups","drawFocusAfterUpdatingSelectedGroups","initialiseOverlapList","drawOverlapDetails","overlappingList","firstGroup","overlappingGroup","showOverlapDetails","overlapGraphHeight","drawOverlapInstance","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","layerIndex","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","metricListIndex","previousX","previousValue","hasValue","valueIndex","positionIndex","moveFocusGraphContextBasedOnValue","getUngroupedFocusCanvas","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.scope = $scope;\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupSizeBarWidth: 1,\n            pieRadius: 8,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30,\n            groupSizeColor: \"lightgray\",\n            overlapColor: \"black\",\n            selectedInstancesForFocusOffset: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\"\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 20,\n            verticalAxisLength: 500,\n            barWidth: 5,\n            minimumBarHeight: 2,\n            marginBetweenSliderAndChart: 50,\n            thresholdBarLength: 10\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            groupedPointWidth: 5,\n            ungroupedPointWidth: 40,\n            metricMaxHeight: 20,\n            metricMinHeight: 5,\n            marginBetweenMetrics: 10,\n            maxWidth: 1200,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    //    query: \"node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        // this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                this.initialiseColorListByMetric(metric);\n            });\n        }\n    }\n\n    initialiseColorListByMetric(metric) {\n        // add lightest shade as defined by user\n        metric.colorList = [];\n        metric.colorList.push(metric.color);\n        var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n        // add the other shades\n        for (var i = 1; i < this.config.colorCount; ++i) {\n            var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n            metric.colorList.push(color);\n        }\n    }\n\n    initialiseNewTab() {\n        var tab = {};\n        tab.overviewModel = {};\n        tab.histogramModel = {};\n        tab.focusAreaModel = {};\n        tab.overviewModel.groupMarkerList = [];\n        tab.focusModel = {};\n        tab.focusModel.groupList = [];\n        return tab;\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            groupSizeChart: {\n                HORIZONTAL_BAR: \"1\",\n                PIE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupSizeChart = this.enumList.groupSizeChart.HORIZONTAL_BAR;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = this.isGrouped ? \"default\" : \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n            this.scope.$apply();\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.tabList = [];\n            this.currentTab = this.initialiseNewTab();\n            this.tabList.push(this.currentTab);\n            this.currentTab.fromDate = this.convertDateToString(this.fromDate * 1000);\n            this.currentTab.toDate = this.convertDateToString(this.toDate * 1000);\n            this.currentTab.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.currentTab.overviewModel.metricList.push(null);\n            });\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.currentTab.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.currentTab.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.currentTab.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n\n                if (metricIndex == 0 && metric.max > 100) {\n                    console.log(instance.metric.instance);\n                }\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.currentTab.overviewModel.metricList.forEach((overviewMetric, index) => {\n            var panelMetric = this.panel.metricList[index];\n            this.initialiseColorMapByMetric(overviewMetric, panelMetric);\n        });\n    }\n\n    initialiseColorMapByMetric(overviewMetric, panelMetric) {\n        var colorList = panelMetric.colorList;\n        overviewMetric.layerRange = Math.round(overviewMetric.max / colorList.length);\n\n        // map a range of values to a color\n        overviewMetric.colorMap = this.getColorMap(overviewMetric, colorList);\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.currentTab.overviewModel.data = [];\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.currentTab.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[0] - second[0];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.currentTab.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    //    metric.total += this.getThresholdAverage(point.value, this.currentTab.overviewModel.metricList[metricIndex].colorMap);\n                    metric.total += point.value;\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.currentTab.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleMetricGroups();\n        this.initialiseMultiMetricGroups();\n    }\n\n    initialiseSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseSingleMetricGroupsByMetric(metric, metricIndex);\n            this.initialiseSingleMetricGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleMetricInstanceGroupList();\n    }\n\n    initialiseSingleMetricGroupsByMetric(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var group = groupList[groupIndex];\n                group.name = this.panel.metricList[metricIndex].name + \" group \" + (groupIndex + 1);\n            }\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold) {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                return this.checkInstanceIsInGroup(search.total, instance.metricList[metricIndex].total, groupingThreshold);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleMetricGroup(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceIsInGroup(groupTotal, instanceTotal, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n        var min = groupTotal * (1 - thresholdValue);\n        var max = groupTotal * (1 + thresholdValue);\n        return this.isBetween(instanceTotal, min, max);\n    }\n\n    initialiseNewSingleMetricGroup(instance, metricIndex) {\n        var group = {};\n        group.metricIndex = metricIndex;\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleMetricGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleMetricInstanceGroupList() {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                for (var i = 0; i < groupList.length; ++i) {\n                    var group = groupList[i];\n\n                    if (this.checkInstanceIsInGroup(group.total, instance.metricList[metricIndex].total, this.groupingThreshold)) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiMetricGroups() {\n        this.currentTab.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiMetricGroupList(groupList, groupingThreshold);\n            this.currentTab.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiMetricGroupsColor();\n    }\n\n    populateMultiMetricGroupList(groupList, groupingThreshold) {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiMetricGroup(groupList, instance, groupingThreshold);\n\n            if (!group) {\n                group = this.initialiseNewMultiMetricGroup(instance, groupList);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiMetricGroup(groupList, instance, groupingThreshold) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n\n                if (!this.checkInstanceIsInGroup(metric.total, instance.metricList[i].total, groupingThreshold)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiMetricGroup(instance, groupList) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.name = \"Group \" + (groupList.length + 1);\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiMetricGroupsColor() {\n        this.currentTab.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.currentTab.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.currentTab.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.currentTab.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        this.clearFocusArea();\n        this.drawOverview();\n    }\n\n    clearFocusArea() {\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        if (!this.isLoading) {\n            this.$timeout(() => {\n                this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n                this.setOverviewCanvasSize();\n                this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n                this.scope.$apply();\n                this.drawOverviewData();\n            });\n        }\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.currentTab.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.currentTab.overviewModel.overviewStartY = this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.currentTab.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.currentTab.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.currentTab.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                this.currentTab.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.currentTab.overviewModel.overviewWidth += this.getMaxMetricLength() * this.currentTab.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.currentTab.overviewModel.overviewWidth;\n        this.currentTab.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.currentTab.overviewModel.toDateWidth = this.overviewContext.measureText(this.currentTab.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.currentTab.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.currentTab.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.currentTab.overviewModel.metricList.length;\n\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n            });\n\n            /*\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.currentTab.overviewModel.metricList.forEach((metric) => {\n                    this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n                });\n            } else {\n                this.overviewCanvasWidth += this.currentTab.overviewModel.metricList.length + this.config.overview.pieRadius * 2;\n            }*/\n        } else {\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                    this.getMaxMultiMetricGroupSize() * this.config.overview.groupSizeBarWidth;\n            } else {\n                this.overviewCanvasWidth += this.config.overview.pieRadius * 2;\n            }\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.groupSizeBarWidth;\n    }\n\n    getCurrentSingleMetricGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiMetricGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiMetricGroupList() {\n        return this.currentTab.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.currentTab.overviewModel.instanceHeight = this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups;\n            } else {\n                this.currentTab.overviewModel.instanceHeight = this.config.overview.pieRadius * 2 + this.config.overview.marginBetweenGroups;\n            }\n\n            this.currentTab.overviewModel.overviewHeight = groupCount * this.currentTab.overviewModel.instanceHeight;\n        } else {\n            this.currentTab.overviewModel.instanceHeight = this.config.overview.ungroupedPointHeight;\n            this.currentTab.overviewModel.overviewHeight = this.currentTab.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.currentTab.overviewModel.overviewHeight +\n            (this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.currentTab.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.currentTab.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    metric.startX += this.config.overview.marginBetweenMetricAndGroupSize;\n\n                    if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                        var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                        metric.startX += maxGroupSizeBarLength;\n                    } else {\n                        metric.startX += this.config.overview.pieRadius * 2;\n                    }\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeMetricGroupedOverview();\n        } else {\n            this.drawMultiMetricGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeMetricGroupedOverview() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupedOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            if (metricIndex < this.currentTab.overviewModel.metricList.length - 1) {\n                this.drawMetricSeparator(metric);\n            }\n        });\n    }\n\n    drawGroupedOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        instance.y = this.currentTab.overviewModel.overviewStartY + groupIndex * this.currentTab.overviewModel.instanceHeight;\n\n        if (this.groupSizeChart == this.enumList.groupSizeChart.PIE) {\n            instance.y += this.currentTab.overviewModel.instanceHeight / 2;\n        }\n\n        this.drawOverviewInstance(instance, this.config.overview.groupedPointHeight, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, pointHeight, metricIndexList) {\n        var endY = instance.y + this.currentTab.overviewModel.instanceHeight;\n\n        if (endY > this.currentTab.overviewModel.overviewEndY) {\n            this.currentTab.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex, this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.currentTab.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result = null;\n\n        map.forEach((color, threshold) => {\n            if (!result && this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiMetricGroupedOverview() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupedOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.currentTab.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        this.currentTab.overviewModel.groupSizeLabelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleMetricGroupSize();\n        } else {\n            this.drawMultipleMetricGroupSize();\n        }\n    }\n\n    drawSingleMetricGroupSize() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                    this.drawSingleMetricBarGroupSize(group, startX);\n                } else {\n                    this.drawSingleMetricPieGroupSize(group, startX);\n                }\n            });\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n            } else {\n                this.drawGroupSizeLabel((startX * 2 + this.config.overview.pieRadius - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n            }\n        });\n    }\n\n    drawSingleMetricBarGroupSize(group, startX) {\n        this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n        this.drawBarGroupSizeWrapper(group, startX, group.overlapCount, this.config.overview.overlapColor);\n    }\n\n    drawBarGroupSizeWrapper(group, startX, length, color) {\n        var endX = startX + length * this.config.overview.groupSizeBarWidth;\n        var endY = group.y + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, group.y);\n        this.overviewContext.lineTo(endX, group.y);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawSingleMetricPieGroupSize(group, startX) {\n        var startAngle = -0.5 * Math.PI;\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.instanceList.length, this.config.overview.groupSizeColor);\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.overlapCount, this.config.overview.overlapColor);\n    }\n\n    drawPieGroupSizeWrapper(group, startX, startAngle, size, color) {\n        var x = startX + this.config.overview.pieRadius;\n        var endAngle = startAngle + size * 2 * Math.PI / 360;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, group.y);\n        this.overviewContext.arc(x, group.y, this.config.overview.pieRadius, startAngle, endAngle);\n        this.overviewContext.lineTo(x, group.y);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endAngle;\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.currentTab.overviewModel.labelTextHeight);\n    }\n\n    drawMultipleMetricGroupSize() {\n        var startX = this.currentTab.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize +\n            this.currentTab.overviewModel.groupSizeLabelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            x += this.config.overview.marginBetweenMetricAndGroupSize;\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                x += maxGroupSizeBarLength;\n            } else {\n                x += this.config.overview.pieRadius * 2;\n            }\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.currentTab.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.currentTab.overviewModel.overviewStartY + this.currentTab.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.currentTab.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            instance.y = this.currentTab.overviewModel.overviewStartY + instanceIndex * this.currentTab.overviewModel.instanceHeight;\n            this.drawOverviewInstance(instance, this.currentTab.overviewModel.instanceHeight, metricIndexList);\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.currentTab.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.currentTab.overviewModel.labelTextHeight);\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.currentTab.overviewModel.overviewStartY + this.currentTab.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.currentTab.overviewModel.toDate, metric.endX - this.currentTab.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    closeHistogram() {\n        this.showHistogram = false;\n\n        if (this.changedColorThreshold) {\n            this.changedColorThreshold = false;\n            this.drawOverview();\n\n            if (this.isGrouped) {\n                var temp = this.currentTab.focusModel.groupList;\n                this.currentTab.focusModel.groupList = [];\n\n                temp.forEach((group) => {\n                    this.addOrRemoveGroupToFocus(group.overviewGroup, true);\n                });\n\n                this.drawFocusGraph();\n            } else {\n                this.drawFocusGraph();\n            }\n        }\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.currentTab.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        });\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                // deselect group from focus\n                _.remove(this.currentTab.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.removeExistingFocusGroupInSameMetric(group);\n            }\n\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    removeExistingFocusGroupInSameMetric(group) {\n        var newGroupList = [];\n\n        this.currentTab.focusModel.groupList.forEach((existingGroup) => {\n            if (existingGroup.overviewGroup.metricIndex == group.metricIndex) {\n                existingGroup.overviewGroup.isSelected = false;\n            } else {\n                newGroupList.push(existingGroup);\n            }\n        });\n\n        this.currentTab.focusModel.groupList = newGroupList;\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.currentTab.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.currentTab.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.currentTab.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.currentTab.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    drawFocusGraph(initialiseData) {\n        if (!this.isGrouped && initialiseData) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.currentTab.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.currentTab.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.setFocusGraphCanvasHeight();\n                var pointCount = this.currentTab.focusModel.focusedIndexList.length - 1;\n                var pointWidth = this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n                this.focusGraphWidth = Math.min(this.config.focusGraph.maxWidth, pointCount * pointWidth);\n                this.scope.$apply();\n                this.currentTab.focusModel.pointWidth = Math.max(1, Math.floor(this.focusGraphWidth / pointCount));\n\n                this.$timeout(() => {\n                    var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                    if (focusGraphRow) {\n                        this.setFocusFromAndToDate();\n\n                        if (!this.isGrouped) {\n                            this.positionFocusFromAndToDate();\n                        }\n\n                        this.currentTab.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                        this.drawFocusGraphData();\n                        this.autoSrollFocusGraph();\n                    }\n                });\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    setFocusGraphCanvasHeight() {\n        if (this.isGrouped) {\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                if (group.showAllMetrics) {\n                    group.focusGraphHeight = this.currentTab.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.currentTab.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    group.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        } else {\n            this.currentTab.focusModel.data.forEach((instance) => {\n                if (instance.showAllMetrics) {\n                    instance.focusGraphHeight = this.currentTab.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.currentTab.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    instance.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        }\n    }\n\n    moveMouseOnHistogram(evt) {\n        this.currentTab.histogramModel.mousePosition = this.getMousePos(evt, this.histogramCanvas);\n\n        if (this.currentTab.histogramModel.isSelectingBar) {\n            this.setNewThresholdValue();\n        } else {\n            this.checkAndSetSelectedHistogramThresholdBar();\n        }\n    }\n\n    setNewThresholdValue() {\n        this.changedColorThreshold = true;\n        var value = Math.round((this.currentTab.histogramModel.mousePosition.x - this.currentTab.histogramModel.horizontalAxisStartX) / this.config.histogram.barWidth);\n        value = Math.max(value, 1);\n        value = Math.min(value, this.currentTab.histogramModel.metric.max - 1);\n\n        this.currentTab.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            if (threshold != this.currentTab.histogramModel.selectedBar.threshold) {\n                if (value >= this.currentTab.histogramModel.selectedBar.threshold.max) {\n                    // move right\n                    if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                        value = Math.min(value, threshold.max - 1);\n                        threshold.min = value;\n                    }\n                } else {\n                    // move left\n                    if (this.currentTab.histogramModel.selectedBar.threshold.min == 0) {\n                        // left most threshold\n                        if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    } else {\n                        // left threshold\n                        if (threshold.max == this.currentTab.histogramModel.selectedBar.threshold.min) {\n                            value = Math.max(value, threshold.max + 1);\n                        }\n\n                        // right threshold\n                        if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    }\n                }\n            }\n        });\n\n        this.currentTab.histogramModel.selectedBar.threshold.max = value;\n        this.drawHistogram();\n    }\n\n    checkAndSetSelectedHistogramThresholdBar() {\n        this.histogramCursor = \"default\";\n        this.currentTab.histogramModel.selectedBar = null;\n        var topY = this.currentTab.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        var bottomY = this.currentTab.histogramModel.sliderY + this.config.histogram.thresholdBarLength / 2;\n\n        if (this.isBetween(this.currentTab.histogramModel.mousePosition.y, topY, bottomY)) {\n            for (var i = 0; i < this.currentTab.histogramModel.thresholdBarList.length; ++i) {\n                var bar = this.currentTab.histogramModel.thresholdBarList[i];\n                var leftX = bar.x - this.config.histogram.barWidth;\n                var rightX = bar.x + this.config.histogram.barWidth;\n\n                if (this.isBetween(this.currentTab.histogramModel.mousePosition.x, leftX, rightX)) {\n                    this.histogramCursor = \"pointer\";\n                    this.currentTab.histogramModel.selectedBar = bar;\n                    break;\n                }\n            }\n        }\n    }\n\n    mouseDownOnHistogram() {\n        if (this.currentTab.histogramModel.selectedBar) {\n            this.currentTab.histogramModel.isSelectingBar = true;\n        }\n    }\n\n    mouseUpOnHistogram() {\n        this.currentTab.histogramModel.isSelectingBar = false;\n        this.currentTab.histogramModel.selectedBar = null;\n        this.histogramCursor = \"default\";\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        if (!this.isLoading) {\n            this.drawOverview();\n            this.clearFocusArea();\n            this.clearTimeIndicator();\n            this.deselectAllGroups();\n            this.showFocus = false;\n            this.showMergeSelectedGroups = false;\n        }\n    }\n\n    deselectAllGroups() {\n        this.currentTab.focusModel.groupList = [];\n        this.deselectSingleMetricGroups();\n        this.deselectMultiMetricGroups();\n    }\n\n    deselectSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                });\n            }\n        });\n    }\n\n    deselectMultiMetricGroups() {\n        if (this.currentTab.overviewModel.originalGroupList) {\n            this.currentTab.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.currentTab.overviewModel.originalGroupList);\n            this.currentTab.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.initialiseSingleMetricInstanceGroupList();\n        this.changeGroupingSelection();\n    }\n\n    selectGroupsizeChart() {\n        this.drawOverview();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    mergeSelectedGroups() {\n        this.showMergeSelectedGroups = false;\n\n        // store current threshold value to restore original groups when threshold is changed\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleMetricGroups();\n        } else {\n            this.mergeMultipleMetricGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.initialiseGroupsOverlapCount();\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n    }\n\n    mergeSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = this.getCopyOfGroup(group);\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    getCopyOfGroup(group) {\n        var newGroup = {};\n        newGroup.name = group.name;\n        newGroup.metricIndex = group.metricIndex;\n        newGroup.instanceList = group.instanceList;\n        newGroup.total = group.total;\n        newGroup.color = group.color;\n        newGroup.isSelected = group.isSelected;\n        newGroup.markerX = group.markerX;\n        newGroup.y = group.y;\n        return newGroup;\n    }\n\n    mergeFocusGroupList() {\n        var oldFocusGroupList = this.currentTab.focusModel.groupList;\n        this.currentTab.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiMetricGroupList());\n        }\n\n        this.setMainMetricIndexAfterMerging(oldFocusGroupList);\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n        focusGroup.mainMetricIndex = this.currentTab.overviewModel.selectedMetricIndex;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.currentTab.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.currentTab.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.currentTab.focusModel.groupList.push(focusGroup);\n    }\n\n    setMainMetricIndexAfterMerging(oldFocusGroupList) {\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            var oldGroup = _.find(oldFocusGroupList, (search) => {\n                return search.overviewGroup == group.overviewGroup;\n            });\n\n            if (oldGroup) {\n                group = oldGroup.mainMetricIndex;\n            }\n        });\n    }\n\n    initialiseGroupsOverlapCount() {\n        this.currentTab.overviewModel.selectedMetricIndexList = [];\n\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            this.currentTab.overviewModel.selectedMetricIndexList.push(group.overviewGroup.metricIndex);\n        });\n\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                group.overlapCount = 0;\n\n                if (this.currentTab.focusModel.groupList.length > 0 && !this.currentTab.overviewModel.selectedMetricIndexList.includes(metricIndex)) {\n                    this.checkOverlappingGroups(group);\n                }\n            });\n        });\n    }\n\n    checkOverlappingGroups(group) {\n        group.instanceList.forEach((instance) => {\n            var check = 0;\n\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                var overlappingInstance = _.find(group.overviewGroup.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++check;\n                }\n            });\n\n            if (check == this.currentTab.overviewModel.selectedMetricIndexList.length) {\n                ++group.overlapCount;\n            }\n        });\n    }\n\n    mergeMultipleMetricGroups() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        if (!this.currentTab.overviewModel.originalGroupList) {\n            this.currentTab.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.currentTab.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.currentTab.overviewModel.thresholdGroupListMap) {\n            this.currentTab.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.currentTab.overviewModel.metricList) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n        this.currentTab.overviewModel.timeRangePositionMap = new Map();\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n                this.currentTab.overviewModel.isSelectingTimeRange = true;\n                this.currentTab.overviewModel.timeRangeStartOffset = this.currentTab.overviewModel.mousePositionXOffset - this.currentTab.overviewModel.metricList[0].startX;\n                this.currentTab.overviewModel.timeRangeGroup = this.currentTab.overviewModel.hoveredGroup;\n            }\n        } else {\n            this.currentTab.overviewModel.focusAreaStartPoint = {};\n            this.focusInArea = false;\n            var firstMetric = this.currentTab.overviewModel.metricList[0];\n            this.currentTab.overviewModel.focusAreaStartPoint.x = Math.max(firstMetric.startX, this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX);\n            this.currentTab.overviewModel.focusAreaStartPoint.y = this.currentTab.overviewModel.mousePosition.y;\n            this.isDrawingFocusArea = true;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        this.currentTab.histogramModel.metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        this.histogramMetric = this.panel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n        this.scope.$watch(\"ctrl.histogramMetric.color\", (newValue, oldValue) => {\n            if (newValue != oldValue) {\n                this.initialiseColorListByMetric(this.histogramMetric);\n                this.initialiseColorMapByMetric(this.currentTab.histogramModel.metric, this.histogramMetric);\n                this.drawHistogram();\n            }\n        });\n\n        this.drawHistogramAxes();\n        this.drawHistogramMaxValueAndOccurence();\n        this.drawHistogramBars();\n        this.drawHistogramThresholdSlider();\n    }\n\n    drawHistogramAxes() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.currentTab.histogramModel.verticalAxisStartY = this.currentTab.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.lineWdith = 1;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"gray\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis();\n        this.drawHistogramHorizontalAxis();\n    }\n\n    drawHistogramVerticalAxis() {\n        var occurences = \"occurences\";\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(this.currentTab.histogramModel.metric.histogram.max).width;\n        this.currentTab.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(\"occurences\", this.currentTab.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.currentTab.overviewModel.labelTextHeight);\n        this.currentTab.histogramModel.horizontalAxisY = this.currentTab.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLength;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis() {\n        this.currentTab.histogramModel.horizontalAxisEndX = this.currentTab.histogramModel.horizontalAxisStartX +\n            this.config.histogram.barWidth * (this.currentTab.histogramModel.metric.max + 1);\n        var labelX = this.currentTab.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.currentTab.histogramModel.horizontalAxisY + this.currentTab.overviewModel.labelTextHeight / 2;\n        this.histogramCanvasContext.fillText(this.histogramMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisEndX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        var occurenceLabelY = this.currentTab.histogramModel.verticalAxisStartY + this.currentTab.overviewModel.labelTextHeight / 2\n        this.histogramCanvasContext.fillText(this.currentTab.histogramModel.metric.histogram.max, 0, occurenceLabelY);\n        var maxValueWidth = this.histogramCanvasContext.measureText(this.currentTab.histogramModel.metric.max).width;\n        var valueLabelY = this.currentTab.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.currentTab.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(this.currentTab.histogramModel.metric.max, this.currentTab.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.currentTab.histogramModel.horizontalAxisStartX - this.currentTab.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    drawHistogramBars() {\n        var occurenceStep = this.config.histogram.verticalAxisLength / this.currentTab.histogramModel.metric.histogram.max;\n\n        this.currentTab.histogramModel.metric.histogram.data.forEach((occurences, value) => {\n            this.histogramCanvasContext.fillStyle = this.getColorFromMap(value, this.currentTab.histogramModel.metric.colorMap);\n            var x = this.currentTab.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * value;\n            var y = this.currentTab.histogramModel.horizontalAxisY - occurenceStep * occurences;\n            var height = this.currentTab.histogramModel.horizontalAxisY - y;\n            var minHeight = this.config.histogram.minimumBarHeight;\n\n            if (height < minHeight) {\n                y = this.currentTab.histogramModel.horizontalAxisY - minHeight;\n                height = minHeight;\n            }\n\n            this.histogramCanvasContext.fillRect(x, y, this.config.histogram.barWidth, height);\n        });\n    }\n\n    drawHistogramThresholdSlider() {\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.drawHistogramSliderLine();\n        this.drawHistogramThresholdBars();\n    }\n\n    drawHistogramSliderLine() {\n        this.currentTab.histogramModel.sliderY = this.currentTab.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenSliderAndChart;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.sliderY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisEndX, this.currentTab.histogramModel.sliderY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramThresholdBars() {\n        var thresholdBarY = this.currentTab.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        this.currentTab.histogramModel.thresholdBarList = [];\n        var i = 0;\n\n        this.currentTab.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            var bar = {};\n            bar.threshold = threshold;\n            bar.x = this.currentTab.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * (threshold.max + 1);\n\n            // no need to draw slider bar for last threshold\n            if (i < this.currentTab.histogramModel.metric.colorMap.size - 1) {\n                this.histogramCanvasContext.beginPath();\n                this.histogramCanvasContext.moveTo(bar.x, thresholdBarY);\n                this.histogramCanvasContext.lineTo(bar.x, thresholdBarY + this.config.histogram.thresholdBarLength);\n                this.histogramCanvasContext.stroke();\n                this.histogramCanvasContext.closePath();\n                ++i;\n            }\n\n            this.currentTab.histogramModel.thresholdBarList.push(bar);\n        });\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.currentTab.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n                // check if mouse is on metric label\n                if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, 0, this.currentTab.overviewModel.overviewStartY)) {\n                    this.isSelectingMetricLabel = true;\n                    this.setOverviewCursorToPointer();\n                } else {\n                    this.deselectMetricLabel();\n                }\n            } else {\n                this.deselectMetricLabel();\n            }\n\n            if (this.isGrouped) {\n                this.handleMouseMoveOnGroupedOverview();\n            } else if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n                if (this.isDrawingFocusArea) {\n                    this.drawFocusArea();\n                } else if (!this.focusAreaIsFixed) {\n                    this.clearFocusArea();\n                    this.drawFocus();\n                }\n            }\n        } else {\n            this.deselectMetricLabel();\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.currentTab.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.currentTab.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.currentTab.overviewModel.selectedMetricIndex = metricIndex;\n                    // set x position of mouse per overview graph for easier manipulation with mouse positions\n                    this.currentTab.overviewModel.mousePositionXOffset = this.currentTab.overviewModel.mousePosition.x - metric.startX + this.currentTab.overviewModel.metricList[0].startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.currentTab.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    deselectMetricLabel() {\n        this.isSelectingMetricLabel = false;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.currentTab.overviewModel.hoveredGroup = null;\n        this.currentTab.overviewModel.hoveredMarker = null;\n\n        if (this.currentTab.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n            this.drawFocusGraph(false);\n        } else {\n            this.checkAndSetSelectedOverviewMarker();\n\n            if (this.currentTab.overviewModel.selectedMetricIndex >= 0) {\n                this.checkAndSetHoveredGroup();\n                this.checkMouseIsOnTimeRange();\n            }\n\n            if (this.currentTab.overviewModel.isHoveringOnTimeRange) {\n                this.overviewCursor = \"pointer\";\n            }\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                this.setSelectedTimeIndexAndDrawTimeIndicators();\n            }\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.currentTab.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.currentTab.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.currentTab.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.setOverviewCursorToPointer();\n                this.currentTab.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.currentTab.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndexAndDrawTimeIndicators() {\n        if (this.currentTab.overviewModel.hoveredGroup) {\n            if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                this.setSelectedTimeIndex();\n            }\n\n            this.drawTimeIndicators();\n        } else {\n            this.clearTimeIndicator();\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.currentTab.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.currentTab.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex]);\n        } else {\n            this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.currentTab.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.currentTab.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.currentTab.overviewModel.mousePositionXOffset - this.currentTab.overviewModel.metricList[0].startX;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.currentTab.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.currentTab.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleMetricGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.currentTab.overviewModel.overviewStartY + this.currentTab.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.currentTab.overviewModel.mousePosition.x - this.currentTab.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    checkMouseIsOnTimeRange() {\n        this.currentTab.overviewModel.isHoveringOnTimeRange = false;\n        this.currentTab.overviewModel.mouseIsInsideTimeRange = false;\n        this.currentTab.overviewModel.hoveredTimeRangeGroup = null;\n\n        this.currentTab.overviewModel.timeRangePositionMap.forEach((position, group) => {\n            if (this.currentTab.overviewModel.selectedMetricIndex == group.metricIndex &&\n                this.isBetween(this.currentTab.overviewModel.mousePosition.y, position.startY, group.y)) {\n                this.currentTab.overviewModel.isHoveringOnTimeRange = true;\n                this.currentTab.overviewModel.hoveredTimeRangeGroup = group;\n\n                if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, position.startX, position.endX)) {\n                    this.currentTab.overviewModel.mouseIsInsideTimeRange = true;\n                }\n            }\n        });\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.currentTab.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.currentTab.overviewModel.selectedMetricIndex;\n        this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.currentTab.overviewModel.timeRangeGroup.instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.currentTab.overviewModel.timeRangeStartOffset;\n        var firstMetric = this.currentTab.overviewModel.metricList[0];\n        var endX = overviewMetric.startX + this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.currentTab.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.currentTab.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.timeRangeMetricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiMetricGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n\n        var position = {\n            startX: startX,\n            endX: endX,\n            startY: startY\n        };\n\n        this.currentTab.overviewModel.timeRangePositionMap.set(group, position);\n    }\n\n    drawFocusArea() {\n        this.initialiseFocusAreaPoints();\n\n        if (this.currentTab.focusAreaModel.startX != this.currentTab.focusAreaModel.endX &&\n            this.currentTab.focusAreaModel.startY != this.currentTab.focusAreaModel.endY) {\n            this.focusInArea = true;\n            this.focusAreaIsFixed = false;\n            this.drawFocusAreaSquare();\n        } else {\n            this.focusInArea = false;\n        }\n    }\n\n    initialiseFocusAreaPoints() {\n        var firstMetric = this.currentTab.overviewModel.metricList[0];\n        this.currentTab.focusAreaModel.startX = this.currentTab.overviewModel.focusAreaStartPoint.x;\n        this.currentTab.focusAreaModel.endX = this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (this.currentTab.focusAreaModel.startX > this.currentTab.overviewModel.mousePositionXOffset) {\n            this.currentTab.focusAreaModel.startX = this.currentTab.overviewModel.mousePositionXOffset;\n            this.currentTab.focusAreaModel.endX = this.currentTab.overviewModel.focusAreaStartPoint.x;\n        }\n\n        this.currentTab.focusAreaModel.startY = this.currentTab.overviewModel.focusAreaStartPoint.y;\n        this.currentTab.focusAreaModel.endY = this.currentTab.overviewModel.mousePosition.y;\n\n        if (this.currentTab.focusAreaModel.startY > this.currentTab.overviewModel.mousePosition.y) {\n            this.currentTab.focusAreaModel.startY = this.currentTab.overviewModel.mousePosition.y;\n            this.currentTab.focusAreaModel.endY = this.currentTab.overviewModel.focusAreaStartPoint.y;\n        }\n\n        this.currentTab.focusAreaModel.startX = Math.max(this.currentTab.focusAreaModel.startX, firstMetric.startX);\n        this.currentTab.focusAreaModel.endX = Math.min(this.currentTab.focusAreaModel.endX, firstMetric.endX);\n        this.currentTab.focusAreaModel.startY = Math.max(this.currentTab.focusAreaModel.startY, this.currentTab.overviewModel.overviewStartY);\n        this.currentTab.focusAreaModel.endY = Math.min(this.currentTab.focusAreaModel.endY, this.currentTab.overviewModel.overviewEndY);\n    }\n\n    drawFocusAreaSquare() {\n        this.clearFocusArea();\n        this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n        var width = this.currentTab.focusAreaModel.endX - this.currentTab.focusAreaModel.startX;\n        var height = this.currentTab.focusAreaModel.endY - this.currentTab.focusAreaModel.startY;\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            this.focusAreaContext.strokeRect(metric.startX + this.currentTab.focusAreaModel.startX, this.currentTab.focusAreaModel.startY, width, height);\n        });\n    }\n\n    mouseUpOnOverView() {\n        if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.currentTab.overviewModel.hoveredMarker.group);\n            } else if (this.currentTab.overviewModel.isHoveringOnTimeRange) {\n                if (this.currentTab.overviewModel.mouseIsInsideTimeRange) {\n\n                } else {\n                    this.currentTab.overviewModel.hoveredTimeRangeGroup.timeRangeIndexList = null;\n                    this.drawSelectedTimeRanges();\n                    this.drawFocusGraph(false);\n                }\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph(false);\n            }\n        } else {\n            if (this.isDrawingFocusArea) {\n                this.drawFocusGraph(false);\n                this.isDrawingFocusArea = false;\n            }\n\n            this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.currentTab.focusModel.overviewGroupWithIntervalList) {\n                    this.currentTab.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.currentTab.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.currentTab.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.currentTab.overviewModel.timeRangeStartOffset == this.currentTab.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.drawFocusAfterUpdatingSelectedGroups();\n            }\n\n            this.currentTab.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    drawFocusAfterUpdatingSelectedGroups() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.initialiseGroupsOverlapCount();\n\n            if (this.currentTab.focusModel.groupList.length > 1) {\n                this.initialiseOverlapList();\n            }\n\n            this.drawOverview();\n        }\n\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n        this.drawOverlapDetails();\n    }\n\n    initialiseOverlapList() {\n        this.currentTab.focusModel.overlappingList = [];\n        var firstGroup = this.currentTab.focusModel.groupList[0];\n\n        firstGroup.instanceList.forEach((instance) => {\n            var check = 0;\n\n            for (var groupIndex = 1; groupIndex < this.currentTab.focusModel.groupList.length; ++groupIndex) {\n                var overlappingGroup = this.currentTab.focusModel.groupList[groupIndex];\n\n                var overlappingInstance = _.find(overlappingGroup.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++check;\n                }\n            }\n\n            if (check == this.currentTab.focusModel.groupList.length - 1) {\n                this.currentTab.focusModel.overlappingList.push(instance);\n            }\n        });\n    }\n\n    drawOverlapDetails() {\n        if (this.showOverlapDetails) {\n            this.$timeout(() => {\n                this.overlapGraphHeight = this.currentTab.focusModel.groupList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.currentTab.focusModel.groupList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.scope.$apply();\n\n                var metricIndexList = [];\n\n                this.currentTab.focusModel.groupList.forEach((group) => {\n                    metricIndexList.push(group.overviewGroup.metricIndex);\n                });\n\n                this.currentTab.focusModel.overlappingList.forEach((instance, instanceIndex) => {\n                    this.drawOverlapInstance(instance, instanceIndex, metricIndexList);\n                });\n            });\n        }\n    }\n\n    drawFocus() {\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            var metric = this.currentTab.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph(true);\n                    break;\n                }\n            }\n        }\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.currentTab.focusModel.data) {\n            this.currentTab.focusModel.data = [];\n        }\n\n        this.currentTab.focusModel.data.length = 0;\n        var topY = Math.max(0, this.currentTab.overviewModel.mousePosition.y - this.config.overview.selectedInstancesForFocusOffset);\n        var bottomY = Math.min(this.currentTab.overviewModel.overviewEndY, this.currentTab.overviewModel.mousePosition.y + this.config.overview.selectedInstancesForFocusOffset);\n\n        if (this.focusInArea) {\n            topY = this.currentTab.focusAreaModel.startY;\n            bottomY = this.currentTab.focusAreaModel.endY;\n        }\n\n        this.currentTab.overviewModel.data.forEach((overviewInstance) => {\n            if (this.isBetween(overviewInstance.y, topY, bottomY)) {\n                this.currentTab.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.currentTab.focusModel.focusedIndexList);\n                this.currentTab.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var metricIndex = 0; metricIndex < overviewInstance.metricList.length; ++metricIndex) {\n            var instanceMetric = overviewInstance.metricList[metricIndex];\n\n            if (instanceMetric.data.length > 0) {\n                var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n                var leftX = Math.max(overviewMetric.startX, this.currentTab.overviewModel.mousePositionXOffset - this.config.overview.selectedInstancesForFocusOffset);\n                var rightX = Math.min(overviewMetric.endX, this.currentTab.overviewModel.mousePositionXOffset + this.config.overview.selectedInstancesForFocusOffset);\n\n                if (this.focusInArea) {\n                    leftX = overviewMetric.startX + this.currentTab.focusAreaModel.startX;\n                    rightX = overviewMetric.startX + this.currentTab.focusAreaModel.endX;\n                }\n\n                instanceMetric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, leftX, rightX)) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((instanceMetric, metricIndex) => {\n            for (var i = 0; i < this.config.colorCount; ++i) {\n                var layer = {};\n                layer.valueList = [];\n                instanceMetric.layerList.push(layer);\n            }\n\n            var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            instanceMetric.data.forEach((point) => {\n                var value = point.value;\n                var colorList = this.panel.metricList[metricIndex].colorList;\n\n                instanceMetric.layerList.forEach((layer, layerIndex) => {\n                    overviewMetric.colorMap.forEach((color, threshold) => {\n                        if (color == colorList[layerIndex]) {\n                            layer.valueList.push(value > 0 ? value : 0);\n                            value -= threshold.max;\n                            layer.range = threshold.max - threshold.min;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.currentTab.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.currentTab.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.currentTab.focusModel.focusedIndexList[0];\n                var toIndex = this.currentTab.focusModel.focusedIndexList[this.currentTab.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        var toDateWidth = this.overviewContext.measureText(this.focusedToDate).width;\n        this.toDateLeftMargin = this.focusGraphWidth - (fromDateWidth + toDateWidth) / 2;\n    }\n\n    drawFocusGraphData() {\n        if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n            if (this.isGrouped) {\n                this.$timeout(() => {\n                    if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                        this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                            this.currentTab.overviewModel.metricList.length;\n                    } else {\n                        this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                    }\n\n                    this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                    this.scope.$apply();\n\n                    this.$timeout(() => {\n                        this.drawGroupFocusMarkers();\n                        this.drawGroupedFocusGraph();\n                    });\n                });\n            } else {\n                this.drawUngroupedFocusGraph();\n            }\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        var metricList = instance.metricList;\n        var metricIndexList = Array.from(Array(instance.metricList.length).keys())\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && !group.showAllMetrics) {\n            metricList = [instance.metricList[group.mainMetricIndex]];\n            metricIndexList = [group.mainMetricIndex];\n        }\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var pointWidth = Math.max(1, Math.floor(this.focusGraphWidth / group.overviewGroup.timeRangeIndexList.length));\n            this.drawGroupedFocusGraphInstance(canvas, group.overviewGroup.timeRangeIndexList, pointWidth, metricList, metricIndexList);\n        } else {\n            var valueList = Array.from(Array(maxMetricLength).keys());\n            this.drawGroupedFocusGraphInstance(canvas, valueList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, valueIndexList, pointWidth, metricList, metricIndexList) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList) {\n        metricList.forEach((metric, metricListIndex) => {\n\n            metric.layerList.forEach((layer, layerIndex) => {\n                var panelMetric = this.panel.metricList[metricIndexList[metricListIndex]];\n                context.fillStyle = panelMetric.colorList[layerIndex];\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricListIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n\n                // start drawing from bottom\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n                var hasValue = false;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != null) {\n                        x = pointWidth * positionIndex;\n                        this.moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX);\n                        previousX = x;\n                        previousValue = value;\n\n                        if (value > 0) {\n                            hasValue = true;\n                        }\n                    }\n                });\n\n                // draw straight line to base at the end\n                context.lineTo(x, y);\n\n                // move back to the starting point\n                context.lineTo(0, y);\n                context.closePath();\n\n                // only draw layer if it has some value or if it is the first layer\n                if (hasValue || layerIndex == 0) {\n                    context.fill();\n                }\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.currentTab.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n            var metricList = [instance.metricList[this.currentTab.overviewModel.selectedMetricIndex]];\n            var metricIndexList = [this.currentTab.overviewModel.selectedMetricIndex];\n\n            if (instance.showAllMetrics) {\n                metricList = instance.metricList;\n                metricIndexList = Array.from(Array(instance.metricList.length).keys());\n            }\n\n            this.drawFocusGraphInstance(context, valueIndexList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(x, y - this.config.focusGraph.metricMinHeight);\n        } else {\n            // move to previous position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(previousX, y - this.config.focusGraph.metricMinHeight);\n            }\n\n            var height;\n\n            if (value >= layer.range) {\n                height = this.config.focusGraph.metricMaxHeight;\n            } else {\n                height = value * this.config.focusGraph.metricMaxHeight / layer.range;\n            }\n\n            height = Math.max(this.config.focusGraph.metricMinHeight, height);\n            context.lineTo(x, y - height);\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredGroup && this.currentTab.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.currentTab.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.currentTab.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.currentTab.focusModel.data.length; ++i) {\n                var focusModelInstance = this.currentTab.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.currentTab.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.currentTab.overviewModel.data.length; ++i) {\n            var instance = this.currentTab.overviewModel.data[i];\n\n            if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.currentTab.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.currentTab.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.currentTab.focusModel.overviewGroupWithIntervalList) {\n                this.currentTab.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    showHideAllMetrics() {\n        this.drawFocusGraph(false);\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.currentTab.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    showHideOverlapDetails() {\n        this.showOverlapDetails = !this.showOverlapDetails;\n        this.drawOverlapDetails();\n    }\n\n    drawOverlapInstance(instance, instanceIndex, metricIndexList) {\n        var canvas = this.getElementByID(\"focusGraphOverlapCanvas-\" + instanceIndex)\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n        var metricList = [];\n\n        metricIndexList.forEach((metricIndex) => {\n            metricList.push(instance.metricList[metricIndex]);\n        });\n\n        this.drawFocusGraphInstance(context, valueIndexList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n    }\n\n    selectNode(index, evt) {\n        var instance = this.currentTab.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}