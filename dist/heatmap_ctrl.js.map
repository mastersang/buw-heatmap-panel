{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","variableSrv","timeSrv","events","on","onDataReceived","bind","overviewModel","focusModel","scope","initialiseConfig","config","apiAddress","dateFormat","marginBetweenOverviewAndFocus","metricLabelList","colors","sortOrder","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseFocusGraphConfig","overview","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","groupedPointHeight","ungroupedPointHeight","verticalMarginBetweenMetrics","horizontalMarginBetweenMetrics","marginBetweenInstances","startingGreyColor","endingGrayColor","groupBarWidth","groupSizeWidth","focusArea","color","size","xCrossSize","focusGraph","metricMaxHeight","marginBetweenMetrics","maxWidth","maxHeight","elem","initialiseControl","initialiseUIFunctions","initialiseUIElements","ctrl","enumList","linkingMode","X_CROSS","NORMAL_CROSS","CHANGE_COLOR","groupingMode","SINGLE","MULTIPLE","attributeForGrouping","isGrouped","parent","selectOverviewMode","selectLinker","selectGroupingMode","selectAttributeForGrouping","groupUngroup","moveFocusArea","evt","fixFocusArea","showNodes","group","event","selectNode","instance","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","data","isUpdatingVariable","load","isLoading","$apply","metricList","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","Math","round","getTime","metric","index","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","url","encodeURIComponent","open","send","length","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","renderOverview","forEach","values","value","parseFloat","min","max","point","checkAndSetOverviewMinMax","colorList","layerRange","colorMap","getColorMap","Map","i","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","push","total","getThresholdAverage","map","sort","first","second","groupList","checkInstanceInGroup","initialiseNewGroup","instanceList","parseInt","instanceMetric","groupMetric","clearFocus","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewHeight","drawOverviewData","instanceHorizontalLength","getMaxMetricLength","overviewWidth","overviewCanvasWidth","getMaxGroupSize","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","font","metricWidth","overviewEndY","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawTimeLabels","overviewInstanceHeight","groupIndex","drawOverviewInstance","drawGroupSize","pointHeigh","y","endY","overviewMetric","startX","pointIndex","x","getColorFromMap","fillStyle","fillRect","endX","startY","beginPath","moveTo","lineTo","closePath","fill","instanceIndex","drawGroupBars","colorStep","drawGroupBarAtPosition","greyValue","floor","label","fillText","setOverviewContextTimeFont","textHeight","getDateString","fromDateWidth","toDateWidth","format","drawFocusArea","updateGrouping","showFocus","initialiseAllFocusGraphGroups","focusAreaIsFixed","drawFocus","preventDefault","mousePosition","getMousePos","drawFocusGraph","autoSrollFocusGraph","rect","getBoundingClientRect","clientX","left","clientY","top","getFocusAreaSize","minimumTopY","focusStartY","drawFocusAreaAndLinkers","focusStartX","strokeStyle","strokeRect","doDrawLinkers","offset","getFocusAreaOffset","drawLinkers","checkMouseIsInMetric","mousePositionXOffset","sourceMetricIndex","pixelData","getImageData","getLinkerTargetInstance","drawLinkersByMode","drawXCross","drawNormalCross","changeInstanceColor","centerX","leftStartX","rightStartX","bottomInstance","drawXCrossLine","drawLineOnFocusAreaCanvas","stroke","focusSize","centertX","distanceBetweenLines","leftLineX","rightLineX","topLineY","bottomLineY","drawNormalCrossLines","instancePoint","metricInstanceIndex","metricPoint","initialiseFocusGraphGroups","initialiseFocusGraphData","focusedGroupList","firstInstance","focusedIndexList","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","allGroupList","initialiseFocusGraphFocusedGroups","focusGroup","overviewInstance","focusInstance","getFocusInstance","checkInstanceInFocus","getIndexesOfPointsInFocus","initialiseFocusInstanceData","showDetails","indexes","indexList","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateLeftMargin","toDateLeftMargin","drawGroupedFocusGraph","drawUngroupedFocusGraph","context","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","moveContextBasedOnValue","graphBeginX","scrollByGroup","scrollByInstance","allGroupIndex","isSelected","focusedGroupIndex","scrollTop","focusModelInstance","updateVariable","variables","v","name","setOptionAsCurrent","text","variableUpdated","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n        this.overviewModel = {};\n        this.focusModel = {};\n        this.scope.focusModel = this.focusModel;\n        this.initialiseConfig();\n    }\n\n    initialiseConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY hh:mm:ss\",\n            marginBetweenOverviewAndFocus: 50,\n\n            // color schemes for metrics\n            metricLabelList: [\"CPU\", \"Memory\", \"Disk\"],\n\n            // color schemes for metrics\n            colors: [\n                [\"f2d9e6\", \"d98cb3\", \"bf4080\", \"73264d\"], // red\n                [\"ccddff\", \"6699ff\", \"0055ff\", \"003399\"], // blue\n                [\"eeeedd\", \"cccc99\", \"aaaa55\", \"666633\"], // green\n            ],\n\n            // determines which the order of attributes to use for sorting\n            sortOrder: [0, 1, 2],\n        }\n\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            metricFontSize: 15,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            groupedPointHeight: 5,\n            ungroupedPointHeight: 1,\n            verticalMarginBetweenMetrics: 2,\n            horizontalMarginBetweenMetrics: 30,\n            marginBetweenInstances: 6,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            groupBarWidth: 9,\n            groupSizeWidth: 2\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            size: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            pointWidth: 20,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxWidth: 10000,\n            maxHeight: 10000\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIFunctions();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.scope.ctrl.enumList = {\n            linkingMode: {\n                X_CROSS: \"1\",\n                NORMAL_CROSS: \"2\",\n                CHANGE_COLOR: \"3\",\n            },\n\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            }\n        };\n\n        this.scope.ctrl.linkingMode = this.scope.ctrl.enumList.linkingMode.X_CROSS;\n        this.scope.ctrl.groupingMode = this.scope.ctrl.enumList.groupingMode.SINGLE;\n        this.scope.ctrl.attributeForGrouping = \"0\";\n        this.scope.ctrl.isGrouped = true;\n    }\n\n    initialiseUIFunctions() {\n        var parent = this;\n\n        this.scope.selectOverviewMode = function () {\n            parent.selectOverviewMode();\n        }\n\n        this.scope.selectLinker = function () {\n            parent.selectLinker();\n        }\n\n        this.scope.selectGroupingMode = function () {\n            parent.selectGroupingMode();\n        }\n\n        this.scope.selectAttributeForGrouping = function () {\n            parent.selectAttributeForGrouping();\n        }\n\n        this.scope.groupUngroup = function () {\n            parent.groupUngroup();\n        }\n\n        this.scope.moveFocusArea = function (evt) {\n            parent.moveFocusArea.bind(parent, evt)();\n        }\n\n        this.scope.fixFocusArea = function (evt) {\n            parent.fixFocusArea.bind(parent, evt)();\n        }\n\n        this.scope.showNodes = function (group, event) {\n            parent.showNodes.bind(parent, group, event)();\n        }\n\n        this.scope.selectNode = function (instance) {\n            parent.selectNode.bind(parent, instance)();\n        }\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // focus graph\n        this.scope.ctrl.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.scope.ctrl.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onDataReceived(data) {\n        if (this.isUpdatingVariable) {\n            this.isUpdatingVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            if (this.scope.ctrl.isLoading) {\n                this.load();\n            } else {\n                this.scope.ctrl.isLoading = true;\n                this.scope.$apply();\n                this.overviewModel.metricList = [null, null, null];\n                this.loadCount = 0;\n                this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n                this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n                this.getDataFromAPI(\"node_load1{job='node'}\", 0);\n\n                this.getDataFromAPI(`\n                        100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) \n                                * 100 / \n                                (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\n                    `, 1);\n\n                this.getDataFromAPI(`\n                    100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)',\n                                                                            mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) \n                                * 100 / \n                            (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\n                `, 2);\n\n                this.processRawData();\n            }\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(metric, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(metric) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.scope.ctrl.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.config.colors[index];\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colors) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colors.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2\n            colorMap.set(threshold, colors[i]);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.config.colors.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < this.config.sortOrder.length; ++i) {\n                var metricIndex = this.config.sortOrder[i];\n\n                if (first.metricList[metricIndex].total != second.metricList[metricIndex].total) {\n                    return first.metricList[metricIndex].total - second.metricList[metricIndex].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.overviewModel.groupList = [];\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(this.overviewModel.groupList, (search) => {\n                return this.checkInstanceInGroup(instance, search);\n            });\n\n            if (!group) {\n                group = this.initialiseNewGroup(instance);\n                this.overviewModel.groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceInGroup(instance, group) {\n        if (this.scope.ctrl.groupingMode == this.scope.ctrl.enumList.groupingMode.SINGLE) {\n            var index = parseInt(this.scope.ctrl.attributeForGrouping);\n            return instance.metricList[index].total == group.metricList[index].total;\n        } else {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                if (instance.metricList[i].total != group.metricList[i].total) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n\n    initialiseNewGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocus();\n            this.drawOverview();\n        }\n    }\n\n    clearFocus() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.scope.ctrl.focusGraphMarginTop = this.scope.ctrl.overviewHeight + this.config.marginBetweenOverviewAndFocus;\n            this.drawOverviewData();\n        });\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((point) => {\n                if (point.values.length > length) {\n                    length = point.values.length;\n                }\n            });\n        });\n\n        return length;\n    }\n\n    setOverviewCanvasSize() {\n        var instanceHorizontalLength = this.getMaxMetricLength() * this.overviewModel.metricList.length +\n            (this.overviewModel.metricList.length - 1) * this.config.overview.horizontalMarginBetweenMetrics;\n        this.scope.ctrl.overviewWidth = instanceHorizontalLength * this.config.overview.pointWidth;\n\n        if (this.scope.ctrl.isGrouped) {\n            this.scope.ctrl.overviewHeight = this.overviewModel.groupList.length * (this.config.overview.groupedPointHeight * 2);\n        } else {\n            this.scope.ctrl.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        this.scope.ctrl.overviewCanvasWidth = this.scope.ctrl.overviewWidth + this.getMaxGroupSize() +\n            this.config.overview.horizontalMarginBetweenMetrics;\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.scope.ctrl.overviewHeight += (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2; // Metric and time labels\n        this.scope.$apply();\n    }\n\n    getMaxGroupSize() {\n        var result = 0;\n\n        this.overviewModel.groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.metricWidth = this.getMaxMetricLength() * this.config.overview.pointWidth;\n        this.overviewModel.overviewEndY = 0;\n\n        if (this.scope.ctrl.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawTimeLabels();\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var instance = group.instanceList[0];\n            this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n        });\n\n        this.drawGroupSize();\n    }\n\n    drawOverviewInstance(instance, index, pointHeigh, marginBetweenInstances) {\n        instance.y = this.overviewModel.overviewStartY + index * (pointHeigh + marginBetweenInstances);\n        var endY = instance.y + pointHeigh;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        instance.metricList.forEach((metric, metricIndex) => {\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n            overviewMetric.startX = this.overviewModel.metricWidth * metricIndex;\n\n            if (metricIndex > 0) {\n                overviewMetric.startX += this.config.overview.horizontalMarginBetweenMetrics * metricIndex;\n            }\n\n            metric.data.forEach((point, pointIndex) => {\n                point.x = overviewMetric.startX + pointIndex * this.config.overview.pointWidth;\n                point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                this.overviewContext.fillStyle = point.color;\n                this.overviewContext.fillRect(point.x, instance.y, this.config.overview.pointWidth, pointHeigh);\n            });\n\n            overviewMetric.endX = overviewMetric.startX + this.overviewModel.metricWidth;\n        });\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = color;\n            }\n        });\n\n        return \"#\" + result;\n    }\n\n    drawGroupSize() {\n        var startX = this.scope.ctrl.overviewWidth + this.config.overview.horizontalMarginBetweenMetrics;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var endX = startX + group.instanceList.length * this.config.overview.groupSizeWidth;\n            var startY = this.overviewModel.overviewStartY + groupIndex * this.config.overview.groupedPointHeight;\n            var endY = startY + this.config.overview.groupedPointHeight;\n            this.overviewContext.beginPath();\n            this.overviewContext.moveTo(startX, startY);\n            this.overviewContext.lineTo(endX, startY);\n            this.overviewContext.lineTo(endX, endY);\n            this.overviewContext.lineTo(startX, endY);\n            this.overviewContext.closePath();\n            this.overviewContext.fillStyle = \"black\";\n            this.overviewContext.fill();\n        });\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0);\n        });\n\n        this.drawGroupBars();\n    }\n\n    drawGroupBars() {\n        var colorStep = (this.config.overview.startingGreyColor - this.config.overview.endingGrayColor) / this.overviewModel.groupList.length;\n\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.horizontalMarginBetweenMetrics / 2;\n            this.drawGroupBarAtPosition(x, colorStep);\n        }\n    }\n\n    drawGroupBarAtPosition(x, colorStep) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var greyValue = Math.round(this.config.overview.startingGreyColor - colorStep * groupIndex);\n            var fillStyle = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            this.overviewContext.fillStyle = fillStyle;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x - Math.floor(this.config.overview.groupBarWidth / 2), y,\n                this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n        this.overviewContext.fillStyle = \"black\";\n\n        for (var i = 0; i < this.config.metricLabelList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var label = this.config.metricLabelList[i];\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    drawTimeLabels() {\n        this.setOverviewContextTimeFont();\n        var textHeight = this.overviewContext.measureText(\"M\").width;\n        var fromDate = this.getDateString(this.fromDate * 1000);\n        var fromDateWidth = this.overviewContext.measureText(fromDate).width;\n        var toDate = this.getDateString(this.toDate * 1000);\n        var toDateWidth = this.overviewContext.measureText(toDate).width;\n        var y = this.scope.ctrl.overviewHeight - textHeight;\n\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        // this.overviewContext.fillText(fromDate, metric.startX - fromDateWidth / 2, y);\n        this.overviewContext.fillText(toDate, metric.endX - toDateWidth / 2, y);\n\n        for (var i = 0; i < this.config.metricLabelList.length; ++i) {\n        }\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    getDateString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectLinker() {\n        this.drawFocusArea();\n    }\n\n    selectGroupingMode() {\n        this.updateGrouping();\n    }\n\n    updateGrouping() {\n        this.initialiseOverviewGroups();\n        this.drawOverview();\n        this.showFocus = false;\n        this.initialiseAllFocusGraphGroups();\n    }\n\n    selectAttributeForGrouping() {\n        this.updateGrouping();\n    }\n\n    groupUngroup() {\n        this.scope.ctrl.isGrouped = !this.scope.ctrl.isGrouped;\n        this.drawOverview();\n        this.showFocus = false;\n    }\n\n    moveFocusArea(evt) {\n        if (!this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n            evt.preventDefault();\n        }\n    }\n\n    fixFocusArea(evt) {\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        evt.preventDefault();\n    }\n\n    drawFocus(evt) {\n        this.focusModel.mousePosition = this.getMousePos(evt, this.overviewCanvas);\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            // only update focus graph if mouse is pointing on one of metric overview graphs\n            if (metric.startX <= this.focusModel.mousePosition.x && this.focusModel.mousePosition.x <= metric.endX) {\n                this.drawFocusGraph();\n                this.autoSrollFocusGraph();\n                break;\n            }\n        }\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    drawFocusArea() {\n        if (this.focusModel.mousePosition) {\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.focusModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            this.drawFocusAreaAndLinkers(true);\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.size * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    drawSingleFocusArea() {\n        this.clearFocus();\n        var size = this.getFocusAreaSize();\n        this.focusModel.focusStartY = Math.min(Math.max(0, this.focusModel.mousePosition.y - size / 2), this.overviewCanvas.height - this.getFocusAreaSize());\n        this.focusModel.focusStartX = Math.min(Math.max(0, this.focusModel.mousePosition.x - this.config.focusArea.size), this.overviewCanvas.width - size);\n        this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n        this.focusAreaContext.strokeRect(this.focusModel.focusStartX, this.focusModel.focusStartY, size, size);\n    }\n\n    drawFocusAreaAndLinkers(doDrawLinkers) {\n        var size = this.getFocusAreaSize();\n        var offset = this.getFocusAreaOffset();\n\n        if (offset >= 0) {\n            if (doDrawLinkers) {\n                this.clearFocus();\n            }\n\n            this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.focusStartX = metric.startX + offset;\n                this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n            });\n\n            if (doDrawLinkers) {\n                this.drawLinkers();\n            }\n        }\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (this.checkMouseIsInMetric(metric)) {\n                this.focusModel.mousePositionXOffset = this.focusModel.mousePosition.x - metric.startX;\n                this.focusModel.sourceMetricIndex = i;\n\n                return Math.min(Math.max(metric.startX,\n                    this.focusModel.mousePosition.x - this.config.focusArea.size),\n                    metric.endX - this.getFocusAreaSize()) - metric.startX;\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return metric.startX <= this.focusModel.mousePosition.x && this.focusModel.mousePosition.x <= metric.endX;\n    }\n\n    drawLinkers() {\n        var pixelData = this.overviewContext.getImageData(this.focusModel.mousePosition.x, this.focusModel.mousePosition.y, 1, 1).data;\n        this.focusAreaContext.strokeStyle = \"rgb(\" + pixelData[0] + \",\" + pixelData[1] + \",\" + pixelData[2] + \")\";\n        var instance = this.getLinkerTargetInstance();\n        instance = null; // temp flag to prevent drawing linkers\n\n        if (instance) {\n            this.overviewModel.metricList.forEach((metric, index) => {\n                if (!this.checkMouseIsInMetric(metric)) {\n                    this.drawLinkersByMode(metric, instance, index);\n                }\n            });\n        }\n    }\n\n    getLinkerTargetInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (instance.y - this.config.overview.ungroupedPointHeight <= this.focusModel.mousePosition.y &&\n                this.focusModel.mousePosition.y <= instance.y) {\n                return instance;\n            }\n        }\n    }\n\n    drawLinkersByMode(metric, instance, index) {\n        switch (this.scope.ctrl.linkingMode) {\n            case this.scope.ctrl.enumList.linkingMode.X_CROSS:\n                this.drawXCross(metric, instance);\n                break;\n\n            case this.scope.ctrl.enumList.linkingMode.NORMAL_CROSS:\n                this.drawNormalCross(metric, instance);\n                break;\n\n            case this.scope.ctrl.enumList.linkingMode.CHANGE_COLOR:\n                this.changeInstanceColor(metric, instance, index);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    drawXCross(metric, instance) {\n        var centerX = metric.startX + this.focusModel.mousePositionXOffset;\n        var leftStartX = centerX - this.config.focusArea.xCrossSize;\n        var rightStartX = centerX + this.config.overview.pointWidth;\n        var bottomInstance = instance.y + this.config.overview.ungroupedPointHeight;\n\n        this.drawXCrossLine(leftStartX, instance.y - this.config.focusArea.xCrossSize, instance.y);\n        this.drawXCrossLine(rightStartX, instance.y, instance.y - this.config.focusArea.xCrossSize);\n        this.drawXCrossLine(leftStartX, bottomInstance + this.config.focusArea.xCrossSize, bottomInstance);\n        this.drawXCrossLine(rightStartX, bottomInstance, bottomInstance + this.config.focusArea.xCrossSize);\n    }\n\n    drawXCrossLine(startX, startY, endY) {\n        this.drawLineOnFocusAreaCanvas(startX, startY, startX + this.config.focusArea.xCrossSize, endY);\n    }\n\n    drawLineOnFocusAreaCanvas(startX, startY, endX, endY) {\n        this.focusAreaContext.beginPath();\n        this.focusAreaContext.moveTo(startX, startY);\n        this.focusAreaContext.lineTo(endX, endY);\n        this.focusAreaContext.stroke();\n        this.focusAreaContext.closePath();\n    }\n\n    drawNormalCross(metric, instance) {\n        var focusSize = this.getFocusAreaSize();\n        var centertX = metric.startX + this.focusModel.mousePositionXOffset;\n        var endX = metric.focusStartX + focusSize;\n        var distanceBetweenLines = this.config.overview.pointWidth * 2;\n        var leftLineX = centertX - distanceBetweenLines;\n        var rightLineX = centertX + distanceBetweenLines;\n        var topLineY = instance.y - distanceBetweenLines;\n        var bottomLineY = instance.y + distanceBetweenLines;\n        var endY = this.focusModel.focusStartY + focusSize;\n\n        this.drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY);\n    }\n\n    drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY) {\n        // top horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, topLineY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, topLineY, endX, topLineY);\n\n        // botton horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, bottomLineY, leftLineX, bottomLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, endX, bottomLineY);\n\n        // left vertical\n        this.drawLineOnFocusAreaCanvas(leftLineX, this.focusModel.focusStartY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(leftLineX, bottomLineY, leftLineX, endY);\n\n        // right vertical\n        this.drawLineOnFocusAreaCanvas(rightLineX, this.focusModel.focusStartY, rightLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, rightLineX, endY);\n    }\n\n    changeInstanceColor(metric, instance, index) {\n        if (index == 0) {\n            this.clearFocus();\n        }\n\n        instance.metricList[index].data.forEach((instancePoint, pointIndex) => {\n            var colorMap = this.getColorMap(metric, this.config.colors[this.focusModel.sourceMetricIndex]);\n            this.focusAreaContext.fillStyle = this.getColorFromMap(instancePoint.value, colorMap);\n            this.focusAreaContext.fillRect(instancePoint.x, instance.y, this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n\n            if (instancePoint.x == metric.startX + this.focusModel.mousePositionXOffset) {\n                // vertical line\n                metric.data.forEach((metricInstance, metricInstanceIndex) => {\n                    var metricPoint = metricInstance.values[pointIndex];\n                    var value = metricPoint ? metricPoint[1] : 0\n                    this.focusAreaContext.fillStyle = this.getColorFromMap(value, colorMap);\n                    this.focusAreaContext.fillRect(instancePoint.x, this.overviewModel.data[metricInstanceIndex].y,\n                        this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n                });\n            }\n        });\n\n        if (index == instance.metricList.length - 1) {\n            this.drawFocusAreaAndLinkers(false);\n        }\n    }\n\n    drawFocusGraph() {\n        if (this.scope.ctrl.isGrouped) {\n            this.initialiseFocusGraphGroups();\n        } else {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.scope.ctrl.isGrouped && this.focusModel.focusedGroupList.length > 0) ||\n            (!this.scope.ctrl.isGrouped && this.focusModel.data.length > 0)) {\n            this.scope.ctrl.showFocus = true;\n            this.$timeout(() => {\n                this.scope.ctrl.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                var firstInstance = this.scope.ctrl.isGrouped ? this.focusModel.focusedGroupList[0].instanceList[0] : this.focusModel.data[0];\n                this.scope.ctrl.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.config.focusGraph.pointWidth;\n                this.scope.$apply();\n                this.focusModel.focusRowHeight = this.getElementByID(\"focusGraphRow\").offsetHeight;\n                this.setFocusFromAndToDate();\n                this.positionFocusFromAndToDate();\n                this.drawFocusGraphData();\n            });\n        } else {\n            this.scope.ctrl.showFocus = false;\n        }\n    }\n\n    initialiseFocusGraphGroups() {\n        if (!this.focusModel.allGroupList) {\n            this.initialiseAllFocusGraphGroups();\n        }\n\n        if (!this.focusModel.focusedGroupList) {\n            this.focusModel.focusedGroupList = [];\n        }\n\n        this.focusModel.focusedGroupList.length = 0;\n        this.initialiseFocusGraphFocusedGroups();\n    }\n\n    initialiseAllFocusGraphGroups() {\n        this.focusModel.allGroupList = [];\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var focusGroup = {};\n            this.focusModel.allGroupList.push(focusGroup);\n            focusGroup.index = groupIndex + 1;\n            focusGroup.instanceList = [];\n\n            group.instanceList.forEach((overviewInstance) => {\n                var focusInstance = this.getFocusInstance(overviewInstance, [0, 0]);\n                focusGroup.instanceList.push(focusInstance);\n            });\n        });\n    }\n\n    initialiseFocusGraphFocusedGroups() {\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var firstInstance = group.instanceList[0];\n\n            if (this.checkInstanceInFocus(firstInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(firstInstance);\n\n                group.instanceList.forEach((overviewInstance, instanceIndex) => {\n                    var focusInstance = this.focusModel.allGroupList[groupIndex].instanceList[instanceIndex];\n                    this.initialiseFocusInstanceData(focusInstance, overviewInstance, this.focusModel.focusedIndexList);\n                });\n\n                var focusGroup = this.focusModel.allGroupList[groupIndex];\n                focusGroup.showDetails = false;\n                this.focusModel.focusedGroupList.push(focusGroup);\n            }\n        });\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (overviewMetric.focusStartX <= point.x && point.x <= overviewMetric.focusStartX + this.getFocusAreaSize()) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.config.colors[metricIndex].forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.scope.ctrl.focusedFromDate = this.getDateString(metric.data[fromIndex].date * 1000);\n                    this.scope.ctrl.focusedToDate = this.getDateString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.scope.ctrl.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.scope.ctrl.focusedFromDate).width;\n        this.scope.ctrl.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.scope.ctrl.toDateLeftMargin = this.scope.ctrl.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.scope.ctrl.isGrouped) {\n            this.drawGroupedFocusGraph();\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.focusedGroupList.forEach((group) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    var canvas = this.getElementByID(\"focusGraphCanvas-\" + group.index + \"-\" + instanceIndex);\n                    var context = this.getCanvasContext(canvas);\n                    context.clearRect(0, 0, canvas.width, canvas.height);\n                    this.drawFocusGraphInstance(instance, context);\n                }\n            });\n        });\n    }\n\n    drawFocusGraphInstance(instance, context) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                layer.valueList.forEach((value, valueIndex) => {\n                    x = this.config.focusGraph.pointWidth * valueIndex;\n                    this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                        this.overviewModel.metricList[metricIndex].layerRange);\n                    previousX = x;\n                    previousValue = value;\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = \"#\" + this.config.colors[metricIndex][layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context);\n        });\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.scope.ctrl.isGrouped) {\n            this.scrollByGroup();\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByGroup() {\n        for (var allGroupIndex = 0; allGroupIndex < this.focusModel.allGroupList.length; ++allGroupIndex) {\n            var group = this.focusModel.allGroupList[allGroupIndex];\n            var overviewInstance = this.overviewModel.groupList[allGroupIndex].instanceList[0];\n            var focusInstance = group.instanceList[0];\n\n            if (overviewInstance.y <= this.focusModel.mousePosition.y && this.focusModel.mousePosition.y <=\n                overviewInstance.y + this.config.overview.groupedPointHeight) {\n                focusInstance.isSelected = true;\n\n                for (var focusedGroupIndex = 0; focusedGroupIndex < this.focusModel.focusedGroupList.length; ++focusedGroupIndex) {\n                    if (this.focusModel.focusedGroupList[focusedGroupIndex] == group) {\n                        this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * focusedGroupIndex;\n                        break;\n                    }\n                }\n            } else {\n                focusInstance.isSelected = false;\n            }\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getLinkerTargetInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n\n            if (group.showDetails) {\n                this.drawFocusGraphData();\n            }\n\n            this.selectNode(group.instanceList[0]);\n        });\n    }\n\n    selectNode(instance) {\n        if (this.scope.ctrl.isGrouped) {\n            this.focusModel.focusedGroupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        this.updateVariable(instance);\n    }\n\n    updateVariable(instance) {\n        this.variableSrv.variables.forEach((v) => {\n            if (v.name == \"node\") {\n                this.variableSrv.setOptionAsCurrent(v, {\n                    text: instance.instance,\n                    value: instance.instance\n                });\n\n                this.isUpdatingVariable = true;\n                this.variableSrv.variableUpdated(v, true);\n            }\n        });\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}