{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","initialiseStartingVariables","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","focusAreaSize","xCrossSize","timeIndicator","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","colorList","luminanceChange","i","changeColorLuminance","firstLoad","overviewModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","scope","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","threshold","average","set","sortOverviewData","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sort","first","second","total","metricIndex","histogramData","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","getThresholdAverage","map","isBetween","target","start","end","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","initialiseMetricSingleAttributeGroups","initialiseSingleAttributeGroupsColor","initialiseSingleAttributeInstanceGroupList","thresholdGroupListMap","populateSingleAttributeGroupList","thresholdValue","group","initialiseNewSingleAttributeGroups","instanceList","markerX","originalColor","groupIndex","populateMultiAttributeGroupList","initialiseMultiAttributeGroupsColor","findExistingMultiAttributeGroup","initialiseNewMultiAttributeGroup","instanceMetric","groupMetric","greyValue","overviewMetric","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","convertDateToString","toDateWidth","isGrouped","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","getCurrentSingleAttributeGroupList","largestGroup","getCurrentMultiAttributeGroupList","groupCount","getMaxGroupCount","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","overviewInstanceHeight","drawSingeAttributeGroupedOverview","drawMultiAttributeGroupedOverview","drawGroupSize","drawGroupOverviewWrapper","drawMetricSeparator","metricIndexList","drawOverviewInstance","y","instanceIndex","pointHeight","marginBetweenInstances","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","drawGroupSizeLabel","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","floor","drawGroupBarAtPosition","getMetricDarkestColor","format","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","showFocus","showMergeSelectedGroups","deselectSingleAttributeGroups","deselectMultiAttributeGroups","originalGroupList","previousGroupThreshold","isSelected","timeRangeIndexList","mergeSingleAttributeGroups","mergeMultipleAttributeGroups","mergeFocusGroupList","drawSelectedGroupsMarkers","drawFocusGraph","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","mergeFocusGroupListWrapper","addGroupToFocus","focusGroup","overviewGroup","overviewInstance","metricWithMostData","focusedIndexList","focusInstance","getFocusInstance","evt","isSelectingMetricLabel","showHistogram","drawHistogram","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","selectedMetricIndex","panelMetric","setOverviewMousePosition","setSelectedMetricIndex","mousePosition","setOverviewCursorToPointer","handleMouseMoveOnGroupedOverview","focusAreaIsFixed","drawFocus","getMousePos","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","setSelectedTimeIndex","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","markerIndex","marker","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","temp","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","fixFocusArea","updatedSelectedGroups","addOrRemoveGroupToFocus","stopInterval","removeExisting","remove","setShowMergeGroupsButton","setShowMergeGroupsButtonWrapper","selectedGroupCount","indexList","initialiseFocusInstanceData","drawOverviewGroupMarker","focusGroupWithInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","marginBetweenMarkers","drawFocusArea","size","getFocusAreaSize","minimumTopY","focusStartY","offset","getFocusAreaOffset","focusStartX","strokeRect","sourceMetricIndex","initialiseFocusGraphData","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","positionIndex","undefined","moveContextBasedOnValue","graphBeginX","getUngroupedFocusCanvas","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n        this.initialiseStartingVariables();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 8,\n            ungroupedPointWidth: 35,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                metric.colorList = [];\n                metric.colorList.push(metric.color);\n                var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n                for (var i = 0; i < this.config.colorCount - 1; ++i) {\n                    var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n                    metric.colorList.push(color);\n                }\n            });\n        }\n    }\n\n    initialiseStartingVariables() {\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.panel.metricList[index].colorList;\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.overviewModel.data = [];\n        this.sortOverviewData();\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogramData = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogramData.has(point.value)) {\n                        var occurences = metric.histogramData.get(point.value);\n                        metric.histogramData.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogramData.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogramData = new Map([...metric.histogramData].sort((first, second) => {\n                return first[1] - second[2];\n            }));\n        });\n    }\n\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseMetricSingleAttributeGroups(metric, metricIndex);\n            this.initialiseSingleAttributeGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleAttributeInstanceGroupList();\n    }\n\n    initialiseMetricSingleAttributeGroups(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                var min = search.total * (1 - thresholdValue);\n                var max = search.total * (1 + thresholdValue);\n                return this.isBetween(instance.metricList[metricIndex].total, min, max);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleAttributeGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleAttributeInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                for (var i = 0; i < metric.thresholdGroupListMap.length; ++i) {\n                    var group = metric.thresholdGroupListMap[i];\n\n                    if (instance.metricList[metricIndex].total == group.total) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiAttributeGroupList(groupList, groupingThreshold);\n            this.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiAttributeGroupsColor();\n    }\n\n    populateMultiAttributeGroupList(groupList, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiAttributeGroup(groupList, thresholdValue, instance);\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiAttributeGroup(groupList, thresholdValue, instance) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n                var min = metric.total * (1 - thresholdValue);\n                var max = metric.total * (1 + thresholdValue);\n\n                if (!this.isBetween(instance.metricList[i].total, min, max)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiAttributeGroupsColor() {\n        this.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocusArea();\n            this.drawOverview();\n        }\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n            this.scope.$apply();\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n        this.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleAttributeGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiAttributeGroupSize() * this.config.overview.multipleAttributeGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getCurrentSingleAttributeGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiAttributeGroupList() {\n        return this.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                    metric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeAttributeGroupedOverview();\n        } else {\n            this.drawMultiAttributeGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeAttributeGroupedOverview() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            this.drawMetricSeparator(metric);\n        });\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight, this.config.overview.marginBetweenGroups, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, instanceIndex, pointHeight, marginBetweenInstances, metricIndexList) {\n        instance.y = this.overviewModel.overviewStartY + instanceIndex * (pointHeight + marginBetweenInstances);\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex,\n                        this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiAttributeGroupedOverview() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - labelWidth) / 2);\n        });\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.overviewModel.labelTextHeight);\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY +\n            groupIndex * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize + labelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - labelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        if (!this.isCompressed) {\n            // this.drawGroupBars();\n        }\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.decompressedMarginBetweenMetrics / 2 -\n                Math.floor(this.config.overview.groupBarWidth / 2);\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.thresholdGroupListMap.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x, y, this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.clearFocusArea();\n        this.clearTimeIndicator();\n        this.deselectAllGroups();\n        this.showFocus = false;\n        this.showMergeSelectedGroups = false;\n    }\n\n    deselectAllGroups() {\n        this.focusModel.groupList = [];\n        this.deselectSingleAttributeGroups();\n        this.deselectMultiAttributeGroups();\n    }\n\n    deselectSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                });\n            }\n        });\n    }\n\n    deselectMultiAttributeGroups() {\n        if (this.overviewModel.originalGroupList) {\n            this.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.overviewModel.originalGroupList);\n            this.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.changeGroupingSelection();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    mergeSelectedGroups() {\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleAttributeGroups();\n        } else {\n            this.mergeMultipleAttributeGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.showMergeSelectedGroups = false;\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph();\n    }\n\n    mergeSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = JSON.parse(JSON.stringify(group));\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    mergeFocusGroupList() {\n        this.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiAttributeGroupList());\n        }\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    mergeMultipleAttributeGroups() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        if (!this.overviewModel.originalGroupList) {\n            this.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.thresholdGroupListMap) {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped && this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.overviewModel.isSelectingTimeRange = true;\n            this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset;\n            this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        var panelMetric = this.panel.metricList[this.overviewModel.selectedMetricIndex];\n        this.histogramCanvasContext.fillStyle = this.getMetricDarkestColor(panelMetric);\n        var unit = panelMetric.unit;\n        this.histogramCanvasContext.fillText(overviewMetric.max + \" \" + unit, 0, this.overviewModel.labelTextHeight);\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.overviewModel.selectedMetricIndex >= 0) {\n                if (this.isBetween(this.overviewModel.mousePosition.y, 0, this.overviewModel.overviewStartY)) {\n                    this.setOverviewCursorToPointer();\n                    this.isSelectingMetricLabel = true;\n                } else {\n                    this.isSelectingMetricLabel = false;\n                }\n\n                if (this.isGrouped) {\n                    this.handleMouseMoveOnGroupedOverview();\n                } else if (!this.isCompressed && !this.focusAreaIsFixed) {\n                    this.drawFocus(evt);\n                }\n            }\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.initialiseOverviewCanvasCursor();\n        this.overviewModel.hoveredGroup = null;\n        this.overviewModel.hoveredMarker = null;\n        this.checkAndSetSelectedOverviewMarker();\n        this.checkAndSetHoveredGroup()\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n            if (this.overviewModel.hoveredGroup) {\n                if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                    this.setSelectedTimeIndex();\n                }\n\n                this.drawTimeIndicators();\n            } else {\n                this.clearTimeIndicator();\n            }\n        } else if (this.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.overviewCursor = \"pointer\";\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleAttributeGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiAttributeGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiAttributeGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleAttributeGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.timeRangeMetricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiAttributeGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n    }\n\n    mouseUpOnOverView(evt) {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph();\n            }\n        } else if (!this.isCompressed) {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph();\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        })\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiAttributeGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph();\n                    break;\n                }\n            }\n        }\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            this.clearFocusArea();\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            var size = this.getFocusAreaSize();\n            var offset = this.getFocusAreaOffset();\n\n            if (offset >= 0) {\n                this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n                this.overviewModel.metricList.forEach((metric) => {\n                    metric.focusStartX = metric.startX + offset;\n                    this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n                });\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    this.focusModel.sourceMetricIndex = i;\n\n                    return Math.min(Math.max(metric.startX,\n                        this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                        metric.endX - this.getFocusAreaSize()) - metric.startX;\n                }\n            }\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.panel.metricList[metricIndex].colorList.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.drawGroupedFocusGraphInstance(canvas, instance, Array.from(Array(maxMetricLength).keys()), this.getFocusGraphPointWidth());\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            var pointWidth = Math.floor(this.focusGraphWidth / group.overviewGroup.timeRangeIndexList.length);\n            this.drawGroupedFocusGraphInstance(canvas, instance, group.overviewGroup.timeRangeIndexList, pointWidth);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, instance, valueIndexList, pointWidth) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context, valueIndexList, pointWidth);\n    }\n\n    drawFocusGraphInstance(instance, context, valueIndexList, pointWidth) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != undefined) {\n                        x = pointWidth * positionIndex;\n                        this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                            this.overviewModel.metricList[metricIndex].layerRange);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context, Array.from(Array(this.getMaxMetricLength()).keys()), this.config.focusGraph.ungroupedPointWidth);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    selectNode(index, evt) {\n        var instance = this.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}