{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","relativeTimeThreshold","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","firstLoad","overviewModel","focusModel","groupList","initialisePanelDefaults","initialiseConfig","events","on","onInitEditMode","bind","onDataReceived","panelDefaults","metricList","name","query","colorList","value","defaults","panel","config","apiAddress","dateFormat","marginBetweenOverviewAndFocus","startingGreyColor","endingGrayColor","sortOrder","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseFocusGraphConfig","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","groupedPointHeight","ungroupedPointHeight","verticalMarginBetweenMetrics","horizontalMarginBetweenMetrics","marginBetweenInstances","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","maxLuminanceChange","focusAreaSize","xCrossSize","intervalTimer","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","scope","elem","initialiseControl","initialiseUIElements","enumList","linkingMode","X_CROSS","NORMAL_CROSS","CHANGE_COLOR","groupingMode","SINGLE","MULTIPLE","isGrouped","initialiseOverviewCanvasCursor","overviewCursor","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","updatingVariable","load","isLoading","$apply","forEach","push","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","metric","index","getDataFromAPI","processRawData","date","Math","round","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","url","encodeURIComponent","open","send","length","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","renderOverview","instance","values","parseFloat","min","max","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","i","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","total","getThresholdAverage","map","isBetween","sort","first","second","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","group","initialiseNewSingleAttributeGroups","instanceList","initialiseSingleAttributeGroupsColor","initialiseSingleAttributeInstanceGroupList","markerX","luminanceChange","originalColor","groupIndex","changeColorLuminance","hex","lum","String","replace","rgb","c","parseInt","substr","toString","initialiseNewMultiAttributeGroup","initialiseMultiAttributeGroupsColor","instanceMetric","groupMetric","colorStep","greyValue","clearFocus","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getDateString","toDateWidth","overviewWidth","getMaxMetricLength","overviewCanvasWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","largestGroup","groupCount","getMaxGroupCount","overviewHeight","metricWithMostGroups","font","metricWidth","overviewEndY","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawTimeLabels","overviewInstanceHeight","drawGroupOverviewWrapper","metricIndexList","getAllMetricIndexList","drawGroupSize","drawMetricSeparator","drawOverviewInstance","y","pointHeight","endY","drawOverviewInstanceMetric","overviewMetric","previousMetric","startX","endX","maxGroupSizeBarLength","drawOverviewInstancePoints","pointIndex","x","getColorFromMap","fillStyle","fillRect","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","instanceIndex","drawGroupBars","drawGroupBarAtPosition","floor","format","drawFocusArea","changeGroupingSelection","isSelected","showFocus","evt","setOverviewMousePosition","found","overviewIndex","mousePosition","checkAndSetSelectedGroup","focusAreaIsFixed","drawFocus","getMousePos","rect","getBoundingClientRect","clientX","left","clientY","top","checkGroupIsSelected","hoveredGroup","target","start","end","checkAndAddGroupToFocus","fixFocusArea","focusGroup","overviewGroup","remove","addGroupToFocus","drawSelectedGroupsMarkers","drawFocusGraph","overviewInstance","metricWithMostData","focusedIndexList","focusInstance","getFocusInstance","drawOverviewGroupMarker","checkMouseIsInMetric","size","getFocusAreaSize","minimumTopY","focusStartY","drawFocusAreaAndLinkers","doDrawLinkers","offset","getFocusAreaOffset","focusStartX","strokeRect","drawLinkers","mousePositionXOffset","sourceMetricIndex","pixelData","getImageData","getLinkerTargetInstance","drawLinkersByMode","drawXCross","drawNormalCross","changeInstanceColor","centerX","leftStartX","rightStartX","bottomInstance","drawXCrossLine","drawLineOnFocusAreaCanvas","focusSize","centertX","distanceBetweenLines","leftLineX","rightLineX","topLineY","bottomLineY","drawNormalCrossLines","instancePoint","metricInstanceIndex","metricPoint","initialiseFocusGraphData","getFocusGraphPointWidth","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","marginBetweenMarkers","focusGraphMarkerHeight","drawGroupedFocusMarkerAndGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","drawGroupedFocusGraph","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","moveContextBasedOnValue","graphBeginX","rowCount","scrollTop","scrollByInstance","focusModelInstance","overviewGroupWithIntervalList","startMarkerMovingInterval","groupWithInterval","stopInterval","initialiseInterval","currentInterval","cancel","markerMovingBackwards","handleMarkerMovingBackwardCase","handleMarkerMovingForwardCase","event","preventDefault","updateVariable","variables","v","setOptionAsCurrent","text","isUpdatingVariable","variableUpdated","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment, { relativeTimeThreshold } from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n\n        this.initialisePanelDefaults();\n        this.initialiseConfig();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialisePanelDefaults() {\n        var panelDefaults = {\n            metricList: [\n                {\n                    name: \"CPU\",\n                    query: \"node_load1{job='node'}\",\n\n                    colorList: [\n                        {\n                            value: \"#f2d9e6\"\n                        },\n                        {\n                            value: \"#d98cb3\"\n                        },\n                        {\n                            value: \"#bf4080\"\n                        },\n                        {\n                            value: \"#73264d\"\n                        }\n                    ]\n                },\n\n                {\n                    name: \"Memory\",\n\n                    query: \"100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n\n                    colorList: [\n                        {\n                            value: \"#ccddff\"\n                        },\n                        {\n                            value: \"#6699ff\"\n                        },\n                        {\n                            value: \"#0055ff\"\n                        },\n                        {\n                            value: \"#003399\"\n                        }\n                    ]\n                },\n\n\n                {\n                    name: \"CPU\",\n\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n\n                    colorList: [\n                        {\n                            value: \"#eeeedd\"\n                        },\n                        {\n                            value: \"#cccc99\"\n                        },\n                        {\n                            value: \"#aaaa55\"\n                        },\n                        {\n                            value: \"#666633\"\n                        }\n                    ]\n                }\n            ]\n        };\n\n        _.defaults(this.panel, panelDefaults);\n    }\n\n    initialiseConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY hh:mm:ss\",\n            marginBetweenOverviewAndFocus: 20,\n\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n\n            // determines which the order of attributes to use for sorting\n            sortOrder: [0, 1, 2],\n        }\n\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 15,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            groupedPointHeight: 5,\n            ungroupedPointHeight: 1,\n            verticalMarginBetweenMetrics: 2,\n            horizontalMarginBetweenMetrics: 30,\n            marginBetweenInstances: 6,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            maxLuminanceChange: 0.7,\n            focusAreaSize: 20,\n            xCrossSize: 15,\n            intervalTimer: 50\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 3,\n            ungroupedPointWidth: 20,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 10\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            linkingMode: {\n                X_CROSS: \"1\",\n                NORMAL_CROSS: \"2\",\n                CHANGE_COLOR: \"3\",\n            },\n\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            }\n        };\n\n        this.linkingMode = this.enumList.linkingMode.X_CROSS;\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.isGrouped = true;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        if (this.updatingVariable) {\n            this.updatingVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.panel.metricList[index].colorList;\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2\n            colorMap.set(threshold, colorList[i].value);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < this.config.sortOrder.length; ++i) {\n                var metricIndex = this.config.sortOrder[i];\n\n                if (first.metricList[metricIndex].total != second.metricList[metricIndex].total) {\n                    return first.metricList[metricIndex].total - second.metricList[metricIndex].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.groupList = [];\n\n            this.overviewModel.data.forEach((instance) => {\n                var group = _.find(metric.groupList, (search) => {\n                    return instance.metricList[metricIndex].total == search.total;\n                });\n\n                if (!group) {\n                    group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                    metric.groupList.push(group);\n                }\n\n                group.instanceList.push(instance);\n            });\n\n            metric.groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            this.initialiseSingleAttributeGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleAttributeInstanceGroupList();\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleAttributeGroupsColor(metric, metricIndex) {\n        var luminanceChange = -this.config.focusArea.maxLuminanceChange / metric.groupList.length;\n        var originalColor = this.panel.metricList[metricIndex].colorList[0].value;\n\n        metric.groupList.forEach((group, groupIndex) => {\n            group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n        });\n    }\n\n    initialiseSingleAttributeInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                for (var i = 0; i < metric.groupList.length; ++i) {\n                    var group = metric.groupList[i];\n\n                    if (instance.metricList[metricIndex].total == group.total) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.groupList = [];\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(this.overviewModel.groupList, (search) => {\n                for (var i = 0; i < instance.metricList.length; ++i) {\n                    if (instance.metricList[i].total != search.metricList[i].total) {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                this.overviewModel.groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n\n        this.initialiseMultiAttributeGroupsColor();\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiAttributeGroupsColor() {\n        var colorStep = (this.config.startingGreyColor - this.config.endingGrayColor) / this.overviewModel.groupList.length;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var greyValue = Math.round(this.config.startingGreyColor - colorStep * groupIndex);\n            group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n        });\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocus();\n            this.drawOverview();\n        }\n    }\n\n    clearFocus() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n        this.scope.$apply();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        this.overviewModel.toDate = this.getDateString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        // total width of overiew graph (groupsize excluded)\n        this.overviewModel.overviewWidth = this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth +\n            this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            this.config.overview.horizontalMarginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleAttributeGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiAttributeGroupSize() * this.config.overview.multipleAttributeGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var largestGroup = _.maxBy(metric.groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n\n        this.overviewModel.groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight * 2); // 2 = group + margin\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metricWithMostGroups = _.maxBy(this.overviewModel.metricList, (metric) => {\n                return metric.groupList.length;\n            });\n\n            groupCount = metricWithMostGroups.groupList.length;\n        } else {\n            groupCount = this.overviewModel.groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.metricWidth = this.getMaxMetricLength() * this.config.overview.pointWidth;\n        this.overviewModel.overviewEndY = 0;\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawTimeLabels();\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                metric.groupList.forEach((group, groupIndex) => {\n                    this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n                });\n            });\n        } else {\n            this.overviewModel.groupList.forEach((group, groupIndex) => {\n                var metricIndexList = this.getAllMetricIndexList();\n                this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n            });\n        }\n\n        this.drawGroupSize();\n        this.drawMetricSeparator();\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight,\n            this.config.overview.groupedPointHeight, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, index, pointHeight, marginBetweenInstances, metricIndexList) {\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        instance.y = this.overviewModel.overviewStartY + index * (pointHeight + marginBetweenInstances);\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstanceMetric(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstanceMetric(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            overviewMetric.startX = previousMetric.endX + this.config.overview.horizontalMarginBetweenMetrics;\n\n            if (this.isGrouped) {\n                overviewMetric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                    overviewMetric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                }\n            }\n        } else {\n            overviewMetric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n\n        this.drawOverviewInstancePoints(instance, metricIndex, overviewMetric, pointHeight);\n        overviewMetric.endX = overviewMetric.startX + this.overviewModel.metricWidth;\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, overviewMetric, pointHeight) {\n        var instanceMetric = instance.metricList[metricIndex];\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            point.x = overviewMetric.startX + pointIndex * this.config.overview.pointWidth;\n            point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n            this.overviewContext.fillStyle = point.color;\n            this.overviewContext.fillRect(point.x, instance.y, this.config.overview.pointWidth, pointHeight);\n        });\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n\n            metric.groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.overviewContext.fillStyle = \"black\";\n            this.overviewContext.fillText(\"Groups size\", (startX * 2 + maxGroupSizeBarLength - labelWidth) / 2, this.overviewModel.labelTextHeight);\n        });\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY + groupIndex * this.config.overview.groupedPointHeight * 2; // 2 = instance + margin between instances\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.horizontalMarginBetweenMetrics;\n        var maxEndX = 0;\n\n        this.overviewModel.groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", (startX + maxEndX - labelWidth) / 2, this.overviewModel.labelTextHeight);\n    }\n\n    drawMetricSeparator() {\n        this.overviewContext.strokeStyle = \"gray\";\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var x = metric.endX + this.config.overview.horizontalMarginBetweenMetrics / 2;\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n            }\n\n            this.overviewContext.beginPath();\n            this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n            this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n            this.overviewContext.stroke();\n            this.overviewContext.closePath();\n        }\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        this.drawGroupBars();\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.horizontalMarginBetweenMetrics / 2;\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.groupList.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x - Math.floor(this.config.overview.groupBarWidth / 2), y,\n                this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n        this.overviewContext.fillStyle = \"black\";\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var label = this.panel.metricList[i].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    drawTimeLabels() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    getDateString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectLinker() {\n        this.drawFocusArea();\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.focusModel.groupList = [];\n\n        this.overviewModel.groupList.forEach((group) => {\n            group.isSelected = false;\n        })\n\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.groupList) {\n                metric.groupList.forEach((group) => {\n                    group.isSelected = false;\n                });\n            }\n        });\n\n        this.showFocus = false;\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    moveMouseOnOverview(evt) {\n        this.setOverviewMousePosition(evt);\n\n        if (this.isGrouped) {\n            this.initialiseOverviewCanvasCursor();\n            var found = false;\n\n            for (var overviewIndex = 0; overviewIndex < this.overviewModel.metricList.length; ++overviewIndex) {\n                var metric = this.overviewModel.metricList[overviewIndex];\n\n                if (metric) {\n                    // only check if mouse is on a metric graph\n                    if (this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX)) {\n                        found = this.checkAndSetSelectedGroup(metric);\n                    }\n                }\n\n                if (found) {\n                    break;\n                }\n            }\n        } else if (!this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    checkAndSetSelectedGroup(metric) {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            for (var i = 0; i < metric.groupList.length; ++i) {\n                var group = metric.groupList[i];\n\n                if (this.checkGroupIsSelected(group)) {\n                    return true;\n                }\n            }\n        } else {\n            for (var i = 0; i < this.overviewModel.groupList.length; ++i) {\n                var group = this.overviewModel.groupList[i];\n\n                if (this.checkGroupIsSelected(group)) {\n                    return true;\n                }\n            }\n        }\n\n        this.overviewModel.hoveredGroup = null;\n        return false;\n    }\n\n    checkGroupIsSelected(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.overviewCursor = \"pointer\";\n            return true;\n        }\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    clickOnOverView(evt) {\n        this.setOverviewMousePosition(evt);\n\n        if (this.isGrouped) {\n            this.checkAndAddGroupToFocus();\n        } else {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    checkAndAddGroupToFocus() {\n        if (this.overviewModel.hoveredGroup) {\n            this.$timeout(() => {\n                var focusGroup = _.find(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == this.overviewModel.hoveredGroup;\n                })\n\n                if (focusGroup) {\n                    this.overviewModel.hoveredGroup.isSelected = false;\n\n                    _.remove(this.focusModel.groupList, (group) => {\n                        return group.overviewGroup == this.overviewModel.hoveredGroup;\n                    });\n                } else {\n                    this.overviewModel.hoveredGroup.isSelected = true;\n                    this.addGroupToFocus();\n                }\n\n                this.scope.$apply();\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph();\n            })\n        }\n    }\n\n    addGroupToFocus() {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = this.overviewModel.hoveredGroup;\n\n        this.overviewModel.hoveredGroup.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.clearFocus();\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, [metric])\n                });\n            });\n        } else {\n            this.overviewModel.groupList.forEach((group) => {\n                this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n            });\n        }\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var x = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(x, group.y, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n            });\n        }\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            // only update focus graph if mouse is pointing on one of metric overview graphs\n            if (this.checkMouseIsInMetric(metric)) {\n                this.drawFocusGraph();\n                break;\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            this.drawFocusAreaAndLinkers(true);\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    drawFocusAreaAndLinkers(doDrawLinkers) {\n        var size = this.getFocusAreaSize();\n        var offset = this.getFocusAreaOffset();\n\n        if (offset >= 0) {\n            if (doDrawLinkers) {\n                this.clearFocus();\n            }\n\n            this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.focusStartX = metric.startX + offset;\n                this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n            });\n\n            if (doDrawLinkers) {\n                this.drawLinkers();\n            }\n        }\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (this.checkMouseIsInMetric(metric)) {\n                this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                this.focusModel.sourceMetricIndex = i;\n\n                return Math.min(Math.max(metric.startX,\n                    this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                    metric.endX - this.getFocusAreaSize()) - metric.startX;\n            }\n        }\n    }\n\n    drawLinkers() {\n        var pixelData = this.overviewContext.getImageData(this.overviewModel.mousePosition.x, this.overviewModel.mousePosition.y, 1, 1).data;\n        this.focusAreaContext.strokeStyle = \"rgb(\" + pixelData[0] + \",\" + pixelData[1] + \",\" + pixelData[2] + \")\";\n        var instance = this.getLinkerTargetInstance();\n        instance = null; // temp flag to prevent drawing linkers\n\n        if (instance) {\n            this.overviewModel.metricList.forEach((metric, index) => {\n                if (!this.checkMouseIsInMetric(metric)) {\n                    this.drawLinkersByMode(metric, instance, index);\n                }\n            });\n        }\n    }\n\n    getLinkerTargetInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    drawLinkersByMode(metric, instance, index) {\n        switch (this.linkingMode) {\n            case this.enumList.linkingMode.X_CROSS:\n                this.drawXCross(metric, instance);\n                break;\n\n            case this.enumList.linkingMode.NORMAL_CROSS:\n                this.drawNormalCross(metric, instance);\n                break;\n\n            case this.enumList.linkingMode.CHANGE_COLOR:\n                this.changeInstanceColor(metric, instance, index);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    drawXCross(metric, instance) {\n        var centerX = metric.startX + this.overviewModel.mousePositionXOffset;\n        var leftStartX = centerX - this.config.focusArea.xCrossSize;\n        var rightStartX = centerX + this.config.overview.pointWidth;\n        var bottomInstance = instance.y + this.config.overview.ungroupedPointHeight;\n\n        this.drawXCrossLine(leftStartX, instance.y - this.config.focusArea.xCrossSize, instance.y);\n        this.drawXCrossLine(rightStartX, instance.y, instance.y - this.config.focusArea.xCrossSize);\n        this.drawXCrossLine(leftStartX, bottomInstance + this.config.focusArea.xCrossSize, bottomInstance);\n        this.drawXCrossLine(rightStartX, bottomInstance, bottomInstance + this.config.focusArea.xCrossSize);\n    }\n\n    drawXCrossLine(startX, startY, endY) {\n        this.drawLineOnFocusAreaCanvas(startX, startY, startX + this.config.focusArea.xCrossSize, endY);\n    }\n\n    drawLineOnFocusAreaCanvas(startX, startY, endX, endY) {\n        this.focusAreaContext.beginPath();\n        this.focusAreaContext.moveTo(startX, startY);\n        this.focusAreaContext.lineTo(endX, endY);\n        this.focusAreaContext.stroke();\n        this.focusAreaContext.closePath();\n    }\n\n    drawNormalCross(metric, instance) {\n        var focusSize = this.getFocusAreaSize();\n        var centertX = metric.startX + this.overviewModel.mousePositionXOffset;\n        var endX = metric.focusStartX + focusSize;\n        var distanceBetweenLines = this.config.overview.pointWidth * 2;\n        var leftLineX = centertX - distanceBetweenLines;\n        var rightLineX = centertX + distanceBetweenLines;\n        var topLineY = instance.y - distanceBetweenLines;\n        var bottomLineY = instance.y + distanceBetweenLines;\n        var endY = this.focusModel.focusStartY + focusSize;\n\n        this.drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY);\n    }\n\n    drawNormalCrossLines(metric, endX, leftLineX, rightLineX, topLineY, bottomLineY, endY) {\n        // top horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, topLineY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, topLineY, endX, topLineY);\n\n        // botton horizontal\n        this.drawLineOnFocusAreaCanvas(metric.focusStartX, bottomLineY, leftLineX, bottomLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, endX, bottomLineY);\n\n        // left vertical\n        this.drawLineOnFocusAreaCanvas(leftLineX, this.focusModel.focusStartY, leftLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(leftLineX, bottomLineY, leftLineX, endY);\n\n        // right vertical\n        this.drawLineOnFocusAreaCanvas(rightLineX, this.focusModel.focusStartY, rightLineX, topLineY);\n        this.drawLineOnFocusAreaCanvas(rightLineX, bottomLineY, rightLineX, endY);\n    }\n\n    changeInstanceColor(metric, instance, index) {\n        if (index == 0) {\n            this.clearFocus();\n        }\n\n        instance.metricList[index].data.forEach((instancePoint, pointIndex) => {\n            var colorList = this.panel.metricList[this.focusModel.sourceMetricIndex].colorList;\n            var colorMap = this.getColorMap(metric, colorList);\n            this.focusAreaContext.fillStyle = this.getColorFromMap(instancePoint.value, colorMap);\n            this.focusAreaContext.fillRect(instancePoint.x, instance.y, this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n\n            if (instancePoint.x == metric.startX + this.overviewModel.mousePositionXOffset) {\n                // vertical line\n                metric.data.forEach((metricInstance, metricInstanceIndex) => {\n                    var metricPoint = metricInstance.values[pointIndex];\n                    var value = metricPoint ? metricPoint[1] : 0\n                    this.focusAreaContext.fillStyle = this.getColorFromMap(value, colorMap);\n                    this.focusAreaContext.fillRect(instancePoint.x, this.overviewModel.data[metricInstanceIndex].y,\n                        this.overviewModel.overviewInstanceHeight, this.overviewModel.overviewInstanceHeight);\n                });\n            }\n        });\n\n        if (index == instance.metricList.length - 1) {\n            this.drawFocusAreaAndLinkers(false);\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n                this.focusModel.focusRowHeight = this.getElementByID(\"focusGraphRow\").offsetHeight;\n                this.setFocusFromAndToDate();\n                this.positionFocusFromAndToDate();\n                this.drawFocusGraphData();\n                this.autoSrollFocusGraph();\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.panel.metricList[metricIndex].colorList.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.getDateString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.getDateString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupedFocusMarkerAndGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupedFocusMarkerAndGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                    this.drawGroupedFocusGraph(groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup.color, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup.color, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, color, x) {\n        context.fillStyle = color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph(groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context);\n    }\n\n    drawFocusGraphInstance(instance, context) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                layer.valueList.forEach((value, valueIndex) => {\n                    x = this.getFocusGraphPointWidth() * valueIndex;\n                    this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                        this.overviewModel.metricList[metricIndex].layerRange);\n                    previousX = x;\n                    previousValue = value;\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex].value;\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context);\n        });\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getLinkerTargetInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startMarkerMovingInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startMarkerMovingInterval(group);\n        }\n    }\n\n    startMarkerMovingInterval(group) {\n        if (this.focusModel.groupWithInterval != group) {\n            this.stopInterval();\n            this.focusModel.groupWithInterval = group;\n            this.initialiseInterval();\n        }\n    }\n\n    stopInterval() {\n        if (this.currentInterval) {\n            this.$interval.cancel(this.currentInterval);\n\n            if (this.focusModel.groupWithInterval) {\n                this.focusModel.groupWithInterval.markerX = 0;\n                this.focusModel.groupWithInterval = null;\n\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = 0;\n                });\n\n                this.drawSelectedGroupsMarkers();\n            }\n        }\n    }\n\n    stopCurrentInterval() {\n        this.stopInterval();\n    }\n\n    initialiseInterval() {\n        this.focusModel.markerMovingBackwards = false;\n        this.focusModel.groupWithInterval.markerX = 0;\n\n        this.currentInterval = this.$interval(() => {\n            if (this.focusModel.markerMovingBackwards) {\n                this.handleMarkerMovingBackwardCase();\n            } else {\n                this.handleMarkerMovingForwardCase();\n            }\n\n            this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                overviewGroup.markerX = this.focusModel.groupWithInterval.markerX;\n            });\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.focusArea.intervalTimer);\n    }\n\n    handleMarkerMovingBackwardCase() {\n        if (this.focusModel.groupWithInterval.markerX == 0) {\n            this.focusModel.markerMovingBackwards = false;\n            ++this.focusModel.groupWithInterval.markerX;\n        } else {\n            --this.focusModel.groupWithInterval.markerX;\n        }\n    }\n\n    handleMarkerMovingForwardCase() {\n        if (this.focusModel.groupWithInterval.markerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.focusModel.markerMovingBackwards = true;\n            --this.focusModel.groupWithInterval.markerX;\n        } else {\n            ++this.focusModel.groupWithInterval.markerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectNode(instance) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        this.updateVariable(instance);\n    }\n\n    updateVariable(instance) {\n        this.variableSrv.variables.forEach((v) => {\n            if (v.name == \"node\") {\n                this.variableSrv.setOptionAsCurrent(v, {\n                    text: instance.instance,\n                    value: instance.instance\n                });\n\n                this.isUpdatingVariable = true;\n                this.variableSrv.variableUpdated(v, true);\n            }\n        });\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.colorList = [];\n\n        for (var i = 0; i < 4; ++i) {\n            var color = {};\n            color.value = \"#000000\";\n            metric.colorList.push(color);\n        }\n\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}