{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","scope","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupSizeBarWidth","pieRadius","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","groupSizeColor","overlapColor","selectedInstancesForFocusOffset","focusArea","color","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLength","barWidth","minimumBarHeight","marginBetweenSliderAndChart","thresholdBarLength","focusGraph","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","metricMinHeight","marginBetweenMetrics","maxWidth","markerSize","marginBetweenMarkers","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","initialiseColorListByMetric","colorList","luminanceChange","i","changeColorLuminance","tab","overviewModel","timeRangePositionMap","Map","histogramModel","data","focusAreaModel","groupMarkerList","focusModel","groupList","tabList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","groupSizeChart","HORIZONTAL_BAR","PIE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","isGrouped","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphContainer","id","find","canvas","getContext","addEditorTab","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","currentTab","initialiseNewTab","fromDateString","convertDateToString","toDateString","getDataFromAPI","processRawData","date","getTime","format","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","metricIndex","point","checkAndSetOverviewMinMax","overviewMetric","panelMetric","initialiseColorMapByMetric","layerRange","colorMap","getColorMap","threshold","average","set","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","sort","first","second","setHistogramMinMax","total","map","isBetween","target","start","end","initialiseSingleMetricGroups","initialiseMultiMetricGroups","initialiseSingleMetricGroupsByMetric","initialiseSingleMetricGroupsColor","initialiseSingleMetricInstanceGroupList","thresholdGroupListMap","populateSingleMetricGroupList","groupIndex","group","checkInstanceIsInGroup","initialiseNewSingleMetricGroup","instanceList","groupTotal","instanceTotal","thresholdValue","markerX","originalColor","getCurrentSingleMetricGroupList","populateMultiMetricGroupList","initialiseMultiMetricGroupsColor","findExistingMultiMetricGroup","initialiseNewMultiMetricGroup","instanceMetric","groupMetric","greyValue","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","getThresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","setGroupedOverviewPointWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","toDateWidth","setGroupedOverviewCanvasWidth","font","maxOriginalLength","getMaxMetricLengthByTab","originalLength","currentLength","nextScaledLength","scale","abs","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiMetricGroupSize","largestGroup","getCurrentMultiMetricGroupList","groupCount","getMaxGroupCount","instanceHeight","overviewHeight","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","drawSingeMetricGroupedOverview","drawMultiMetricGroupedOverview","drawGroupSize","drawGroupedOverviewWrapper","drawMetricSeparator","metricIndexList","y","drawOverviewInstance","pointHeight","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","groupSizeLabelWidth","drawSingleMetricGroupSize","drawMultipleMetricGroupSize","drawSingleMetricBarGroupSize","drawSingleMetricPieGroupSize","drawGroupSizeLabel","drawBarGroupSizeWrapper","selectedMetricIndexSet","isSelected","overlapCount","beginPath","moveTo","lineTo","closePath","fill","startAngle","PI","drawPieGroupSizeWrapper","size","endAngle","arc","fillText","maxEndX","strokeStyle","stroke","instanceIndex","getMetricDarkestColor","drawTimeLabels","timeLabelY","showHistogram","changedColorThreshold","temp","addOrRemoveGroupToFocus","overviewGroup","drawFocusGraph","removeExisting","focusGroup","timeRangeIndexList","remove","addGroupToFocus","setShowMergeGroupsButton","newGroupList","existingGroup","showMergeSelectedGroups","setShowMergeGroupsButtonWrapper","selectedGroupCount","drawOverviewGroupMarker","marker","startY","initialiseData","initialiseFocusGraphData","showFocus","setFocusGraphCanvasHeight","pointCount","focusedIndexList","floor","focusGraphWidth","focusGraphRow","setFocusFromAndToDate","positionFocusFromAndToDate","focusRowHeight","offsetHeight","drawFocusGraphData","autoSrollFocusGraph","showAllMetrics","focusGraphHeight","evt","mousePosition","getMousePos","isSelectingBar","setNewThresholdValue","checkAndSetSelectedHistogramThresholdBar","horizontalAxisStartX","selectedBar","drawHistogram","histogramCursor","topY","sliderY","bottomY","thresholdBarList","bar","leftX","rightX","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","deselectSingleMetricGroups","deselectMultiMetricGroups","originalGroupList","previousGroupThreshold","mergeSingleMetricGroups","mergeMultipleMetricGroups","mergeFocusGroupList","initialiseGroupsOverlapCount","drawSelectedGroupsMarkers","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","getCopyOfGroup","newGroup","oldFocusGroupList","mergeFocusGroupListWrapper","setMainMetricIndexAfterMerging","mainMetricIndex","selectedMetricIndex","overviewInstance","metricWithMostData","focusInstance","getFocusInstance","oldGroup","Set","add","checkOverlappingGroupsAndSetOverlapCount","check","overlappingGroup","overlappingInstance","isSelectingMetricLabel","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","focusAreaStartPoint","focusInArea","firstMetric","isDrawingFocusArea","histogramMetric","$watch","newValue","oldValue","drawHistogramAxes","drawHistogramMaxValueAndOccurence","drawHistogramBars","drawHistogramThresholdSlider","verticalAxisStartY","lineWdith","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","verticalLabelWidth","maxOccurenceWidth","horizontalAxisY","horizontalAxisEndX","labelX","labelY","occurenceLabelY","maxValueWidth","valueLabelY","originX","occurenceStep","minHeight","drawHistogramSliderLine","drawHistogramThresholdBars","thresholdBarY","drawTimeIndicators","drawSelectedTimeRanges","selectTab","setOverviewMousePosition","setSelectedMetricIndex","setOverviewCursorToPointer","deselectMetricLabel","handleMouseMoveOnGroupedOverview","drawFocusArea","focusAreaIsFixed","drawFocus","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","initialiseSelectedGroupTimeRangeIndexList","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","checkMouseIsOnTimeRange","isHoveringOnTimeRange","setSelectedTimeIndexAndDrawTimeIndicators","markerIndex","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","setSelectedTimeIndex","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","mouseIsInsideTimeRange","hoveredTimeRangeGroup","position","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","initialiseFocusAreaPoints","drawFocusAreaSquare","strokeRect","startFocusMarkerInterval","addNewTab","updateSelectedGroupListAndDrawFocusGraph","focusGroupWithInterval","stopInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","newTab","initialiseNewTabDatesAndData","timeRangeGroupList","getTimeRangeGroupList","initialiseNewTabDates","initialiseNewTabData","newMetric","newMetricInstance","updatedSelectedGroups","drawFocusAfterUpdatingSelectedGroups","initialiseOverlapList","drawOverlapDetails","overlappingList","next","getAllInstanceListForSelectedMetric","checkAndAddOverlappingInstance","concat","showOverlapDetails","overlapGraphHeight","drawOverlapInstance","context","valueIndexList","drawFocusGraphInstance","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","layerIndex","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","metricListIndex","totalValue","valueIndex","positionIndex","moveFocusGraphContextBasedOnValue","getUngroupedFocusCanvas","baseY","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.scope = $scope;\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD.MM HH:mm\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 9,\n            marginBetweenLabelsAndOverview: 15,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupSizeBarWidth: 1,\n            pieRadius: 8,\n            marginBetweenMarkerAndGroup: 25,\n            marginBetweenMetricAndGroupSize: 30,\n            groupSizeColor: \"lightgray\",\n            overlapColor: \"black\",\n            selectedInstancesForFocusOffset: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\"\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 20,\n            verticalAxisLength: 500,\n            barWidth: 5,\n            minimumBarHeight: 2,\n            marginBetweenSliderAndChart: 50,\n            thresholdBarLength: 10\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            groupedPointWidth: 5,\n            ungroupedPointWidth: 50,\n            metricMaxHeight: 20,\n            metricMinHeight: 5,\n            marginBetweenMetrics: 10,\n            maxWidth: 1000,\n            markerSize: 5,\n            marginBetweenMarkers: 5\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    //    query: \"node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        // this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                this.initialiseColorListByMetric(metric);\n            });\n        }\n    }\n\n    initialiseColorListByMetric(metric) {\n        // add lightest shade as defined by user\n        metric.colorList = [];\n        metric.colorList.push(metric.color);\n        var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n        // add the other shades\n        for (var i = 1; i < this.config.colorCount; ++i) {\n            var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n            metric.colorList.push(color);\n        }\n    }\n\n    initialiseNewTab() {\n        var tab = {};\n        tab.overviewModel = {};\n        tab.overviewModel.timeRangePositionMap = new Map();\n        tab.histogramModel = {};\n        tab.overviewModel.data = [];\n        tab.overviewModel.metricList = [];\n        tab.focusAreaModel = {};\n        tab.overviewModel.groupMarkerList = [];\n        tab.focusModel = {};\n        tab.focusModel.groupList = [];\n        this.tabList.push(tab);\n        return tab;\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            groupSizeChart: {\n                HORIZONTAL_BAR: \"1\",\n                PIE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupSizeChart = this.enumList.groupSizeChart.HORIZONTAL_BAR;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = this.isGrouped ? \"default\" : \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n            this.scope.$apply();\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.tabList = [];\n            this.currentTab = this.initialiseNewTab();\n\n            // time is in milliseconds\n            this.currentTab.fromDateString = this.convertDateToString(this.fromDate);\n            this.currentTab.toDateString = this.convertDateToString(this.toDate);\n\n            this.panel.metricList.forEach(() => {\n                this.currentTab.overviewModel.metricList.push(null);\n            });\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    // convert date in timestamp (seconds) to string\n    convertDateToString(date) {\n        return moment(date * 1000).format(this.config.dateFormat);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.currentTab.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.currentTab.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.currentTab.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.currentTab.overviewModel.metricList.forEach((overviewMetric, index) => {\n            var panelMetric = this.panel.metricList[index];\n            this.initialiseColorMapByMetric(overviewMetric, panelMetric);\n        });\n    }\n\n    initialiseColorMapByMetric(overviewMetric, panelMetric) {\n        var colorList = panelMetric.colorList;\n        overviewMetric.layerRange = Math.round(overviewMetric.max / colorList.length);\n\n        // map a range of values to a color\n        overviewMetric.colorMap = this.getColorMap(overviewMetric, colorList);\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.currentTab.overviewModel.data = [];\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.currentTab.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[0] - second[0];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.currentTab.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    //    metric.total += this.getThresholdAverage(point.value, this.currentTab.overviewModel.metricList[metricIndex].colorMap);\n                    metric.total += point.value;\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.currentTab.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleMetricGroups();\n        this.initialiseMultiMetricGroups();\n    }\n\n    initialiseSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseSingleMetricGroupsByMetric(metric, metricIndex);\n            this.initialiseSingleMetricGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleMetricInstanceGroupList();\n    }\n\n    initialiseSingleMetricGroupsByMetric(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var group = groupList[groupIndex];\n                group.name = this.panel.metricList[metricIndex].name + \" group \" + (groupIndex + 1);\n            }\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold) {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                return this.checkInstanceIsInGroup(search.total, instance.metricList[metricIndex].total, groupingThreshold);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleMetricGroup(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceIsInGroup(groupTotal, instanceTotal, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n        var min = groupTotal * (1 - thresholdValue);\n        var max = groupTotal * (1 + thresholdValue);\n        return this.isBetween(instanceTotal, min, max);\n    }\n\n    initialiseNewSingleMetricGroup(instance, metricIndex) {\n        var group = {};\n        group.metricIndex = metricIndex;\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleMetricGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleMetricInstanceGroupList() {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                for (var i = 0; i < groupList.length; ++i) {\n                    var group = groupList[i];\n\n                    if (this.checkInstanceIsInGroup(group.total, instance.metricList[metricIndex].total, this.groupingThreshold)) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiMetricGroups() {\n        this.currentTab.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiMetricGroupList(groupList, groupingThreshold);\n            this.currentTab.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiMetricGroupsColor();\n    }\n\n    populateMultiMetricGroupList(groupList, groupingThreshold) {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiMetricGroup(groupList, instance, groupingThreshold);\n\n            if (!group) {\n                group = this.initialiseNewMultiMetricGroup(instance, groupList);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiMetricGroup(groupList, instance, groupingThreshold) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n\n                if (!this.checkInstanceIsInGroup(metric.total, instance.metricList[i].total, groupingThreshold)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiMetricGroup(instance, groupList) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.name = \"Group \" + (groupList.length + 1);\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiMetricGroupsColor() {\n        this.currentTab.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.currentTab.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.currentTab.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.currentTab.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        this.clearFocusArea();\n        this.drawOverview();\n    }\n\n    clearFocusArea() {\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        if (!this.isLoading) {\n            this.$timeout(() => {\n                this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n                this.setOverviewCanvasSize();\n                this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n                this.scope.$apply();\n                this.drawOverviewData();\n            });\n        }\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.currentTab.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.currentTab.overviewModel.overviewStartY = this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.currentTab.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.currentTab.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.currentTab.overviewModel.metricList.length - 1);\n        this.currentTab.overviewModel.pointWidth = this.config.overview.pointWidth;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewPointWidth();\n        }\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                this.currentTab.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.currentTab.overviewModel.pointWidth;\n            });\n        } else {\n            this.currentTab.overviewModel.overviewWidth +=\n                this.getMaxMetricLength() * this.currentTab.overviewModel.metricList.length * this.currentTab.overviewModel.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.currentTab.overviewModel.overviewWidth;\n        this.currentTab.overviewModel.fromDate = this.convertDateToString(this.fromDate);\n        this.currentTab.overviewModel.toDate = this.convertDateToString(this.toDate);\n        this.currentTab.overviewModel.toDateWidth = this.overviewContext.measureText(this.currentTab.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.currentTab.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    setGroupedOverviewPointWidth() {\n        if (this.currentTab != this.tabList[0]) {\n            var maxOriginalLength = this.getMaxMetricLengthByTab(this.tabList[0]);\n\n            if (maxOriginalLength > 0) {\n                var originalLength = this.getMaxMetricLength();\n                var currentLength = originalLength;\n                var nextScaledLength = currentLength;\n                var scale = 1;\n\n                while (currentLength < maxOriginalLength && nextScaledLength < maxOriginalLength) {\n                    currentLength = nextScaledLength;\n                    ++scale;\n                    nextScaledLength = originalLength * scale;\n                }\n\n                if (Math.abs(maxOriginalLength - originalLength) > Math.abs(nextScaledLength - maxOriginalLength)) {\n                    this.currentTab.overviewModel.pointWidth *= (scale - 1);\n                } else {\n                    this.currentTab.overviewModel.pointWidth *= scale;\n                }\n            }\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        return this.getMaxMetricLengthByTab(this.currentTab);\n    }\n\n    getMaxMetricLengthByTab(tab) {\n        var length = 0;\n\n        if (tab.overviewModel.metricList) {\n            tab.overviewModel.metricList.forEach((metric) => {\n                var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                    return point.values.length;\n                });\n\n                length = instanceWithMostPoints.values.length;\n            });\n        }\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.currentTab.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.currentTab.overviewModel.metricList.length;\n\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n            });\n\n            /*\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.currentTab.overviewModel.metricList.forEach((metric) => {\n                    this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n                });\n            } else {\n                this.overviewCanvasWidth += this.currentTab.overviewModel.metricList.length + this.config.overview.pieRadius * 2;\n            }*/\n        } else {\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                    this.getMaxMultiMetricGroupSize() * this.config.overview.groupSizeBarWidth;\n            } else {\n                this.overviewCanvasWidth += this.config.overview.pieRadius * 2;\n            }\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.groupSizeBarWidth;\n    }\n\n    getCurrentSingleMetricGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiMetricGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiMetricGroupList() {\n        return this.currentTab.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.currentTab.overviewModel.instanceHeight = this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups;\n            } else {\n                this.currentTab.overviewModel.instanceHeight = this.config.overview.pieRadius * 2 + this.config.overview.marginBetweenGroups;\n            }\n\n            this.currentTab.overviewModel.overviewHeight = groupCount * this.currentTab.overviewModel.instanceHeight;\n        } else {\n            this.currentTab.overviewModel.instanceHeight = this.config.overview.ungroupedPointHeight;\n            this.currentTab.overviewModel.overviewHeight = this.currentTab.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.currentTab.overviewModel.overviewHeight +\n            (this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 3; // metric label, from/to date, selected date\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.currentTab.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.currentTab.overviewModel.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.currentTab.overviewModel.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.currentTab.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    metric.startX += this.config.overview.marginBetweenMetricAndGroupSize;\n\n                    if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                        var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                        metric.startX += maxGroupSizeBarLength;\n                    } else {\n                        metric.startX += this.config.overview.pieRadius * 2;\n                    }\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeMetricGroupedOverview();\n        } else {\n            this.drawMultiMetricGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeMetricGroupedOverview() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupedOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            if (metricIndex < this.currentTab.overviewModel.metricList.length - 1) {\n                this.drawMetricSeparator(metric);\n            }\n        });\n    }\n\n    drawGroupedOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        instance.y = this.currentTab.overviewModel.overviewStartY + groupIndex * this.currentTab.overviewModel.instanceHeight;\n\n        if (this.groupSizeChart == this.enumList.groupSizeChart.PIE) {\n            instance.y += this.currentTab.overviewModel.instanceHeight / 2;\n        }\n\n        this.drawOverviewInstance(instance, this.config.overview.groupedPointHeight, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, pointHeight, metricIndexList) {\n        var endY = instance.y + this.currentTab.overviewModel.instanceHeight;\n\n        if (endY > this.currentTab.overviewModel.overviewEndY) {\n            this.currentTab.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * this.currentTab.overviewModel.pointWidth;\n        point.color = this.getColorFromMap(point.value, this.currentTab.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, this.currentTab.overviewModel.pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result = null;\n\n        map.forEach((color, threshold) => {\n            if (!result && this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiMetricGroupedOverview() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupedOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.currentTab.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        this.currentTab.overviewModel.groupSizeLabelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleMetricGroupSize();\n        } else {\n            this.drawMultipleMetricGroupSize();\n        }\n    }\n\n    drawSingleMetricGroupSize() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                    this.drawSingleMetricBarGroupSize(group, startX);\n                } else {\n                    this.drawSingleMetricPieGroupSize(group, startX);\n                }\n            });\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n            } else {\n                this.drawGroupSizeLabel((startX * 2 + this.config.overview.pieRadius - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n            }\n        });\n    }\n\n    drawSingleMetricBarGroupSize(group, startX) {\n        this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n        // don't draw overlap if group isn't selected and is in a selected metric\n        if (this.currentTab.overviewModel.selectedMetricIndexSet &&\n            (!this.currentTab.overviewModel.selectedMetricIndexSet.has(group.metricIndex) || group.isSelected)) {\n            this.drawBarGroupSizeWrapper(group, startX, group.overlapCount, this.config.overview.overlapColor);\n        }\n    }\n\n    drawBarGroupSizeWrapper(group, startX, length, color) {\n        var endX = startX + length * this.config.overview.groupSizeBarWidth;\n        var endY = group.y + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, group.y);\n        this.overviewContext.lineTo(endX, group.y);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawSingleMetricPieGroupSize(group, startX) {\n        var startAngle = -0.5 * Math.PI;\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.instanceList.length, this.config.overview.groupSizeColor);\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.overlapCount, this.config.overview.overlapColor);\n    }\n\n    drawPieGroupSizeWrapper(group, startX, startAngle, size, color) {\n        var x = startX + this.config.overview.pieRadius;\n        var endAngle = startAngle + size * 2 * Math.PI / 360;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, group.y);\n        this.overviewContext.arc(x, group.y, this.config.overview.pieRadius, startAngle, endAngle);\n        this.overviewContext.lineTo(x, group.y);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endAngle;\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.currentTab.overviewModel.labelTextHeight);\n    }\n\n    drawMultipleMetricGroupSize() {\n        var startX = this.currentTab.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize +\n            this.currentTab.overviewModel.groupSizeLabelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            x += this.config.overview.marginBetweenMetricAndGroupSize;\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                x += maxGroupSizeBarLength;\n            } else {\n                x += this.config.overview.pieRadius * 2;\n            }\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.currentTab.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.currentTab.overviewModel.overviewStartY + this.currentTab.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.currentTab.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            instance.y = this.currentTab.overviewModel.overviewStartY + instanceIndex * this.currentTab.overviewModel.instanceHeight;\n            this.drawOverviewInstance(instance, this.currentTab.overviewModel.instanceHeight, metricIndexList);\n        });\n    }\n\n    drawMetricLabels() {\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            this.setOverviewContextLabelFont();\n            var metric = this.currentTab.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.currentTab.overviewModel.labelTextHeight);\n\n            if (this.isGrouped && !this.isCompressed) {\n                this.drawTimeLabels(metric);\n            }\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawTimeLabels(metric) {\n        this.setOverviewContextTimeFont();\n        metric.timeLabelY = this.config.overview.marginBetweenLabelsAndOverview;\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        if (groupList.length > 0) {\n            metric.timeLabelY += groupList[groupList.length - 1].y + this.config.overview.groupedPointHeight;\n        }\n\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.currentTab.overviewModel.fromDate, metric.startX - this.currentTab.overviewModel.toDateWidth / 2, metric.timeLabelY);\n        this.overviewContext.fillText(this.currentTab.overviewModel.toDate, metric.endX - this.currentTab.overviewModel.toDateWidth / 2, metric.timeLabelY);\n    }\n\n    closeHistogram() {\n        this.showHistogram = false;\n\n        if (this.changedColorThreshold) {\n            this.changedColorThreshold = false;\n            this.drawOverview();\n\n            if (this.isGrouped) {\n                var temp = this.currentTab.focusModel.groupList;\n                this.currentTab.focusModel.groupList = [];\n\n                temp.forEach((group) => {\n                    this.addOrRemoveGroupToFocus(group.overviewGroup, true);\n                });\n\n                this.drawFocusGraph();\n            } else {\n                this.drawFocusGraph();\n            }\n        }\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.currentTab.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        });\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n                group.timeRangeIndexList = null;\n\n                // deselect group from focus\n                _.remove(this.currentTab.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    removeExistingFocusGroupInSameMetric(group) {\n        var newGroupList = [];\n\n        this.currentTab.focusModel.groupList.forEach((existingGroup) => {\n            if (existingGroup.overviewGroup.metricIndex == group.metricIndex) {\n                existingGroup.overviewGroup.isSelected = false;\n            } else {\n                newGroupList.push(existingGroup);\n            }\n        });\n\n        this.currentTab.focusModel.groupList = newGroupList;\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.currentTab.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.currentTab.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.currentTab.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.currentTab.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    drawFocusGraph(initialiseData) {\n        if (!this.isGrouped && initialiseData) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.currentTab.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.currentTab.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.setFocusGraphCanvasHeight();\n                var pointCount = this.currentTab.focusModel.focusedIndexList.length - 1;\n                var pointWidth;\n\n                if (this.isGrouped) {\n                    pointWidth = Math.max(1, Math.floor(this.config.focusGraph.maxWidth / pointCount));\n                } else {\n                    pointWidth = this.config.focusGraph.ungroupedPointWidth;\n                }\n\n                this.focusGraphWidth = Math.min(this.config.focusGraph.maxWidth, pointCount * pointWidth);\n                this.scope.$apply();\n                this.currentTab.focusModel.pointWidth = Math.max(1, Math.floor(this.focusGraphWidth / pointCount));\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.setFocusFromAndToDate();\n\n                    if (!this.isGrouped) {\n                        this.positionFocusFromAndToDate();\n                    }\n\n                    this.currentTab.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    setFocusGraphCanvasHeight() {\n        if (this.isGrouped) {\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                if (group.showAllMetrics) {\n                    group.focusGraphHeight = this.currentTab.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.currentTab.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    group.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        } else {\n            this.currentTab.focusModel.data.forEach((instance) => {\n                if (instance.showAllMetrics) {\n                    instance.focusGraphHeight = this.currentTab.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.currentTab.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    instance.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        }\n    }\n\n    moveMouseOnHistogram(evt) {\n        this.currentTab.histogramModel.mousePosition = this.getMousePos(evt, this.histogramCanvas);\n\n        if (this.currentTab.histogramModel.isSelectingBar) {\n            this.setNewThresholdValue();\n        } else {\n            this.checkAndSetSelectedHistogramThresholdBar();\n        }\n    }\n\n    setNewThresholdValue() {\n        this.changedColorThreshold = true;\n        var value = Math.round((this.currentTab.histogramModel.mousePosition.x - this.currentTab.histogramModel.horizontalAxisStartX) / this.config.histogram.barWidth);\n        value = Math.max(value, 1);\n        value = Math.min(value, this.currentTab.histogramModel.metric.max - 1);\n\n        this.currentTab.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            if (threshold != this.currentTab.histogramModel.selectedBar.threshold) {\n                if (value >= this.currentTab.histogramModel.selectedBar.threshold.max) {\n                    // move right\n                    if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                        value = Math.min(value, threshold.max - 1);\n                        threshold.min = value;\n                    }\n                } else {\n                    // move left\n                    if (this.currentTab.histogramModel.selectedBar.threshold.min == 0) {\n                        // left most threshold\n                        if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    } else {\n                        // left threshold\n                        if (threshold.max == this.currentTab.histogramModel.selectedBar.threshold.min) {\n                            value = Math.max(value, threshold.max + 1);\n                        }\n\n                        // right threshold\n                        if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    }\n                }\n            }\n        });\n\n        this.currentTab.histogramModel.selectedBar.threshold.max = value;\n        this.drawHistogram();\n    }\n\n    checkAndSetSelectedHistogramThresholdBar() {\n        this.histogramCursor = \"default\";\n        this.currentTab.histogramModel.selectedBar = null;\n        var topY = this.currentTab.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        var bottomY = this.currentTab.histogramModel.sliderY + this.config.histogram.thresholdBarLength / 2;\n\n        if (this.isBetween(this.currentTab.histogramModel.mousePosition.y, topY, bottomY)) {\n            for (var i = 0; i < this.currentTab.histogramModel.thresholdBarList.length; ++i) {\n                var bar = this.currentTab.histogramModel.thresholdBarList[i];\n                var leftX = bar.x - this.config.histogram.barWidth;\n                var rightX = bar.x + this.config.histogram.barWidth;\n\n                if (this.isBetween(this.currentTab.histogramModel.mousePosition.x, leftX, rightX)) {\n                    this.histogramCursor = \"pointer\";\n                    this.currentTab.histogramModel.selectedBar = bar;\n                    break;\n                }\n            }\n        }\n    }\n\n    mouseDownOnHistogram() {\n        if (this.currentTab.histogramModel.selectedBar) {\n            this.currentTab.histogramModel.isSelectingBar = true;\n        }\n    }\n\n    mouseUpOnHistogram() {\n        this.currentTab.histogramModel.isSelectingBar = false;\n        this.currentTab.histogramModel.selectedBar = null;\n        this.histogramCursor = \"default\";\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        if (!this.isLoading) {\n            this.drawOverview();\n            this.clearFocusArea();\n            this.clearTimeIndicator();\n            this.deselectAllGroups();\n            this.showFocus = false;\n            this.showMergeSelectedGroups = false;\n        }\n    }\n\n    deselectAllGroups() {\n        this.currentTab.focusModel.groupList = [];\n        this.currentTab.overviewModel.timeRangePositionMap = new Map();\n        this.deselectSingleMetricGroups();\n        this.deselectMultiMetricGroups();\n    }\n\n    deselectSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                    group.overlapCount = 0;\n                });\n            }\n        });\n    }\n\n    deselectMultiMetricGroups() {\n        if (this.currentTab.overviewModel.originalGroupList) {\n            this.currentTab.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.currentTab.overviewModel.originalGroupList);\n            this.currentTab.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.initialiseSingleMetricInstanceGroupList();\n        this.changeGroupingSelection();\n    }\n\n    selectGroupsizeChart() {\n        this.drawOverview();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    mergeSelectedGroups() {\n        this.showMergeSelectedGroups = false;\n\n        // store current threshold value to restore original groups when threshold is changed\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleMetricGroups();\n        } else {\n            this.mergeMultipleMetricGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.initialiseGroupsOverlapCount();\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n    }\n\n    mergeSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = this.getCopyOfGroup(group);\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    getCopyOfGroup(group) {\n        var newGroup = {};\n        newGroup.name = group.name;\n        newGroup.metricIndex = group.metricIndex;\n        newGroup.instanceList = group.instanceList;\n        newGroup.total = group.total;\n        newGroup.color = group.color;\n        newGroup.isSelected = group.isSelected;\n        newGroup.markerX = group.markerX;\n        newGroup.y = group.y;\n        return newGroup;\n    }\n\n    mergeFocusGroupList() {\n        var oldFocusGroupList = this.currentTab.focusModel.groupList;\n        this.currentTab.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiMetricGroupList());\n        }\n\n        this.setMainMetricIndexAfterMerging(oldFocusGroupList);\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n        focusGroup.mainMetricIndex = this.currentTab.overviewModel.selectedMetricIndex;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.currentTab.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.currentTab.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.currentTab.focusModel.groupList.push(focusGroup);\n    }\n\n    setMainMetricIndexAfterMerging(oldFocusGroupList) {\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            var oldGroup = _.find(oldFocusGroupList, (search) => {\n                return search.overviewGroup == group.overviewGroup;\n            });\n\n            if (oldGroup) {\n                group = oldGroup.mainMetricIndex;\n            }\n        });\n    }\n\n    initialiseGroupsOverlapCount() {\n        this.currentTab.overviewModel.selectedMetricIndexSet = new Set();\n\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            this.currentTab.overviewModel.selectedMetricIndexSet.add(group.overviewGroup.metricIndex);\n        });\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                group.overlapCount = 0;\n\n                if (this.currentTab.focusModel.groupList.length > 0) {\n                    this.checkOverlappingGroupsAndSetOverlapCount(group);\n                }\n            });\n        });\n    }\n\n    checkOverlappingGroupsAndSetOverlapCount(group) {\n        group.instanceList.forEach((instance) => {\n            var check = 0;\n\n            this.currentTab.focusModel.groupList.forEach((overlappingGroup) => {\n                if (overlappingGroup.overviewGroup.metricIndex != group.metricIndex) {\n                    var overlappingInstance = _.find(overlappingGroup.overviewGroup.instanceList, (search) => {\n                        return search.instance == instance.instance;\n                    });\n\n                    if (overlappingInstance) {\n                        ++check;\n                    }\n                }\n            });\n\n            if (group.isSelected) {\n                if (check == this.currentTab.overviewModel.selectedMetricIndexSet.size - 1) {\n                    ++group.overlapCount;\n                }\n            } else if (check == this.currentTab.overviewModel.selectedMetricIndexSet.size) {\n                ++group.overlapCount;\n            }\n        });\n    }\n\n    mergeMultipleMetricGroups() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        if (!this.currentTab.overviewModel.originalGroupList) {\n            this.currentTab.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.currentTab.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.currentTab.overviewModel.thresholdGroupListMap) {\n            this.currentTab.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.currentTab.overviewModel.metricList) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n                this.currentTab.overviewModel.isSelectingTimeRange = true;\n                this.currentTab.overviewModel.timeRangeStartOffset = this.currentTab.overviewModel.mousePositionXOffset;\n                this.currentTab.overviewModel.timeRangeGroup = this.currentTab.overviewModel.hoveredGroup;\n            }\n        } else {\n            this.currentTab.overviewModel.focusAreaStartPoint = {};\n            this.focusInArea = false;\n            var firstMetric = this.currentTab.overviewModel.metricList[0];\n            this.currentTab.overviewModel.focusAreaStartPoint.x =\n                Math.max(firstMetric.startX, this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX);\n            this.currentTab.overviewModel.focusAreaStartPoint.y = this.currentTab.overviewModel.mousePosition.y;\n            this.isDrawingFocusArea = true;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        this.currentTab.histogramModel.metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        this.histogramMetric = this.panel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n        this.scope.$watch(\"ctrl.histogramMetric.color\", (newValue, oldValue) => {\n            if (newValue != oldValue) {\n                this.initialiseColorListByMetric(this.histogramMetric);\n                this.initialiseColorMapByMetric(this.currentTab.histogramModel.metric, this.histogramMetric);\n                this.drawHistogram();\n            }\n        });\n\n        this.drawHistogramAxes();\n        this.drawHistogramMaxValueAndOccurence();\n        this.drawHistogramBars();\n        this.drawHistogramThresholdSlider();\n    }\n\n    drawHistogramAxes() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.currentTab.histogramModel.verticalAxisStartY = this.currentTab.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.lineWdith = 1;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"gray\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis();\n        this.drawHistogramHorizontalAxis();\n    }\n\n    drawHistogramVerticalAxis() {\n        var occurences = \"occurences\";\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(this.currentTab.histogramModel.metric.histogram.max).width;\n        this.currentTab.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(\"occurences\", this.currentTab.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.currentTab.overviewModel.labelTextHeight);\n        this.currentTab.histogramModel.horizontalAxisY = this.currentTab.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLength;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis() {\n        this.currentTab.histogramModel.horizontalAxisEndX = this.currentTab.histogramModel.horizontalAxisStartX +\n            this.config.histogram.barWidth * (this.currentTab.histogramModel.metric.max + 1);\n        var labelX = this.currentTab.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.currentTab.histogramModel.horizontalAxisY + this.currentTab.overviewModel.labelTextHeight / 2;\n        this.histogramCanvasContext.fillText(this.histogramMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisEndX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        var occurenceLabelY = this.currentTab.histogramModel.verticalAxisStartY + this.currentTab.overviewModel.labelTextHeight / 2\n        this.histogramCanvasContext.fillText(this.currentTab.histogramModel.metric.histogram.max, 0, occurenceLabelY);\n        var maxValueWidth = this.histogramCanvasContext.measureText(this.currentTab.histogramModel.metric.max).width;\n        var valueLabelY = this.currentTab.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.currentTab.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(this.currentTab.histogramModel.metric.max, this.currentTab.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.currentTab.histogramModel.horizontalAxisStartX - this.currentTab.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    drawHistogramBars() {\n        var occurenceStep = this.config.histogram.verticalAxisLength / this.currentTab.histogramModel.metric.histogram.max;\n\n        this.currentTab.histogramModel.metric.histogram.data.forEach((occurences, value) => {\n            this.histogramCanvasContext.fillStyle = this.getColorFromMap(value, this.currentTab.histogramModel.metric.colorMap);\n            var x = this.currentTab.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * value;\n            var y = this.currentTab.histogramModel.horizontalAxisY - occurenceStep * occurences;\n            var height = this.currentTab.histogramModel.horizontalAxisY - y;\n            var minHeight = this.config.histogram.minimumBarHeight;\n\n            if (height < minHeight) {\n                y = this.currentTab.histogramModel.horizontalAxisY - minHeight;\n                height = minHeight;\n            }\n\n            this.histogramCanvasContext.fillRect(x, y, this.config.histogram.barWidth, height);\n        });\n    }\n\n    drawHistogramThresholdSlider() {\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.drawHistogramSliderLine();\n        this.drawHistogramThresholdBars();\n    }\n\n    drawHistogramSliderLine() {\n        this.currentTab.histogramModel.sliderY = this.currentTab.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenSliderAndChart;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.sliderY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisEndX, this.currentTab.histogramModel.sliderY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramThresholdBars() {\n        var thresholdBarY = this.currentTab.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        this.currentTab.histogramModel.thresholdBarList = [];\n        var i = 0;\n\n        this.currentTab.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            var bar = {};\n            bar.threshold = threshold;\n            bar.x = this.currentTab.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * (threshold.max + 1);\n\n            // no need to draw slider bar for last threshold\n            if (i < this.currentTab.histogramModel.metric.colorMap.size - 1) {\n                this.histogramCanvasContext.beginPath();\n                this.histogramCanvasContext.moveTo(bar.x, thresholdBarY);\n                this.histogramCanvasContext.lineTo(bar.x, thresholdBarY + this.config.histogram.thresholdBarLength);\n                this.histogramCanvasContext.stroke();\n                this.histogramCanvasContext.closePath();\n                ++i;\n            }\n\n            this.currentTab.histogramModel.thresholdBarList.push(bar);\n        });\n    }\n\n    selectTab(tab) {\n        this.currentTab = tab;\n\n        this.$timeout(() => {\n            this.drawOverview();\n            this.drawSelectedGroupsMarkers();\n            this.drawFocusGraph();\n\n            this.$timeout(() => {\n                if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                    this.drawTimeIndicators();\n                } else {\n                    this.drawSelectedTimeRanges();\n                }\n            });\n        });\n    }\n\n    removeTab(tab) {\n        _.remove(this.tabList, (search) => {\n            return search == tab;\n        });\n\n        if (this.currentTab == tab) {\n            this.selectTab(this.tabList[0]);\n        }\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.currentTab.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n                // check if mouse is on metric label\n                var bottomY = this.currentTab.overviewModel.overviewStartY - this.config.overview.marginBetweenLabelsAndOverview;\n\n                if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, 0, bottomY)) {\n                    this.isSelectingMetricLabel = true;\n                    this.setOverviewCursorToPointer();\n                } else {\n                    this.deselectMetricLabel();\n                }\n            } else {\n                this.deselectMetricLabel();\n            }\n\n            if (this.isGrouped) {\n                this.handleMouseMoveOnGroupedOverview();\n            } else if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n                if (this.isDrawingFocusArea) {\n                    this.drawFocusArea();\n                } else if (!this.focusAreaIsFixed) {\n                    this.clearFocusArea();\n                    this.drawFocus();\n                }\n            }\n        } else {\n            this.deselectMetricLabel();\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.currentTab.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.currentTab.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.currentTab.overviewModel.selectedMetricIndex = metricIndex;\n                    // set x position of mouse per overview graph for easier manipulation with mouse positions\n                    this.currentTab.overviewModel.mousePositionXOffset =\n                        this.currentTab.overviewModel.mousePosition.x - metric.startX + this.currentTab.overviewModel.metricList[0].startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.currentTab.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    deselectMetricLabel() {\n        this.isSelectingMetricLabel = false;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.currentTab.overviewModel.hoveredGroup = null;\n        this.currentTab.overviewModel.hoveredMarker = null;\n\n        if (this.currentTab.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n            this.drawFocusGraph(false);\n        } else {\n            this.checkAndSetSelectedOverviewMarker();\n\n            if (this.currentTab.overviewModel.selectedMetricIndex >= 0) {\n                this.checkAndSetHoveredGroup();\n                this.checkMouseIsOnTimeRange();\n            }\n\n            if (this.currentTab.overviewModel.isHoveringOnTimeRange) {\n                this.overviewCursor = \"pointer\";\n            }\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                this.setSelectedTimeIndexAndDrawTimeIndicators();\n            }\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.currentTab.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.currentTab.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.currentTab.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.setOverviewCursorToPointer();\n                this.currentTab.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.currentTab.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndexAndDrawTimeIndicators() {\n        if (this.currentTab.overviewModel.hoveredGroup) {\n            if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                this.setSelectedTimeIndex();\n            }\n\n            this.drawTimeIndicators();\n        } else {\n            this.clearTimeIndicator();\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.currentTab.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.currentTab.overviewModel.mousePosition.x, point.x, point.x + this.currentTab.overviewModel.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex]);\n        } else {\n            this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.currentTab.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.currentTab.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.currentTab.overviewModel.mousePositionXOffset - this.currentTab.overviewModel.metricList[0].startX;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.currentTab.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.currentTab.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleMetricGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point, overviewMetric)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point, overviewMetric)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point, metric) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date);\n            var y = metric.timeLabelY + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.currentTab.overviewModel.mousePosition.x - this.currentTab.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    checkMouseIsOnTimeRange() {\n        this.currentTab.overviewModel.isHoveringOnTimeRange = false;\n        this.currentTab.overviewModel.mouseIsInsideTimeRange = false;\n        this.currentTab.overviewModel.hoveredTimeRangeGroup = null;\n\n        this.currentTab.overviewModel.timeRangePositionMap.forEach((position, group) => {\n            if (this.currentTab.overviewModel.selectedMetricIndex == group.metricIndex &&\n                this.isBetween(this.currentTab.overviewModel.mousePosition.y, position.startY, group.y)) {\n                this.currentTab.overviewModel.isHoveringOnTimeRange = true;\n                this.currentTab.overviewModel.hoveredTimeRangeGroup = group;\n\n                if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, position.startX, position.endX)) {\n                    this.currentTab.overviewModel.mouseIsInsideTimeRange = true;\n                }\n            }\n        });\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var metricIndex = this.currentTab.overviewModel.selectedMetricIndex;\n        var instanceMetric = this.currentTab.overviewModel.timeRangeGroup.instanceList[0].metricList[metricIndex];\n        var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n        var startX = overviewMetric.startX + this.currentTab.overviewModel.timeRangeStartOffset - this.currentTab.overviewModel.metricList[0].startX;\n        var firstMetric = this.currentTab.overviewModel.metricList[0];\n        var endX = overviewMetric.startX + this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.currentTab.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.metricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.currentTab.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.metricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiMetricGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.currentTab.overviewModel.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n\n        var position = {\n            startX: startX,\n            endX: endX,\n            startY: startY\n        };\n\n        this.currentTab.overviewModel.timeRangePositionMap.set(group, position);\n    }\n\n    drawFocusArea() {\n        this.initialiseFocusAreaPoints();\n\n        if (this.currentTab.focusAreaModel.startX != this.currentTab.focusAreaModel.endX &&\n            this.currentTab.focusAreaModel.startY != this.currentTab.focusAreaModel.endY) {\n            this.focusInArea = true;\n            this.focusAreaIsFixed = false;\n            this.drawFocusAreaSquare();\n        } else {\n            this.focusInArea = false;\n        }\n    }\n\n    initialiseFocusAreaPoints() {\n        var firstMetric = this.currentTab.overviewModel.metricList[0];\n        this.currentTab.focusAreaModel.startX = this.currentTab.overviewModel.focusAreaStartPoint.x;\n        this.currentTab.focusAreaModel.endX = this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (this.currentTab.focusAreaModel.startX > this.currentTab.overviewModel.mousePositionXOffset) {\n            this.currentTab.focusAreaModel.startX = this.currentTab.overviewModel.mousePositionXOffset;\n            this.currentTab.focusAreaModel.endX = this.currentTab.overviewModel.focusAreaStartPoint.x;\n        }\n\n        this.currentTab.focusAreaModel.startY = this.currentTab.overviewModel.focusAreaStartPoint.y;\n        this.currentTab.focusAreaModel.endY = this.currentTab.overviewModel.mousePosition.y;\n\n        if (this.currentTab.focusAreaModel.startY > this.currentTab.overviewModel.mousePosition.y) {\n            this.currentTab.focusAreaModel.startY = this.currentTab.overviewModel.mousePosition.y;\n            this.currentTab.focusAreaModel.endY = this.currentTab.overviewModel.focusAreaStartPoint.y;\n        }\n\n        this.currentTab.focusAreaModel.startX = Math.max(this.currentTab.focusAreaModel.startX, firstMetric.startX);\n        this.currentTab.focusAreaModel.endX = Math.min(this.currentTab.focusAreaModel.endX, firstMetric.endX);\n        this.currentTab.focusAreaModel.startY = Math.max(this.currentTab.focusAreaModel.startY, this.currentTab.overviewModel.overviewStartY);\n        this.currentTab.focusAreaModel.endY = Math.min(this.currentTab.focusAreaModel.endY, this.currentTab.overviewModel.overviewEndY);\n    }\n\n    drawFocusAreaSquare() {\n        this.clearFocusArea();\n        this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n        var width = this.currentTab.focusAreaModel.endX - this.currentTab.focusAreaModel.startX;\n        var height = this.currentTab.focusAreaModel.endY - this.currentTab.focusAreaModel.startY;\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            this.focusAreaContext.strokeRect(metric.startX + this.currentTab.focusAreaModel.startX, this.currentTab.focusAreaModel.startY, width, height);\n        });\n    }\n\n    mouseUpOnOverView() {\n        if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.currentTab.overviewModel.hoveredMarker.group);\n            } else if (this.currentTab.overviewModel.isHoveringOnTimeRange) {\n                if (this.currentTab.overviewModel.mouseIsInsideTimeRange) {\n                    this.addNewTab();\n                    this.selectTab(this.currentTab);\n                } else {\n                    this.currentTab.overviewModel.hoveredTimeRangeGroup.timeRangeIndexList = null;\n                    this.drawSelectedTimeRanges();\n                    this.drawFocusGraph(false);\n                }\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph(false);\n            }\n\n            this.currentTab.overviewModel.isHoveringOnTimeRange = false;\n            this.currentTab.overviewModel.isSelectingTimeRange = false;\n        } else {\n            if (this.isDrawingFocusArea) {\n                this.drawFocusGraph(false);\n                this.isDrawingFocusArea = false;\n            }\n\n            this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.currentTab.focusModel.overviewGroupWithIntervalList) {\n                    this.currentTab.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    addNewTab() {\n        var newTab = this.initialiseNewTab();\n        this.initialiseNewTabDatesAndData(newTab);\n        this.currentTab = newTab;\n        this.initialiseMetricMinMaxTotal();\n        this.initialiseColorMap();\n        this.initialiseOverviewData();\n        this.initialiseOverviewGroups();\n        this.initialiseCompressedTimeIndexes();\n    }\n\n    initialiseNewTabDatesAndData(newTab) {\n        var timeRangeGroupList = this.getTimeRangeGroupList();\n        this.initialiseNewTabDates(newTab, timeRangeGroupList);\n        this.initialiseNewTabData(newTab);\n    }\n\n    getTimeRangeGroupList() {\n        var timeRangeGroupList = [];\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n                    timeRangeGroupList.push(group);\n                }\n            });\n        });\n\n        return timeRangeGroupList;\n    }\n\n    initialiseNewTabDates(newTab, timeRangeGroupList) {\n        newTab.fromDate = -1;\n        newTab.toDate = -1;\n\n        timeRangeGroupList.forEach((group) => {\n            var timeRangeIndexList = group.timeRangeIndexList;\n            var metric = group.instanceList[0].metricList[group.metricIndex];\n            var fromDate = metric.data[timeRangeIndexList[0]].date;\n            var toDate = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]].date;\n\n            if (newTab.fromDate == -1 || newTab.fromDate > fromDate) {\n                newTab.fromDate = fromDate;\n            }\n\n            if (newTab.toDate == -1 || newTab.toDate < toDate) {\n                newTab.toDate = toDate;\n            }\n        });\n\n        newTab.fromDateString = this.convertDateToString(newTab.fromDate);\n        newTab.toDateString = this.convertDateToString(newTab.toDate);\n    }\n\n    initialiseNewTabData(newTab) {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var newMetric = {};\n            newMetric.data = [];\n\n            metric.data.forEach((metricInstance) => {\n                var newMetricInstance = {};\n                newMetricInstance.metric = metricInstance.metric;\n                newMetricInstance.values = [];\n\n                metricInstance.values.forEach((value) => {\n                    var date = value[0];\n\n                    if (this.isBetween(date, newTab.fromDate, newTab.toDate)) {\n                        newMetricInstance.values.push(value);\n                    }\n                });\n\n                newMetric.data.push(newMetricInstance);\n            });\n\n            newTab.overviewModel.metricList.push(newMetric);\n        });\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        var updatedSelectedGroups = false;\n\n        if (this.currentTab.overviewModel.isSelectingTimeRange) {\n            var removeExisting = this.currentTab.overviewModel.timeRangeStartOffset == this.currentTab.overviewModel.mousePositionXOffset;\n            this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.timeRangeGroup, removeExisting);\n            updatedSelectedGroups = true;\n        } else if (this.currentTab.overviewModel.hoveredGroup) {\n            this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.hoveredGroup, true);\n            updatedSelectedGroups = true;\n        } else {\n            this.stopInterval();\n        }\n\n        if (updatedSelectedGroups) {\n            this.drawFocusAfterUpdatingSelectedGroups();\n        }\n    }\n\n    removeExistingGroupsInMetricByGroup(group) {\n        _.remove(this.currentTab.focusModel.groupList, (search) => {\n            search.overviewGroup.metricIndex == group.metricIndex &&\n                search.overviewGroup != group;\n        });\n\n        var groupList = this.getCurrentSingleMetricGroupList(this.currentTab.overviewModel.metricList[group.metricIndex]);\n\n        if (groupList) {\n            groupList.forEach((existingGroup) => {\n                if (existingGroup != group) {\n                    existingGroup.isSelected = false;\n                    existingGroup.timeRangeIndexList = null;\n                }\n            });\n        }\n    }\n\n    drawFocusAfterUpdatingSelectedGroups() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.initialiseGroupsOverlapCount();\n\n            if (this.currentTab.overviewModel.selectedMetricIndexSet.size > 1) {\n                this.initialiseOverlapList();\n            }\n\n            this.drawOverview();\n        }\n\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n        this.drawOverlapDetails();\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    initialiseOverlapList() {\n        this.currentTab.focusModel.overlappingList = [];\n        var metricIndex = this.currentTab.overviewModel.selectedMetricIndexSet.values().next().value;\n        var instanceList = this.getAllInstanceListForSelectedMetric(metricIndex);\n\n        instanceList.forEach((instance) => {\n            this.checkAndAddOverlappingInstance(metricIndex, instance)\n        });\n    }\n\n    getAllInstanceListForSelectedMetric(metricIndex) {\n        var instanceList = [];\n\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            if (group.overviewGroup.metricIndex == metricIndex) {\n                instanceList = instanceList.concat(group.instanceList);\n            }\n        });\n\n        return instanceList;\n    }\n\n    checkAndAddOverlappingInstance(metricIndex, instance) {\n        var check = 0;\n\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            if (group.overviewGroup.metricIndex != metricIndex) {\n                var overlappingInstance = _.find(group.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++check;\n                }\n            }\n        });\n\n        if (check == this.currentTab.overviewModel.selectedMetricIndexSet.size - 1) {\n            this.currentTab.focusModel.overlappingList.push(instance);\n        }\n    }\n\n    drawOverlapDetails() {\n        if (this.showOverlapDetails) {\n            this.$timeout(() => {\n                this.overlapGraphHeight = this.currentTab.focusModel.groupList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.currentTab.focusModel.groupList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.scope.$apply();\n\n                var metricIndexList = [];\n\n                this.currentTab.focusModel.groupList.forEach((group) => {\n                    metricIndexList.push(group.overviewGroup.metricIndex);\n                });\n\n                this.currentTab.focusModel.overlappingList.forEach((instance, instanceIndex) => {\n                    this.drawOverlapInstance(instance, instanceIndex, metricIndexList);\n                });\n            });\n        }\n    }\n\n    drawOverlapInstance(instance, instanceIndex, metricIndexList) {\n        var canvas = this.getElementByID(\"focusGraphOverlapCanvas-\" + instanceIndex)\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n        var metricList = [];\n\n        metricIndexList.forEach((metricIndex) => {\n            metricList.push(instance.metricList[metricIndex]);\n        });\n\n        this.drawFocusGraphInstance(context, valueIndexList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocus() {\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            var metric = this.currentTab.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph(true);\n                    break;\n                }\n            }\n        }\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.currentTab.focusModel.data) {\n            this.currentTab.focusModel.data = [];\n        }\n\n        this.currentTab.focusModel.data.length = 0;\n        var topY = Math.max(0, this.currentTab.overviewModel.mousePosition.y - this.config.overview.selectedInstancesForFocusOffset);\n        var bottomY = Math.min(this.currentTab.overviewModel.overviewEndY, this.currentTab.overviewModel.mousePosition.y + this.config.overview.selectedInstancesForFocusOffset);\n\n        if (this.focusInArea) {\n            topY = this.currentTab.focusAreaModel.startY;\n            bottomY = this.currentTab.focusAreaModel.endY;\n        }\n\n        this.currentTab.overviewModel.data.forEach((overviewInstance) => {\n            if (this.isBetween(overviewInstance.y, topY, bottomY)) {\n                this.currentTab.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.currentTab.focusModel.focusedIndexList);\n                this.currentTab.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var metricIndex = 0; metricIndex < overviewInstance.metricList.length; ++metricIndex) {\n            var instanceMetric = overviewInstance.metricList[metricIndex];\n\n            if (instanceMetric.data.length > 0) {\n                var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n                var leftX = Math.max(overviewMetric.startX, this.currentTab.overviewModel.mousePositionXOffset - this.config.overview.selectedInstancesForFocusOffset);\n                var rightX = Math.min(overviewMetric.endX, this.currentTab.overviewModel.mousePositionXOffset + this.config.overview.selectedInstancesForFocusOffset);\n\n                if (this.focusInArea) {\n                    leftX = overviewMetric.startX + this.currentTab.focusAreaModel.startX;\n                    rightX = overviewMetric.startX + this.currentTab.focusAreaModel.endX;\n                }\n\n                instanceMetric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, leftX, rightX)) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((instanceMetric, metricIndex) => {\n            for (var i = 0; i < this.config.colorCount; ++i) {\n                var layer = {};\n                layer.valueList = [];\n                instanceMetric.layerList.push(layer);\n            }\n\n            var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            instanceMetric.data.forEach((point) => {\n                var value = point.value;\n                var colorList = this.panel.metricList[metricIndex].colorList;\n\n                instanceMetric.layerList.forEach((layer, layerIndex) => {\n                    overviewMetric.colorMap.forEach((color, threshold) => {\n                        if (color == colorList[layerIndex]) {\n                            layer.valueList.push(value > 0 ? value : 0);\n                            layer.range = threshold.max - threshold.min;\n                            value -= layer.range;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.currentTab.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.currentTab.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.currentTab.focusModel.focusedIndexList[0];\n                var toIndex = this.currentTab.focusModel.focusedIndexList[this.currentTab.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        var toDateWidth = this.overviewContext.measureText(this.focusedToDate).width;\n        this.toDateLeftMargin = this.focusGraphWidth - (fromDateWidth + toDateWidth) / 2;\n    }\n\n    drawFocusGraphData() {\n        if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n            if (this.isGrouped) {\n                this.$timeout(() => {\n                    if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                        this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                            this.currentTab.overviewModel.metricList.length;\n                    } else {\n                        this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                    }\n\n                    this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                    this.scope.$apply();\n\n                    this.$timeout(() => {\n                        this.drawGroupFocusMarkers();\n                        this.drawGroupedFocusGraph();\n                    });\n                });\n            } else {\n                this.drawUngroupedFocusGraph();\n            }\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        var metricList = instance.metricList;\n        var metricIndexList = Array.from(Array(instance.metricList.length).keys())\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && !group.showAllMetrics) {\n            metricList = [instance.metricList[group.mainMetricIndex]];\n            metricIndexList = [group.mainMetricIndex];\n        }\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var pointWidth = Math.max(1, Math.floor(this.config.focusGraph.maxWidth / group.overviewGroup.timeRangeIndexList.length));\n            this.drawGroupedFocusGraphInstance(canvas, group.overviewGroup.timeRangeIndexList, pointWidth, metricList, metricIndexList);\n        } else {\n            var valueList = Array.from(Array(maxMetricLength).keys());\n            this.drawGroupedFocusGraphInstance(canvas, valueList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, valueIndexList, pointWidth, metricList, metricIndexList) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList) {\n        metricList.forEach((metric, metricListIndex) => {\n\n            metric.layerList.forEach((layer, layerIndex) => {\n                var panelMetric = this.panel.metricList[metricIndexList[metricListIndex]];\n                context.fillStyle = panelMetric.colorList[layerIndex];\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricListIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n\n                // start drawing from bottom\n                context.moveTo(0, y);\n                var x = 0;\n                var totalValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != null) {\n                        x = pointWidth * positionIndex;\n                        this.moveFocusGraphContextBasedOnValue(context, value, layer, layerIndex, x, y);\n                        totalValue += value;\n                    }\n                });\n\n                // draw straight line to base at the end\n                context.lineTo(x, y);\n\n                // move back to the starting point\n                context.lineTo(0, y);\n                context.closePath();\n\n                if (totalValue > 0 || layerIndex == 0) {\n                    context.fill();\n                }\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.currentTab.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n            var metricList = [instance.metricList[this.currentTab.overviewModel.selectedMetricIndex]];\n            var metricIndexList = [this.currentTab.overviewModel.selectedMetricIndex];\n\n            if (instance.showAllMetrics) {\n                metricList = instance.metricList;\n                metricIndexList = Array.from(Array(instance.metricList.length).keys());\n            }\n\n            this.drawFocusGraphInstance(context, valueIndexList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveFocusGraphContextBasedOnValue(context, value, layer, layerIndex, x, y) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            var baseY = layerIndex == 0 ? y - this.config.focusGraph.metricMinHeight : y;\n            context.lineTo(x, baseY);\n        } else {\n            var height;\n\n            if (value >= layer.range) {\n                height = this.config.focusGraph.metricMaxHeight;\n            } else {\n                height = value * this.config.focusGraph.metricMaxHeight / layer.range;\n            }\n\n            height = Math.max(this.config.focusGraph.metricMinHeight, height);\n            context.lineTo(x, y - height);\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredGroup && this.currentTab.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.currentTab.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.currentTab.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.currentTab.focusModel.data.length; ++i) {\n                var focusModelInstance = this.currentTab.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.currentTab.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.currentTab.overviewModel.data.length; ++i) {\n            var instance = this.currentTab.overviewModel.data[i];\n\n            if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    leaveMouseFromOverview() {\n        this.currentTab.overviewModel.isSelectingTimeRange = false;\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.currentTab.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.currentTab.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.currentTab.focusModel.overviewGroupWithIntervalList) {\n                this.currentTab.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    showHideAllMetrics() {\n        this.drawFocusGraph(false);\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.currentTab.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    showHideOverlapDetails() {\n        this.showOverlapDetails = !this.showOverlapDetails;\n        this.drawOverlapDetails();\n    }\n\n    selectNode(index, evt) {\n        var instance = this.currentTab.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}