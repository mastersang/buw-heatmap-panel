{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","scope","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","initialiseStartingVariables","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupSizeBarWidth","pieRadius","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","groupSizeColor","selectedInstancesForFocusOffset","focusArea","color","focusAreaSize","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLength","barWidth","minimumBarHeight","marginBetweenSliderAndChart","thresholdBarLength","focusGraph","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","maxHeight","markerSize","marginBetweenMarkers","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","initialiseColorListByMetric","colorList","luminanceChange","i","changeColorLuminance","firstLoad","overviewModel","histogramModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","groupSizeChart","HORIZONTAL_BAR","PIE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","isGrouped","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","metricIndex","point","checkAndSetOverviewMinMax","console","log","overviewMetric","panelMetric","initialiseColorMapByMetric","layerRange","colorMap","getColorMap","Map","threshold","average","set","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","sort","first","second","setHistogramMinMax","total","map","isBetween","target","start","end","initialiseSingleMetricGroups","initialiseMultiMetricGroups","initialiseSingleMetricGroupsByMetric","initialiseSingleMetricGroupsColor","initialiseSingleMetricInstanceGroupList","thresholdGroupListMap","populateSingleMetricGroupList","groupIndex","group","checkInstanceIsInGroup","initialiseNewSingleMetricGroup","instanceList","groupTotal","instanceTotal","thresholdValue","markerX","originalColor","getCurrentSingleMetricGroupList","populateMultiMetricGroupList","initialiseMultiMetricGroupsColor","findExistingMultiMetricGroup","initialiseNewMultiMetricGroup","instanceMetric","groupMetric","greyValue","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","getThresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","convertDateToString","toDateWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiMetricGroupSize","largestGroup","getCurrentMultiMetricGroupList","groupCount","getMaxGroupCount","instanceHeight","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","drawSingeMetricGroupedOverview","drawMultiMetricGroupedOverview","drawGroupSize","drawGroupedOverviewWrapper","drawMetricSeparator","metricIndexList","y","drawOverviewInstance","pointHeight","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","groupSizeLabelWidth","drawSingleMetricGroupSize","drawMultipleMetricGroupSize","drawSingleMetricBarGroupSize","drawSingleMetricPieGroupSize","drawGroupSizeLabel","drawBarGroupSizeWrapper","isSelected","overlapMap","startOverlapX","count","overlappingGroup","beginPath","moveTo","lineTo","closePath","fill","startAngle","PI","drawPieGroupSizeWrapper","size","endAngle","arc","fillText","maxEndX","strokeStyle","stroke","instanceIndex","getMetricDarkestColor","format","showHistogram","changedColorThreshold","temp","addOrRemoveGroupToFocus","overviewGroup","drawFocusGraph","removeExisting","focusGroup","remove","addGroupToFocus","setShowMergeGroupsButton","showMergeSelectedGroups","setShowMergeGroupsButtonWrapper","selectedGroupCount","drawOverviewGroupMarker","marker","startY","initialiseData","initialiseFocusGraphData","showFocus","setFocusGraphCanvasHeight","focusGraphWidth","focusedIndexList","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","showAllMetrics","focusGraphHeight","evt","mousePosition","getMousePos","isSelectingBar","setNewThresholdValue","checkAndSetSelectedHistogramThresholdBar","horizontalAxisStartX","selectedBar","drawHistogram","histogramCursor","topY","sliderY","bottomY","thresholdBarList","bar","leftX","rightX","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","deselectSingleMetricGroups","deselectMultiMetricGroups","originalGroupList","previousGroupThreshold","timeRangeIndexList","mergeSingleMetricGroups","mergeMultipleMetricGroups","mergeFocusGroupList","initialiseGroupsOverlapMap","drawSelectedGroupsMarkers","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","getCopyOfGroup","newGroup","oldFocusGroupList","mergeFocusGroupListWrapper","setMainMetricIndexAfterMerging","mainMetricIndex","selectedMetricIndex","overviewInstance","metricWithMostData","focusInstance","getFocusInstance","oldGroup","checkAndAddOverlappingGroupsFromOtherMetrics","overlappingMetric","overlappingGroupList","checkAndAddOverlappingGroup","overlappingCount","overlappingInstance","isSelectingMetricLabel","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","histogramMetric","$watch","newValue","oldValue","drawHistogramAxes","drawHistogramMaxValueAndOccurence","drawHistogramBars","drawHistogramThresholdSlider","verticalAxisStartY","lineWdith","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","verticalLabelWidth","maxOccurenceWidth","horizontalAxisY","horizontalAxisEndX","labelX","labelY","occurenceLabelY","maxValueWidth","valueLabelY","originX","occurenceStep","minHeight","drawHistogramSliderLine","drawHistogramThresholdBars","thresholdBarY","setOverviewMousePosition","setSelectedMetricIndex","setOverviewCursorToPointer","deselectMetricLabel","handleMouseMoveOnGroupedOverview","focusAreaIsFixed","drawFocus","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","setSelectedTimeIndex","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","markerIndex","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","fixFocusArea","focusGroupWithInterval","stopInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","updatedSelectedGroups","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","layerIndex","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","floor","focusGraphHeightoverviewGroup","valueIndexList","drawFocusGraphInstance","metricListIndex","previousX","previousValue","valueIndex","positionIndex","moveFocusGraphContextBasedOnValue","graphBeginX","getUngroupedFocusCanvas","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.scope = $scope;\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n        this.initialiseStartingVariables();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupSizeBarWidth: 1,\n            pieRadius: 15,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30,\n            groupSizeColor: \"lightgray\",\n            selectedInstancesForFocusOffset: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 20,\n            verticalAxisLength: 500,\n            barWidth: 5,\n            minimumBarHeight: 2,\n            marginBetweenSliderAndChart: 50,\n            thresholdBarLength: 10\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            groupedPointWidth: 6,\n            ungroupedPointWidth: 35,\n            metricMaxHeight: 20,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    //    query: \"node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        // this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                this.initialiseColorListByMetric(metric);\n            });\n        }\n    }\n\n    initialiseColorListByMetric(metric) {\n        // add lightest shade as defined by user\n        metric.colorList = [];\n        metric.colorList.push(metric.color);\n        var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n        // add the other shades\n        for (var i = 1; i < this.config.colorCount; ++i) {\n            var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n            metric.colorList.push(color);\n        }\n    }\n\n    initialiseStartingVariables() {\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.histogramModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            groupSizeChart: {\n                HORIZONTAL_BAR: \"1\",\n                PIE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupSizeChart = this.enumList.groupSizeChart.HORIZONTAL_BAR;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = this.isGrouped ? \"default\" : \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n\n                if (metricIndex == 0 && metric.max > 100) {\n                    console.log(instance.metric.instance);\n                }\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((overviewMetric, index) => {\n            var panelMetric = this.panel.metricList[index];\n            this.initialiseColorMapByMetric(overviewMetric, panelMetric);\n        });\n    }\n\n    initialiseColorMapByMetric(overviewMetric, panelMetric) {\n        var colorList = panelMetric.colorList;\n        overviewMetric.layerRange = Math.round(overviewMetric.max / colorList.length);\n\n        // map a range of values to a color\n        overviewMetric.colorMap = this.getColorMap(overviewMetric, colorList);\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[0] - second[0];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    //    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                    metric.total += point.value;\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleMetricGroups();\n        this.initialiseMultiMetricGroups();\n    }\n\n    initialiseSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseSingleMetricGroupsByMetric(metric, metricIndex);\n            this.initialiseSingleMetricGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleMetricInstanceGroupList();\n    }\n\n    initialiseSingleMetricGroupsByMetric(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var group = groupList[groupIndex];\n                group.name = this.panel.metricList[metricIndex].name + \" group \" + (groupIndex + 1);\n            }\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold) {\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                return this.checkInstanceIsInGroup(search.total, instance.metricList[metricIndex].total, groupingThreshold);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleMetricGroup(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceIsInGroup(groupTotal, instanceTotal, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n        var min = groupTotal * (1 - thresholdValue);\n        var max = groupTotal * (1 + thresholdValue);\n        return this.isBetween(instanceTotal, min, max);\n    }\n\n    initialiseNewSingleMetricGroup(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleMetricGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleMetricInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                for (var i = 0; i < groupList.length; ++i) {\n                    var group = groupList[i];\n\n                    if (this.checkInstanceIsInGroup(group.total, instance.metricList[metricIndex].total, this.groupingThreshold)) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiMetricGroups() {\n        this.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiMetricGroupList(groupList, groupingThreshold);\n            this.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiMetricGroupsColor();\n    }\n\n    populateMultiMetricGroupList(groupList, groupingThreshold) {\n        this.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiMetricGroup(groupList, instance, groupingThreshold);\n\n            if (!group) {\n                group = this.initialiseNewMultiMetricGroup(instance, groupList);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiMetricGroup(groupList, instance, groupingThreshold) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n\n                if (!this.checkInstanceIsInGroup(metric.total, instance.metricList[i].total, groupingThreshold)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiMetricGroup(instance, groupList) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.name = \"Group \" + (groupList.length + 1);\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiMetricGroupsColor() {\n        this.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        this.clearFocusArea();\n        this.drawOverview();\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        if (!this.isLoading) {\n            this.$timeout(() => {\n                this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n                this.setOverviewCanvasSize();\n                this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n                this.scope.$apply();\n                this.drawOverviewData();\n            });\n        }\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n        this.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n            });\n\n            /*\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n                });\n            } else {\n                this.overviewCanvasWidth += this.overviewModel.metricList.length + this.config.overview.pieRadius * 2;\n            }*/\n        } else {\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                    this.getMaxMultiMetricGroupSize() * this.config.overview.groupSizeBarWidth;\n            } else {\n                this.overviewCanvasWidth += this.config.overview.pieRadius * 2;\n            }\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.groupSizeBarWidth;\n    }\n\n    getCurrentSingleMetricGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiMetricGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiMetricGroupList() {\n        return this.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewModel.instanceHeight = this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups;\n            } else {\n                this.overviewModel.instanceHeight = this.config.overview.pieRadius * 2 + this.config.overview.marginBetweenGroups;\n            }\n\n            this.overviewModel.overviewHeight = groupCount * this.overviewModel.instanceHeight;\n        } else {\n            this.overviewModel.instanceHeight = this.config.overview.ungroupedPointHeight;\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    metric.startX += this.config.overview.marginBetweenMetricAndGroupSize;\n\n                    if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                        var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                        metric.startX += maxGroupSizeBarLength;\n                    } else {\n                        metric.startX += this.config.overview.pieRadius * 2;\n                    }\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeMetricGroupedOverview();\n        } else {\n            this.drawMultiMetricGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeMetricGroupedOverview() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupedOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            if (metricIndex < this.overviewModel.metricList.length - 1) {\n                this.drawMetricSeparator(metric);\n            }\n        });\n    }\n\n    drawGroupedOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        instance.y = this.overviewModel.overviewStartY + groupIndex * this.overviewModel.instanceHeight;\n\n        if (this.groupSizeChart == this.enumList.groupSizeChart.PIE) {\n            instance.y += this.overviewModel.instanceHeight / 2;\n        }\n\n        this.drawOverviewInstance(instance, this.config.overview.groupedPointHeight, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, pointHeight, metricIndexList) {\n        var endY = instance.y + this.overviewModel.instanceHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex, this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result = null;\n\n        map.forEach((color, threshold) => {\n            if (!result && this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiMetricGroupedOverview() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupedOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        this.overviewModel.groupSizeLabelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleMetricGroupSize();\n        } else {\n            this.drawMultipleMetricGroupSize();\n        }\n    }\n\n    drawSingleMetricGroupSize() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                    this.drawSingleMetricBarGroupSize(group, startX);\n                } else {\n                    this.drawSingleMetricPieGroupSize(group, startX);\n                }\n            });\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - this.overviewModel.groupSizeLabelWidth) / 2);\n            } else {\n                this.drawGroupSizeLabel((startX * 2 + this.config.overview.pieRadius - this.overviewModel.groupSizeLabelWidth) / 2);\n            }\n        });\n    }\n\n    drawSingleMetricBarGroupSize(group, startX) {\n        this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n        if (group.isSelected && group.overlapMap) {\n            var startOverlapX = startX;\n\n            group.overlapMap.forEach((count, overlappingGroup) => {\n                startOverlapX = this.drawBarGroupSizeWrapper(group, startOverlapX, count, overlappingGroup.color);\n            });\n        }\n    }\n\n    drawBarGroupSizeWrapper(group, startX, length, color) {\n        var endX = startX + length * this.config.overview.groupSizeBarWidth;\n        var endY = group.y + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, group.y);\n        this.overviewContext.lineTo(endX, group.y);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawSingleMetricPieGroupSize(group, startX) {\n        var startAngle = -0.5 * Math.PI;\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.instanceList.length, this.config.overview.groupSizeColor);\n\n        if (group.isSelected && group.overlapMap) {\n            group.overlapMap.forEach((count, overlappingGroup) => {\n                startAngle = this.drawPieGroupSizeWrapper(group, startX, startAngle, count, overlappingGroup.color);\n            });\n        }\n    }\n\n    drawPieGroupSizeWrapper(group, startX, startAngle, size, color) {\n        var x = startX + this.config.overview.pieRadius;\n        var endAngle = startAngle + size * 2 * Math.PI / 360;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, group.y);\n        this.overviewContext.arc(x, group.y, this.config.overview.pieRadius, startAngle, endAngle);\n        this.overviewContext.lineTo(x, group.y);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endAngle;\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.overviewModel.labelTextHeight);\n    }\n\n    drawMultipleMetricGroupSize() {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize +\n            this.overviewModel.groupSizeLabelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - this.overviewModel.groupSizeLabelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            x += this.config.overview.marginBetweenMetricAndGroupSize;\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                x += maxGroupSizeBarLength;\n            } else {\n                x += this.config.overview.pieRadius * 2;\n            }\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            instance.y = this.overviewModel.overviewStartY + instanceIndex * this.overviewModel.instanceHeight;\n            this.drawOverviewInstance(instance, this.overviewModel.instanceHeight, metricIndexList);\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    closeHistogram() {\n        this.showHistogram = false;\n\n        if (this.changedColorThreshold) {\n            this.changedColorThreshold = false;\n            this.drawOverview();\n\n            if (this.isGrouped) {\n                var temp = this.focusModel.groupList;\n                this.focusModel.groupList = [];\n\n                temp.forEach((group) => {\n                    this.addOrRemoveGroupToFocus(group.overviewGroup, true);\n                });\n\n                this.drawFocusGraph();\n            } else {\n                this.drawFocusGraph();\n            }\n        }\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        });\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    drawFocusGraph(initialiseData) {\n        if (!this.isGrouped && initialiseData) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.setFocusGraphCanvasHeight();\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    setFocusGraphCanvasHeight() {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                if (group.showAllMetrics) {\n                    group.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    group.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        } else {\n            this.focusModel.data.forEach((instance) => {\n                if (instance.showAllMetrics) {\n                    instance.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    instance.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    moveMouseOnHistogram(evt) {\n        this.histogramModel.mousePosition = this.getMousePos(evt, this.histogramCanvas);\n\n        if (this.histogramModel.isSelectingBar) {\n            this.setNewThresholdValue();\n        } else {\n            this.checkAndSetSelectedHistogramThresholdBar();\n        }\n    }\n\n    setNewThresholdValue() {\n        this.changedColorThreshold = true;\n        var value = Math.round((this.histogramModel.mousePosition.x - this.histogramModel.horizontalAxisStartX) / this.config.histogram.barWidth);\n        value = Math.max(value, 1);\n        value = Math.min(value, this.histogramModel.metric.max - 1);\n\n        this.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            if (threshold != this.histogramModel.selectedBar.threshold) {\n                if (value >= this.histogramModel.selectedBar.threshold.max) {\n                    // move right\n                    if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                        value = Math.min(value, threshold.max - 1);\n                        threshold.min = value;\n                    }\n                } else {\n                    // move left\n                    if (this.histogramModel.selectedBar.threshold.min == 0) {\n                        // left most threshold\n                        if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    } else {\n                        // left threshold\n                        if (threshold.max == this.histogramModel.selectedBar.threshold.min) {\n                            value = Math.max(value, threshold.max + 1);\n                        }\n\n                        // right threshold\n                        if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    }\n                }\n            }\n        });\n\n        this.histogramModel.selectedBar.threshold.max = value;\n        this.drawHistogram();\n    }\n\n    checkAndSetSelectedHistogramThresholdBar() {\n        this.histogramCursor = \"default\";\n        this.histogramModel.selectedBar = null;\n        var topY = this.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        var bottomY = this.histogramModel.sliderY + this.config.histogram.thresholdBarLength / 2;\n\n        if (this.isBetween(this.histogramModel.mousePosition.y, topY, bottomY)) {\n            for (var i = 0; i < this.histogramModel.thresholdBarList.length; ++i) {\n                var bar = this.histogramModel.thresholdBarList[i];\n                var leftX = bar.x - this.config.histogram.barWidth;\n                var rightX = bar.x + this.config.histogram.barWidth;\n\n                if (this.isBetween(this.histogramModel.mousePosition.x, leftX, rightX)) {\n                    this.histogramCursor = \"pointer\";\n                    this.histogramModel.selectedBar = bar;\n                    break;\n                }\n            }\n        }\n    }\n\n    mouseDownOnHistogram() {\n        if (this.histogramModel.selectedBar) {\n            this.histogramModel.isSelectingBar = true;\n        }\n    }\n\n    mouseUpOnHistogram() {\n        this.histogramModel.isSelectingBar = false;\n        this.histogramModel.selectedBar = null;\n        this.histogramCursor = \"default\";\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.clearFocusArea();\n        this.clearTimeIndicator();\n        this.deselectAllGroups();\n        this.showFocus = false;\n        this.showMergeSelectedGroups = false;\n    }\n\n    deselectAllGroups() {\n        this.focusModel.groupList = [];\n        this.deselectSingleMetricGroups();\n        this.deselectMultiMetricGroups();\n    }\n\n    deselectSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                });\n            }\n        });\n    }\n\n    deselectMultiMetricGroups() {\n        if (this.overviewModel.originalGroupList) {\n            this.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.overviewModel.originalGroupList);\n            this.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.initialiseSingleMetricInstanceGroupList();\n        this.changeGroupingSelection();\n    }\n\n    selectGroupsizeChart() {\n        this.drawOverview();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n\n        if (!this.isLoading) {\n            this.changeGroupingSelection();\n        }\n    }\n\n    mergeSelectedGroups() {\n        this.showMergeSelectedGroups = false;\n\n        // store current threshold value to restore original groups when threshold is changed\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleMetricGroups();\n        } else {\n            this.mergeMultipleMetricGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.initialiseGroupsOverlapMap();\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n    }\n\n    mergeSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = this.getCopyOfGroup(group);\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    getCopyOfGroup(group) {\n        var newGroup = {};\n        newGroup.name = group.name;\n        newGroup.instanceList = group.instanceList;\n        newGroup.total = group.total;\n        newGroup.color = group.color;\n        newGroup.isSelected = group.isSelected;\n        newGroup.markerX = group.markerX;\n        newGroup.y = group.y;\n        return newGroup;\n    }\n\n    mergeFocusGroupList() {\n        var oldFocusGroupList = this.focusModel.groupList;\n        this.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiMetricGroupList());\n        }\n\n        this.setMainMetricIndexAfterMerging(oldFocusGroupList);\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n        focusGroup.mainMetricIndex = this.overviewModel.selectedMetricIndex;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    setMainMetricIndexAfterMerging(oldFocusGroupList) {\n        this.focusModel.groupList.forEach((group) => {\n            var oldGroup = _.find(oldFocusGroupList, (search) => {\n                return search.overviewGroup == group.overviewGroup;\n            });\n\n            if (oldGroup) {\n                group = oldGroup.mainMetricIndex;\n            }\n        });\n    }\n\n    initialiseGroupsOverlapMap() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    group.overlapMap = new Map();\n                    this.checkAndAddOverlappingGroupsFromOtherMetrics(group, metric);\n                })\n            });\n\n            this.drawOverview();\n        }\n    }\n\n    checkAndAddOverlappingGroupsFromOtherMetrics(group, metric) {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overlappingMetric = this.overviewModel.metricList[metricIndex];\n\n            if (metric != overlappingMetric) {\n                var overlappingGroupList = this.getCurrentSingleMetricGroupList(overlappingMetric);\n\n                overlappingGroupList.forEach((overlappingGroup) => {\n                    this.checkAndAddOverlappingGroup(group, overlappingGroup);\n                });\n\n                if (group.overlapMap.size > 0) {\n                    break;\n                }\n            }\n        }\n    }\n\n    checkAndAddOverlappingGroup(group, overlappingGroup) {\n        if (group != overlappingGroup && overlappingGroup.isSelected) {\n            var overlappingCount = 0;\n\n            group.instanceList.forEach((instance) => {\n                var overlappingInstance = _.find(overlappingGroup.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++overlappingCount;\n                }\n            });\n\n            if (overlappingCount > 0) {\n                group.overlapMap.set(overlappingGroup, overlappingCount);\n            }\n        }\n    }\n\n    mergeMultipleMetricGroups() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        if (!this.overviewModel.originalGroupList) {\n            this.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.thresholdGroupListMap) {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped && this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.overviewModel.isSelectingTimeRange = true;\n            this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset;\n            this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        this.histogramModel.metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        this.histogramMetric = this.panel.metricList[this.overviewModel.selectedMetricIndex];\n\n        this.scope.$watch(\"ctrl.histogramMetric.color\", (newValue, oldValue) => {\n            if (newValue != oldValue) {\n                this.initialiseColorListByMetric(this.histogramMetric);\n                this.initialiseColorMapByMetric(this.histogramModel.metric, this.histogramMetric);\n                this.drawHistogram();\n            }\n        });\n\n        this.drawHistogramAxes();\n        this.drawHistogramMaxValueAndOccurence();\n        this.drawHistogramBars();\n        this.drawHistogramThresholdSlider();\n    }\n\n    drawHistogramAxes() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.histogramModel.verticalAxisStartY = this.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.lineWdith = 1;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"gray\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis();\n        this.drawHistogramHorizontalAxis();\n    }\n\n    drawHistogramVerticalAxis() {\n        var occurences = \"occurences\";\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(this.histogramModel.metric.histogram.max).width;\n        this.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(\"occurences\", this.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.overviewModel.labelTextHeight);\n        this.histogramModel.horizontalAxisY = this.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLength;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis() {\n        this.histogramModel.horizontalAxisEndX = this.histogramModel.horizontalAxisStartX +\n            this.config.histogram.barWidth * (this.histogramModel.metric.max + 1);\n        var labelX = this.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.histogramModel.horizontalAxisY + this.overviewModel.labelTextHeight / 2;\n        this.histogramCanvasContext.fillText(this.histogramMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        var occurenceLabelY = this.histogramModel.verticalAxisStartY + this.overviewModel.labelTextHeight / 2\n        this.histogramCanvasContext.fillText(this.histogramModel.metric.histogram.max, 0, occurenceLabelY);\n        var maxValueWidth = this.histogramCanvasContext.measureText(this.histogramModel.metric.max).width;\n        var valueLabelY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(this.histogramModel.metric.max, this.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.histogramModel.horizontalAxisStartX - this.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    drawHistogramBars() {\n        var occurenceStep = this.config.histogram.verticalAxisLength / this.histogramModel.metric.histogram.max;\n\n        this.histogramModel.metric.histogram.data.forEach((occurences, value) => {\n            this.histogramCanvasContext.fillStyle = this.getColorFromMap(value, this.histogramModel.metric.colorMap);\n            var x = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * value;\n            var y = this.histogramModel.horizontalAxisY - occurenceStep * occurences;\n            var height = this.histogramModel.horizontalAxisY - y;\n            var minHeight = this.config.histogram.minimumBarHeight;\n\n            if (height < minHeight) {\n                y = this.histogramModel.horizontalAxisY - minHeight;\n                height = minHeight;\n            }\n\n            this.histogramCanvasContext.fillRect(x, y, this.config.histogram.barWidth, height);\n        });\n    }\n\n    drawHistogramThresholdSlider() {\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.drawHistogramSliderLine();\n        this.drawHistogramThresholdBars();\n    }\n\n    drawHistogramSliderLine() {\n        this.histogramModel.sliderY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenSliderAndChart;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.sliderY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.sliderY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramThresholdBars() {\n        var thresholdBarY = this.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        this.histogramModel.thresholdBarList = [];\n        var i = 0;\n\n        this.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            var bar = {};\n            bar.threshold = threshold;\n            bar.x = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * (threshold.max + 1);\n\n            // no need to draw slider bar for last threshold\n            if (i < this.histogramModel.metric.colorMap.size - 1) {\n                this.histogramCanvasContext.beginPath();\n                this.histogramCanvasContext.moveTo(bar.x, thresholdBarY);\n                this.histogramCanvasContext.lineTo(bar.x, thresholdBarY + this.config.histogram.thresholdBarLength);\n                this.histogramCanvasContext.stroke();\n                this.histogramCanvasContext.closePath();\n                ++i;\n            }\n\n            this.histogramModel.thresholdBarList.push(bar);\n        });\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.overviewModel.selectedMetricIndex > -1) {\n                if (this.isBetween(this.overviewModel.mousePosition.y, 0, this.overviewModel.overviewStartY)) {\n                    this.isSelectingMetricLabel = true;\n\n                    if (this.isGrouped) {\n                        this.setOverviewCursorToPointer();\n                    }\n                } else {\n                    this.deselectMetricLabel();\n                }\n            } else {\n                this.deselectMetricLabel();\n            }\n\n            if (this.isGrouped) {\n                this.handleMouseMoveOnGroupedOverview();\n            } else if (this.overviewModel.selectedMetricIndex > -1 && !this.focusAreaIsFixed) {\n                this.drawFocus();\n            }\n        } else {\n            this.deselectMetricLabel();\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    // set x position of mouse per overview graph for easier manipulation with mouse positions\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX + this.overviewModel.metricList[0].startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    deselectMetricLabel() {\n        this.isSelectingMetricLabel = false;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.overviewModel.hoveredGroup = null;\n        this.overviewModel.hoveredMarker = null;\n        this.checkAndSetSelectedOverviewMarker();\n\n        if (this.overviewModel.selectedMetricIndex >= 0) {\n            this.checkAndSetHoveredGroup();\n        }\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n            if (this.overviewModel.hoveredGroup) {\n                if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                    this.setSelectedTimeIndex();\n                }\n\n                this.drawTimeIndicators();\n            } else {\n                this.clearTimeIndicator();\n            }\n        } else if (this.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.setOverviewCursorToPointer();\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleMetricGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.timeRangeMetricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiMetricGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n    }\n\n    mouseUpOnOverView() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph(false);\n            }\n        } else if (!this.isCompressed) {\n            this.fixFocusArea();\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.initialiseGroupsOverlapMap();\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph(false);\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    fixFocusArea() {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus();\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph(true);\n                    break;\n                }\n            }\n        }\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n        var topY = Math.max(0, this.overviewModel.mousePosition.y - this.config.overview.selectedInstancesForFocusOffset);\n        var bottomY = Math.min(this.overviewModel.overviewEndY, this.overviewModel.mousePosition.y + this.config.overview.selectedInstancesForFocusOffset);\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.isBetween(overviewInstance.y, topY, bottomY)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var metricIndex = 0; metricIndex < overviewInstance.metricList.length; ++metricIndex) {\n            var instanceMetric = overviewInstance.metricList[metricIndex];\n\n            if (instanceMetric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var leftX = Math.max(overviewMetric.startX, this.overviewModel.mousePositionXOffset - this.config.overview.selectedInstancesForFocusOffset);\n                var rightX = Math.min(overviewMetric.endX,\n                    this.overviewModel.mousePositionXOffset + this.config.overview.selectedInstancesForFocusOffset);\n\n                instanceMetric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, leftX, rightX)) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((instanceMetric, metricIndex) => {\n            for (var i = 0; i < this.config.colorCount; ++i) {\n                var layer = {};\n                layer.valueList = [];\n                instanceMetric.layerList.push(layer);\n            }\n\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            instanceMetric.data.forEach((point) => {\n                var value = point.value;\n                var colorList = this.panel.metricList[metricIndex].colorList;\n\n                instanceMetric.layerList.forEach((layer, layerIndex) => {\n                    overviewMetric.colorMap.forEach((color, threshold) => {\n                        if (color == colorList[layerIndex]) {\n                            layer.valueList.push(value > 0 ? value : 0);\n                            value -= threshold.max;\n                            layer.range = threshold.max - threshold.min;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.overviewModel.selectedMetricIndex > -1) {\n            if (this.isGrouped) {\n                this.$timeout(() => {\n                    if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                        this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                            this.overviewModel.metricList.length;\n                    } else {\n                        this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                    }\n\n                    this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                    this.scope.$apply();\n                    this.drawGroupFocusMarkers();\n                    this.drawGroupedFocusGraph();\n                });\n            } else {\n                this.drawUngroupedFocusGraph();\n            }\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        var valueList = Array.from(Array(maxMetricLength).keys());\n        var metricList = instance.metricList;\n        var metricIndexList = Array.from(Array(instance.metricList.length).keys())\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && !group.showAllMetrics) {\n            metricList = [instance.metricList[group.mainMetricIndex]];\n            metricIndexList = [group.mainMetricIndex];\n        }\n\n        this.drawGroupedFocusGraphInstance(canvas, valueList, this.getFocusGraphPointWidth(), metricList, metricIndexList);\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            var pointWidth = Math.floor(this.focusGraphWidth / focusGraphHeightoverviewGroup.timeRangeIndexList.length);\n            this.drawGroupedFocusGraphInstance(canvas, group.overviewGroup.timeRangeIndexList, pointWidth, metricList, metricIndexList);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, valueIndexList, pointWidth, metricList, metricIndexList) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList) {\n        metricList.forEach((metric, metricListIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var panelMetric = this.panel.metricList[metricIndexList[metricListIndex]];\n                context.fillStyle = panelMetric.colorList[layerIndex];\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricListIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != null) {\n                        x = pointWidth * positionIndex;\n                        this.moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n            var metricList = [instance.metricList[this.overviewModel.selectedMetricIndex]];\n            var metricIndexList = [this.overviewModel.selectedMetricIndex];\n\n            if (instance.showAllMetrics) {\n                metricList = instance.metricList;\n                metricIndexList = Array.from(Array(instance.metricList.length).keys());\n            }\n\n            this.drawFocusGraphInstance(context, valueIndexList, this.config.focusGraph.ungroupedPointWidth,\n                metricList, metricIndexList);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(x, y);\n        } else {\n            // move to previous position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(previousX, y);\n            }\n\n            var height;\n\n            if (value >= layer.range) {\n                height = this.config.focusGraph.metricMaxHeight;\n            } else {\n                height = value * this.config.focusGraph.metricMaxHeight / layer.range;\n            }\n\n            height = Math.max(5, height);\n            context.lineTo(x, y - height);\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    showHideAllMetrics() {\n        this.drawFocusGraph(false);\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    selectNode(index, evt) {\n        var instance = this.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}