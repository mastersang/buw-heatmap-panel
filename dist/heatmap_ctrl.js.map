{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","scope","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","initialiseStartingVariables","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupBarWidth","singleMetricGroupSizeWidth","multipleMetricGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","groupSizeColor","focusArea","color","focusAreaSize","xCrossSize","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLength","barWidth","minimumBarHeight","marginBetweenSliderAndChart","thresholdBarLength","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","initialiseColorListByMetric","colorList","luminanceChange","i","changeColorLuminance","firstLoad","overviewModel","histogramModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","isGrouped","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","metricIndex","point","checkAndSetOverviewMinMax","console","log","overviewMetric","panelMetric","initialiseColorMapByMetric","layerRange","colorMap","getColorMap","Map","threshold","average","set","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","sort","first","second","setHistogramMinMax","total","map","isBetween","target","start","end","initialiseSingleMetricGroups","initialiseMultiMetricGroups","initialiseMetricSingleMetricGroups","initialiseSingleMetricGroupsColor","initialiseSingleMetricInstanceGroupList","thresholdGroupListMap","populateSingleMetricGroupList","group","checkInstanceIsInGroup","initialiseNewSingleMetricGroups","instanceList","groupTotal","instanceTotal","thresholdValue","markerX","originalColor","groupIndex","getCurrentSingleMetricGroupList","populateMultiMetricGroupList","initialiseMultiMetricGroupsColor","findExistingMultiMetricGroup","initialiseNewMultiMetricGroup","instanceMetric","groupMetric","greyValue","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","getThresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","convertDateToString","toDateWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiMetricGroupSize","largestGroup","getCurrentMultiMetricGroupList","groupCount","getMaxGroupCount","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","overviewInstanceHeight","drawSingeMetricGroupedOverview","drawMultiMetricGroupedOverview","drawGroupSize","drawGroupOverviewWrapper","drawMetricSeparator","metricIndexList","drawOverviewInstance","y","instanceIndex","pointHeight","marginBetweenInstances","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","groupSizeLabelWidth","drawSingleMetricGroupSize","drawMultipleMetricGroupSize","drawGroupSizeWrapper","isSelected","overlapMap","startOverlapX","count","overlappingGroup","drawGroupSizeLabel","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","floor","drawGroupBarAtPosition","getMetricDarkestColor","format","showHistogram","changedColorThreshold","temp","addOrRemoveGroupToFocus","overviewGroup","drawFocusGraph","removeExisting","focusGroup","remove","addGroupToFocus","setShowMergeGroupsButton","showMergeSelectedGroups","setShowMergeGroupsButtonWrapper","selectedGroupCount","drawOverviewGroupMarker","marker","initialiseFocusGraphData","showFocus","focusedIndexList","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","evt","mousePosition","getMousePos","isSelectingBar","setNewThresholdValue","checkAndSetSelectedHistogramThresholdBar","horizontalAxisStartX","selectedBar","drawHistogram","histogramCursor","topY","sliderY","bottomY","thresholdBarList","bar","leftX","rightX","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","deselectSingleMetricGroups","deselectMultiMetricGroups","originalGroupList","previousGroupThreshold","timeRangeIndexList","mergeSingleMetricGroups","mergeMultipleMetricGroups","mergeFocusGroupList","initialiseGroupsOverlapMap","drawSelectedGroupsMarkers","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","mergeFocusGroupListWrapper","overviewInstance","metricWithMostData","focusInstance","getFocusInstance","checkAndAddOverlappingGroupsFromOtherMetrics","overlappingMetric","overlappingGroupList","checkAndAddOverlappingGroup","size","overlappingCount","overlappingInstance","isSelectingMetricLabel","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","selectedMetricIndex","histogramMetric","$watch","newValue","oldValue","drawHistogramAxes","drawHistogramMaxValueAndOccurence","drawHistogramBars","drawHistogramThresholdSlider","verticalAxisStartY","lineWdith","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","verticalLabelWidth","maxOccurenceWidth","horizontalAxisY","horizontalAxisEndX","labelX","labelY","occurenceLabelY","maxValueWidth","valueLabelY","originX","occurenceStep","minHeight","drawHistogramSliderLine","drawHistogramThresholdBars","thresholdBarY","setOverviewMousePosition","setSelectedMetricIndex","setOverviewCursorToPointer","deselectMetricLabel","handleMouseMoveOnGroupedOverview","focusAreaIsFixed","drawFocus","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","setSelectedTimeIndex","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","markerIndex","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","fixFocusArea","focusGroupWithInterval","stopInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","marginBetweenMarkers","updatedSelectedGroups","drawFocusArea","getFocusAreaSize","minimumTopY","focusStartY","offset","getFocusAreaOffset","focusStartX","strokeRect","sourceMetricIndex","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","layerIndex","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","previousX","previousValue","valueIndex","positionIndex","moveFocusGraphContextBasedOnValue","graphBeginX","getUngroupedFocusCanvas","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.scope = $scope;\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n        this.initialiseStartingVariables();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupBarWidth: 9,\n            singleMetricGroupSizeWidth: 1,\n            multipleMetricGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30,\n            groupSizeColor: \"lightgray\"\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 20,\n            verticalAxisLength: 500,\n            barWidth: 5,\n            minimumBarHeight: 2,\n            marginBetweenSliderAndChart: 50,\n            thresholdBarLength: 10\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 8,\n            ungroupedPointWidth: 35,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    //    query: \"node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        // this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                this.initialiseColorListByMetric(metric);\n            });\n        }\n    }\n\n    initialiseColorListByMetric(metric) {\n        // add lightest shade as defined by user\n        metric.colorList = [];\n        metric.colorList.push(metric.color);\n        var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n        // add the other shades\n        for (var i = 1; i < this.config.colorCount; ++i) {\n            var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n            metric.colorList.push(color);\n        }\n    }\n\n    initialiseStartingVariables() {\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.histogramModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = this.isGrouped ? \"default\" : \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n\n                if (metricIndex == 0 && metric.max > 100) {\n                    console.log(instance.metric.instance);\n                }\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((overviewMetric, index) => {\n            var panelMetric = this.panel.metricList[index];\n            this.initialiseColorMapByMetric(overviewMetric, panelMetric);\n        });\n    }\n\n    initialiseColorMapByMetric(overviewMetric, panelMetric) {\n        var colorList = panelMetric.colorList;\n        overviewMetric.layerRange = Math.round(overviewMetric.max / colorList.length);\n\n        // map a range of values to a color\n        overviewMetric.colorMap = this.getColorMap(overviewMetric, colorList);\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[0] - second[0];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    //    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n                    metric.total += point.value;\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleMetricGroups();\n        this.initialiseMultiMetricGroups();\n    }\n\n    initialiseSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseMetricSingleMetricGroups(metric, metricIndex);\n            this.initialiseSingleMetricGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleMetricInstanceGroupList();\n    }\n\n    initialiseMetricSingleMetricGroups(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold) {\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                return this.checkInstanceIsInGroup(search.total, instance.metricList[metricIndex].total, groupingThreshold);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleMetricGroups(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceIsInGroup(groupTotal, instanceTotal, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n        var min = groupTotal * (1 - thresholdValue);\n        var max = groupTotal * (1 + thresholdValue);\n        return this.isBetween(instanceTotal, min, max);\n    }\n\n    initialiseNewSingleMetricGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleMetricGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleMetricInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                for (var i = 0; i < groupList.length; ++i) {\n                    var group = groupList[i];\n\n                    if (this.checkInstanceIsInGroup(group.total, instance.metricList[metricIndex].total, this.groupingThreshold)) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiMetricGroups() {\n        this.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiMetricGroupList(groupList, groupingThreshold);\n            this.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiMetricGroupsColor();\n    }\n\n    populateMultiMetricGroupList(groupList, groupingThreshold) {\n        this.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiMetricGroup(groupList, instance, groupingThreshold);\n\n            if (!group) {\n                group = this.initialiseNewMultiMetricGroup(instance);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiMetricGroup(groupList, instance, groupingThreshold) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n\n                if (!this.checkInstanceIsInGroup(metric.total, instance.metricList[i].total, groupingThreshold)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiMetricGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiMetricGroupsColor() {\n        this.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        this.clearFocusArea();\n        this.drawOverview();\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        if (!this.isLoading) {\n            this.$timeout(() => {\n                this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n                this.setOverviewCanvasSize();\n                this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n                this.scope.$apply();\n                this.drawOverviewData();\n            });\n        }\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n        this.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleMetricGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiMetricGroupSize() * this.config.overview.multipleMetricGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleMetricGroupSizeWidth;\n    }\n\n    getCurrentSingleMetricGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiMetricGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiMetricGroupList() {\n        return this.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                    metric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeMetricGroupedOverview();\n        } else {\n            this.drawMultiMetricGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeMetricGroupedOverview() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            this.drawMetricSeparator(metric);\n        });\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight, this.config.overview.marginBetweenGroups, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, instanceIndex, pointHeight, marginBetweenInstances, metricIndexList) {\n        instance.y = this.overviewModel.overviewStartY + instanceIndex * (pointHeight + marginBetweenInstances);\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex,\n                        this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result = null;\n\n        map.forEach((color, threshold) => {\n            if (!result && this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiMetricGroupedOverview() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        this.overviewModel.groupSizeLabelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleMetricGroupSize();\n        } else {\n            this.drawMultipleMetricGroupSize();\n        }\n    }\n\n    drawSingleMetricGroupSize() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, groupIndex, this.config.overview.singleMetricGroupSizeWidth,\n                    group.instanceList.length, this.config.overview.groupSizeColor);\n\n                if (group.isSelected && group.overlapMap) {\n                    var startOverlapX = startX;\n\n                    group.overlapMap.forEach((count, overlappingGroup) => {\n                        startOverlapX = this.drawGroupSizeWrapper(startOverlapX, groupIndex,\n                            this.config.overview.singleMetricGroupSizeWidth, count, overlappingGroup.color);\n                    });\n                }\n            });\n\n            this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - this.overviewModel.groupSizeLabelWidth) / 2);\n        });\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.overviewModel.labelTextHeight);\n    }\n\n    drawGroupSizeWrapper(startX, groupIndex, groupSizeWidth, length, color) {\n        var endX = startX + length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY +\n            groupIndex * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleMetricGroupSize() {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize +\n            this.overviewModel.groupSizeLabelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, groupIndex, this.config.overview.multipleMetricGroupSizeWidth,\n                group.instanceList.length, this.config.overview.groupSizeColor);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - this.overviewModel.groupSizeLabelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        if (!this.isCompressed) {\n            // this.drawGroupBars();\n        }\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.decompressedMarginBetweenMetrics / 2 -\n                Math.floor(this.config.overview.groupBarWidth / 2);\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.thresholdGroupListMap.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x, y, this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    closeHistogram() {\n        this.showHistogram = false;\n\n        if (this.changedColorThreshold) {\n            this.changedColorThreshold = false;\n            this.drawOverview();\n\n            if (this.isGrouped) {\n                var temp = this.focusModel.groupList;\n                this.focusModel.groupList = [];\n\n                temp.forEach((group) => {\n                    this.addOrRemoveGroupToFocus(group.overviewGroup, true);\n                });\n\n                this.drawFocusGraph();\n            } else {\n                this.drawFocusGraph();\n            }\n        }\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        });\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    moveMouseOnHistogram(evt) {\n        this.histogramModel.mousePosition = this.getMousePos(evt, this.histogramCanvas);\n\n        if (this.histogramModel.isSelectingBar) {\n            this.setNewThresholdValue();\n        } else {\n            this.checkAndSetSelectedHistogramThresholdBar();\n        }\n    }\n\n    setNewThresholdValue() {\n        this.changedColorThreshold = true;\n        var value = Math.round((this.histogramModel.mousePosition.x - this.histogramModel.horizontalAxisStartX) / this.config.histogram.barWidth);\n        value = Math.max(value, 1);\n        value = Math.min(value, this.histogramModel.metric.max - 1);\n\n        this.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            if (threshold != this.histogramModel.selectedBar.threshold) {\n                if (value >= this.histogramModel.selectedBar.threshold.max) {\n                    // move right\n                    if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                        value = Math.min(value, threshold.max - 1);\n                        threshold.min = value;\n                    }\n                } else {\n                    // move left\n                    if (this.histogramModel.selectedBar.threshold.min == 0) {\n                        // left most threshold\n                        if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    } else {\n                        // left threshold\n                        if (threshold.max == this.histogramModel.selectedBar.threshold.min) {\n                            value = Math.max(value, threshold.max + 1);\n                        }\n\n                        // right threshold\n                        if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    }\n                }\n            }\n        });\n\n        this.histogramModel.selectedBar.threshold.max = value;\n        this.drawHistogram();\n    }\n\n    checkAndSetSelectedHistogramThresholdBar() {\n        this.histogramCursor = \"default\";\n        this.histogramModel.selectedBar = null;\n        var topY = this.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        var bottomY = this.histogramModel.sliderY + this.config.histogram.thresholdBarLength / 2;\n\n        if (this.isBetween(this.histogramModel.mousePosition.y, topY, bottomY)) {\n            for (var i = 0; i < this.histogramModel.thresholdBarList.length; ++i) {\n                var bar = this.histogramModel.thresholdBarList[i];\n                var leftX = bar.x - this.config.histogram.barWidth;\n                var rightX = bar.x + this.config.histogram.barWidth;\n\n                if (this.isBetween(this.histogramModel.mousePosition.x, leftX, rightX)) {\n                    this.histogramCursor = \"pointer\";\n                    this.histogramModel.selectedBar = bar;\n                    break;\n                }\n            }\n        }\n    }\n\n    mouseDownOnHistogram() {\n        if (this.histogramModel.selectedBar) {\n            this.histogramModel.isSelectingBar = true;\n        }\n    }\n\n    mouseUpOnHistogram() {\n        this.histogramModel.isSelectingBar = false;\n        this.histogramModel.selectedBar = null;\n        this.histogramCursor = \"default\";\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.clearFocusArea();\n        this.clearTimeIndicator();\n        this.deselectAllGroups();\n        this.showFocus = false;\n        this.showMergeSelectedGroups = false;\n    }\n\n    deselectAllGroups() {\n        this.focusModel.groupList = [];\n        this.deselectSingleMetricGroups();\n        this.deselectMultiMetricGroups();\n    }\n\n    deselectSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                });\n            }\n        });\n    }\n\n    deselectMultiMetricGroups() {\n        if (this.overviewModel.originalGroupList) {\n            this.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.overviewModel.originalGroupList);\n            this.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.initialiseSingleMetricInstanceGroupList();\n        this.changeGroupingSelection();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n\n        if (!this.isLoading) {\n            this.changeGroupingSelection();\n        }\n    }\n\n    mergeSelectedGroups() {\n        this.showMergeSelectedGroups = false;\n\n        // store current threshold value to restore original groups when threshold is changed\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleMetricGroups();\n        } else {\n            this.mergeMultipleMetricGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.initialiseGroupsOverlapMap();\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph();\n    }\n\n    mergeSingleMetricGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = JSON.parse(JSON.stringify(group));\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    mergeFocusGroupList() {\n        this.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiMetricGroupList());\n        }\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    initialiseGroupsOverlapMap() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && this.focusModel.groupList.length > 1) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    group.overlapMap = new Map();\n                    this.checkAndAddOverlappingGroupsFromOtherMetrics(group, metric);\n                })\n            });\n\n            this.drawOverview();\n        }\n    }\n\n    checkAndAddOverlappingGroupsFromOtherMetrics(group, metric) {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overlappingMetric = this.overviewModel.metricList[metricIndex];\n\n            if (metric != overlappingMetric) {\n                var overlappingGroupList = this.getCurrentSingleMetricGroupList(overlappingMetric);\n\n                overlappingGroupList.forEach((overlappingGroup) => {\n                    this.checkAndAddOverlappingGroup(group, overlappingGroup);\n                });\n\n                if (group.overlapMap.size > 0) {\n                    break;\n                }\n            }\n        }\n    }\n\n    checkAndAddOverlappingGroup(group, overlappingGroup) {\n        if (group != overlappingGroup && overlappingGroup.isSelected) {\n            var overlappingCount = 0;\n\n            group.instanceList.forEach((instance) => {\n                var overlappingInstance = _.find(overlappingGroup.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++overlappingCount;\n                }\n            });\n\n            if (overlappingCount > 0) {\n                group.overlapMap.set(overlappingGroup, overlappingCount);\n            }\n        }\n    }\n\n    mergeMultipleMetricGroups() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        if (!this.overviewModel.originalGroupList) {\n            this.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.thresholdGroupListMap) {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped && this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.overviewModel.isSelectingTimeRange = true;\n            this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset;\n            this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        this.histogramModel.metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        this.histogramMetric = this.panel.metricList[this.overviewModel.selectedMetricIndex];\n\n        this.scope.$watch(\"ctrl.histogramMetric.color\", (newValue, oldValue) => {\n            if (newValue != oldValue) {\n                this.initialiseColorListByMetric(this.histogramMetric);\n                this.initialiseColorMapByMetric(this.histogramModel.metric, this.histogramMetric);\n                this.drawHistogram();\n            }\n        });\n\n        this.drawHistogramAxes();\n        this.drawHistogramMaxValueAndOccurence();\n        this.drawHistogramBars();\n        this.drawHistogramThresholdSlider();\n    }\n\n    drawHistogramAxes() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.histogramModel.verticalAxisStartY = this.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.lineWdith = 1;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"gray\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis();\n        this.drawHistogramHorizontalAxis();\n    }\n\n    drawHistogramVerticalAxis() {\n        var occurences = \"occurences\";\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(this.histogramModel.metric.histogram.max).width;\n        this.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(\"occurences\", this.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.overviewModel.labelTextHeight);\n        this.histogramModel.horizontalAxisY = this.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLength;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis() {\n        this.histogramModel.horizontalAxisEndX = this.histogramModel.horizontalAxisStartX +\n            this.config.histogram.barWidth * (this.histogramModel.metric.max + 1);\n        var labelX = this.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.histogramModel.horizontalAxisY + this.overviewModel.labelTextHeight / 2;\n        this.histogramCanvasContext.fillText(this.histogramMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        var occurenceLabelY = this.histogramModel.verticalAxisStartY + this.overviewModel.labelTextHeight / 2\n        this.histogramCanvasContext.fillText(this.histogramModel.metric.histogram.max, 0, occurenceLabelY);\n        var maxValueWidth = this.histogramCanvasContext.measureText(this.histogramModel.metric.max).width;\n        var valueLabelY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(this.histogramModel.metric.max, this.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.histogramModel.horizontalAxisStartX - this.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    drawHistogramBars() {\n        var occurenceStep = this.config.histogram.verticalAxisLength / this.histogramModel.metric.histogram.max;\n\n        this.histogramModel.metric.histogram.data.forEach((occurences, value) => {\n            this.histogramCanvasContext.fillStyle = this.getColorFromMap(value, this.histogramModel.metric.colorMap);\n            var x = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * value;\n            var y = this.histogramModel.horizontalAxisY - occurenceStep * occurences;\n            var height = this.histogramModel.horizontalAxisY - y;\n            var minHeight = this.config.histogram.minimumBarHeight;\n\n            if (height < minHeight) {\n                y = this.histogramModel.horizontalAxisY - minHeight;\n                height = minHeight;\n            }\n\n            this.histogramCanvasContext.fillRect(x, y, this.config.histogram.barWidth, height);\n        });\n    }\n\n    drawHistogramThresholdSlider() {\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.drawHistogramSliderLine();\n        this.drawHistogramThresholdBars();\n    }\n\n    drawHistogramSliderLine() {\n        this.histogramModel.sliderY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenSliderAndChart;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.sliderY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.sliderY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramThresholdBars() {\n        var thresholdBarY = this.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        this.histogramModel.thresholdBarList = [];\n        var i = 0;\n\n        this.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            var bar = {};\n            bar.threshold = threshold;\n            bar.x = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * (threshold.max + 1);\n\n            // no need to draw slider bar for last threshold\n            if (i < this.histogramModel.metric.colorMap.size - 1) {\n                this.histogramCanvasContext.beginPath();\n                this.histogramCanvasContext.moveTo(bar.x, thresholdBarY);\n                this.histogramCanvasContext.lineTo(bar.x, thresholdBarY + this.config.histogram.thresholdBarLength);\n                this.histogramCanvasContext.stroke();\n                this.histogramCanvasContext.closePath();\n                ++i;\n            }\n\n            this.histogramModel.thresholdBarList.push(bar);\n        });\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.overviewModel.selectedMetricIndex >= 0) {\n                if (this.isBetween(this.overviewModel.mousePosition.y, 0, this.overviewModel.overviewStartY)) {\n                    this.isSelectingMetricLabel = true;\n                    this.setOverviewCursorToPointer();\n                } else {\n                    this.deselectMetricLabel();\n                }\n            } else {\n                this.deselectMetricLabel();\n            }\n\n            if (this.isGrouped) {\n                this.handleMouseMoveOnGroupedOverview();\n            } else if (!this.isCompressed && !this.focusAreaIsFixed) {\n                this.drawFocus(evt);\n            }\n        } else {\n            this.deselectMetricLabel();\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    deselectMetricLabel() {\n        this.isSelectingMetricLabel = false;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.overviewModel.hoveredGroup = null;\n        this.overviewModel.hoveredMarker = null;\n        this.checkAndSetSelectedOverviewMarker();\n\n        if (this.overviewModel.selectedMetricIndex >= 0) {\n            this.checkAndSetHoveredGroup();\n        }\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n            if (this.overviewModel.hoveredGroup) {\n                if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                    this.setSelectedTimeIndex();\n                }\n\n                this.drawTimeIndicators();\n            } else {\n                this.clearTimeIndicator();\n            }\n        } else if (this.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.overviewCursor = \"pointer\";\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleMetricGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.timeRangeMetricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiMetricGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n    }\n\n    mouseUpOnOverView(evt) {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph();\n            }\n        } else if (!this.isCompressed) {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.initialiseGroupsOverlapMap();\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph();\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph();\n                    break;\n                }\n            }\n        }\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            this.clearFocusArea();\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            var size = this.getFocusAreaSize();\n            var offset = this.getFocusAreaOffset();\n\n            if (offset >= 0) {\n                this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n                this.overviewModel.metricList.forEach((metric) => {\n                    metric.focusStartX = metric.startX + offset;\n                    this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n                });\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    this.focusModel.sourceMetricIndex = i;\n\n                    return Math.min(Math.max(metric.startX,\n                        this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                        metric.endX - this.getFocusAreaSize()) - metric.startX;\n                }\n            }\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((instanceMetric, metricIndex) => {\n            for (var i = 0; i < this.config.colorCount; ++i) {\n                var layer = {};\n                layer.valueList = [];\n                instanceMetric.layerList.push(layer);\n            }\n\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            instanceMetric.data.forEach((point) => {\n                var value = point.value;\n                var colorList = this.panel.metricList[metricIndex].colorList;\n\n                instanceMetric.layerList.forEach((layer, layerIndex) => {\n                    overviewMetric.colorMap.forEach((color, threshold) => {\n                        if (color == colorList[layerIndex]) {\n                            layer.valueList.push(value > 0 ? value : 0);\n                            value -= threshold.max;\n                            layer.range = threshold.max - threshold.min;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.drawGroupedFocusGraphInstance(canvas, instance, Array.from(Array(maxMetricLength).keys()), this.getFocusGraphPointWidth());\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            var pointWidth = Math.floor(this.focusGraphWidth / group.overviewGroup.timeRangeIndexList.length);\n            this.drawGroupedFocusGraphInstance(canvas, instance, group.overviewGroup.timeRangeIndexList, pointWidth);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, instance, valueIndexList, pointWidth) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context, valueIndexList, pointWidth);\n    }\n\n    drawFocusGraphInstance(instance, context, valueIndexList, pointWidth) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != null) {\n                        x = pointWidth * positionIndex;\n                        this.moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context, Array.from(Array(this.getMaxMetricLength()).keys()), this.config.focusGraph.ungroupedPointWidth);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(x, y);\n        } else {\n            // move to previous position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(previousX, y);\n            }\n\n            var height;\n\n            if (value >= layer.range) {\n                height = this.config.focusGraph.metricMaxHeight;\n            } else {\n                height = value * this.config.focusGraph.metricMaxHeight / layer.range;\n            }\n\n            height = Math.max(5, height);\n            context.lineTo(x, y - height);\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    selectNode(index, evt) {\n        var instance = this.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}