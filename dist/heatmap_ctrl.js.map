{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","scope","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupSizeBarWidth","pieRadius","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","groupSizeColor","overlapColor","selectedInstancesForFocusOffset","focusArea","color","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLength","barWidth","minimumBarHeight","marginBetweenSliderAndChart","thresholdBarLength","focusGraph","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","metricMinHeight","marginBetweenMetrics","maxWidth","markerSize","marginBetweenMarkers","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","initialiseColorListByMetric","colorList","luminanceChange","i","changeColorLuminance","tab","overviewModel","timeRangePositionMap","Map","histogramModel","data","focusAreaModel","groupMarkerList","focusModel","groupList","tabList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","groupSizeChart","HORIZONTAL_BAR","PIE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","isGrouped","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphContainer","id","find","canvas","getContext","addEditorTab","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","currentTab","initialiseNewTab","convertDateToString","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","metricIndex","point","checkAndSetOverviewMinMax","console","log","overviewMetric","panelMetric","initialiseColorMapByMetric","layerRange","colorMap","getColorMap","threshold","average","set","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","sort","first","second","setHistogramMinMax","total","map","isBetween","target","start","end","initialiseSingleMetricGroups","initialiseMultiMetricGroups","initialiseSingleMetricGroupsByMetric","initialiseSingleMetricGroupsColor","initialiseSingleMetricInstanceGroupList","thresholdGroupListMap","populateSingleMetricGroupList","groupIndex","group","checkInstanceIsInGroup","initialiseNewSingleMetricGroup","instanceList","groupTotal","instanceTotal","thresholdValue","markerX","originalColor","getCurrentSingleMetricGroupList","populateMultiMetricGroupList","initialiseMultiMetricGroupsColor","findExistingMultiMetricGroup","initialiseNewMultiMetricGroup","instanceMetric","groupMetric","greyValue","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","getThresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","toDateWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiMetricGroupSize","largestGroup","getCurrentMultiMetricGroupList","groupCount","getMaxGroupCount","instanceHeight","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","drawSingeMetricGroupedOverview","drawMultiMetricGroupedOverview","drawGroupSize","drawGroupedOverviewWrapper","drawMetricSeparator","metricIndexList","y","drawOverviewInstance","pointHeight","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","groupSizeLabelWidth","drawSingleMetricGroupSize","drawMultipleMetricGroupSize","drawSingleMetricBarGroupSize","drawSingleMetricPieGroupSize","drawGroupSizeLabel","drawBarGroupSizeWrapper","selectedMetricIndexList","isSelected","overlapCount","beginPath","moveTo","lineTo","closePath","fill","startAngle","PI","drawPieGroupSizeWrapper","size","endAngle","arc","fillText","maxEndX","strokeStyle","stroke","instanceIndex","getMetricDarkestColor","format","showHistogram","changedColorThreshold","temp","addOrRemoveGroupToFocus","overviewGroup","drawFocusGraph","removeExisting","focusGroup","timeRangeIndexList","remove","removeExistingFocusGroupInSameMetric","addGroupToFocus","setShowMergeGroupsButton","newGroupList","existingGroup","showMergeSelectedGroups","setShowMergeGroupsButtonWrapper","selectedGroupCount","drawOverviewGroupMarker","marker","startY","initialiseData","initialiseFocusGraphData","showFocus","setFocusGraphCanvasHeight","pointCount","focusedIndexList","floor","focusGraphWidth","focusGraphRow","setFocusFromAndToDate","positionFocusFromAndToDate","focusRowHeight","offsetHeight","drawFocusGraphData","autoSrollFocusGraph","showAllMetrics","focusGraphHeight","evt","mousePosition","getMousePos","isSelectingBar","setNewThresholdValue","checkAndSetSelectedHistogramThresholdBar","horizontalAxisStartX","selectedBar","drawHistogram","histogramCursor","topY","sliderY","bottomY","thresholdBarList","bar","leftX","rightX","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","deselectSingleMetricGroups","deselectMultiMetricGroups","originalGroupList","previousGroupThreshold","mergeSingleMetricGroups","mergeMultipleMetricGroups","mergeFocusGroupList","initialiseGroupsOverlapCount","drawSelectedGroupsMarkers","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","getCopyOfGroup","newGroup","oldFocusGroupList","mergeFocusGroupListWrapper","setMainMetricIndexAfterMerging","mainMetricIndex","selectedMetricIndex","overviewInstance","metricWithMostData","focusInstance","getFocusInstance","oldGroup","checkOverlappingGroupsAndSetOverlapCount","check","overlappingGroup","overlappingInstance","isSelectingMetricLabel","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","focusAreaStartPoint","focusInArea","firstMetric","isDrawingFocusArea","histogramMetric","$watch","newValue","oldValue","drawHistogramAxes","drawHistogramMaxValueAndOccurence","drawHistogramBars","drawHistogramThresholdSlider","verticalAxisStartY","lineWdith","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","verticalLabelWidth","maxOccurenceWidth","horizontalAxisY","horizontalAxisEndX","labelX","labelY","occurenceLabelY","maxValueWidth","valueLabelY","originX","occurenceStep","minHeight","drawHistogramSliderLine","drawHistogramThresholdBars","thresholdBarY","drawTimeIndicators","drawSelectedTimeRanges","selectTab","setOverviewMousePosition","setSelectedMetricIndex","setOverviewCursorToPointer","deselectMetricLabel","handleMouseMoveOnGroupedOverview","drawFocusArea","focusAreaIsFixed","drawFocus","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","initialiseSelectedGroupTimeRangeIndexList","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","checkMouseIsOnTimeRange","isHoveringOnTimeRange","setSelectedTimeIndexAndDrawTimeIndicators","markerIndex","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","setSelectedTimeIndex","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","mouseIsInsideTimeRange","hoveredTimeRangeGroup","position","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","initialiseFocusAreaPoints","drawFocusAreaSquare","strokeRect","startFocusMarkerInterval","addNewTab","updateSelectedGroupListAndDrawFocusGraph","focusGroupWithInterval","stopInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","newTab","initialiseNewTabData","newMetric","startDate","endDate","newMetricInstance","updatedSelectedGroups","removeExistingGroupsInMetricByGroup","drawFocusAfterUpdatingSelectedGroups","initialiseOverlapList","drawOverlapDetails","overlappingList","firstGroup","showOverlapDetails","overlapGraphHeight","drawOverlapInstance","context","valueIndexList","drawFocusGraphInstance","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","layerIndex","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","metricListIndex","totalValue","valueIndex","positionIndex","moveFocusGraphContextBasedOnValue","getUngroupedFocusCanvas","baseY","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.scope = $scope;\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupSizeBarWidth: 1,\n            pieRadius: 8,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30,\n            groupSizeColor: \"lightgray\",\n            overlapColor: \"black\",\n            selectedInstancesForFocusOffset: 10\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\"\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 20,\n            verticalAxisLength: 500,\n            barWidth: 5,\n            minimumBarHeight: 2,\n            marginBetweenSliderAndChart: 50,\n            thresholdBarLength: 10\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            groupedPointWidth: 5,\n            ungroupedPointWidth: 40,\n            metricMaxHeight: 20,\n            metricMinHeight: 5,\n            marginBetweenMetrics: 10,\n            maxWidth: 800,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    //    query: \"node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        // this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                this.initialiseColorListByMetric(metric);\n            });\n        }\n    }\n\n    initialiseColorListByMetric(metric) {\n        // add lightest shade as defined by user\n        metric.colorList = [];\n        metric.colorList.push(metric.color);\n        var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n        // add the other shades\n        for (var i = 1; i < this.config.colorCount; ++i) {\n            var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n            metric.colorList.push(color);\n        }\n    }\n\n    initialiseNewTab() {\n        var tab = {};\n        tab.overviewModel = {};\n        tab.overviewModel.timeRangePositionMap = new Map();\n        tab.histogramModel = {};\n        tab.overviewModel.data = [];\n        tab.overviewModel.metricList = [];\n        tab.focusAreaModel = {};\n        tab.overviewModel.groupMarkerList = [];\n        tab.focusModel = {};\n        tab.focusModel.groupList = [];\n        this.tabList.push(tab);\n        return tab;\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            groupSizeChart: {\n                HORIZONTAL_BAR: \"1\",\n                PIE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupSizeChart = this.enumList.groupSizeChart.HORIZONTAL_BAR;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = this.isGrouped ? \"default\" : \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n            this.scope.$apply();\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.tabList = [];\n            this.currentTab = this.initialiseNewTab();\n            this.currentTab.fromDate = this.convertDateToString(this.fromDate * 1000);\n            this.currentTab.toDate = this.convertDateToString(this.toDate * 1000);\n\n            this.panel.metricList.forEach(() => {\n                this.currentTab.overviewModel.metricList.push(null);\n            });\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.currentTab.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.currentTab.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.currentTab.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n\n                if (metricIndex == 0 && metric.max > 100) {\n                    console.log(instance.metric.instance);\n                }\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.currentTab.overviewModel.metricList.forEach((overviewMetric, index) => {\n            var panelMetric = this.panel.metricList[index];\n            this.initialiseColorMapByMetric(overviewMetric, panelMetric);\n        });\n    }\n\n    initialiseColorMapByMetric(overviewMetric, panelMetric) {\n        var colorList = panelMetric.colorList;\n        overviewMetric.layerRange = Math.round(overviewMetric.max / colorList.length);\n\n        // map a range of values to a color\n        overviewMetric.colorMap = this.getColorMap(overviewMetric, colorList);\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.currentTab.overviewModel.data = [];\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.currentTab.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[0] - second[0];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.currentTab.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    //    metric.total += this.getThresholdAverage(point.value, this.currentTab.overviewModel.metricList[metricIndex].colorMap);\n                    metric.total += point.value;\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.currentTab.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleMetricGroups();\n        this.initialiseMultiMetricGroups();\n    }\n\n    initialiseSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseSingleMetricGroupsByMetric(metric, metricIndex);\n            this.initialiseSingleMetricGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleMetricInstanceGroupList();\n    }\n\n    initialiseSingleMetricGroupsByMetric(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var group = groupList[groupIndex];\n                group.name = this.panel.metricList[metricIndex].name + \" group \" + (groupIndex + 1);\n            }\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleMetricGroupList(groupList, metricIndex, groupingThreshold) {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                return this.checkInstanceIsInGroup(search.total, instance.metricList[metricIndex].total, groupingThreshold);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleMetricGroup(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    checkInstanceIsInGroup(groupTotal, instanceTotal, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n        var min = groupTotal * (1 - thresholdValue);\n        var max = groupTotal * (1 + thresholdValue);\n        return this.isBetween(instanceTotal, min, max);\n    }\n\n    initialiseNewSingleMetricGroup(instance, metricIndex) {\n        var group = {};\n        group.metricIndex = metricIndex;\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleMetricGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleMetricInstanceGroupList() {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                for (var i = 0; i < groupList.length; ++i) {\n                    var group = groupList[i];\n\n                    if (this.checkInstanceIsInGroup(group.total, instance.metricList[metricIndex].total, this.groupingThreshold)) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiMetricGroups() {\n        this.currentTab.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiMetricGroupList(groupList, groupingThreshold);\n            this.currentTab.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiMetricGroupsColor();\n    }\n\n    populateMultiMetricGroupList(groupList, groupingThreshold) {\n        this.currentTab.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiMetricGroup(groupList, instance, groupingThreshold);\n\n            if (!group) {\n                group = this.initialiseNewMultiMetricGroup(instance, groupList);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiMetricGroup(groupList, instance, groupingThreshold) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n\n                if (!this.checkInstanceIsInGroup(metric.total, instance.metricList[i].total, groupingThreshold)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiMetricGroup(instance, groupList) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.name = \"Group \" + (groupList.length + 1);\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiMetricGroupsColor() {\n        this.currentTab.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.currentTab.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.currentTab.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.currentTab.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        this.clearFocusArea();\n        this.drawOverview();\n    }\n\n    clearFocusArea() {\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        if (!this.isLoading) {\n            this.$timeout(() => {\n                this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n                this.setOverviewCanvasSize();\n                this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n                this.scope.$apply();\n                this.drawOverviewData();\n            });\n        }\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.currentTab.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.currentTab.overviewModel.overviewStartY = this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.currentTab.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.currentTab.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.currentTab.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                this.currentTab.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.currentTab.overviewModel.overviewWidth += this.getMaxMetricLength() * this.currentTab.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.currentTab.overviewModel.overviewWidth;\n        this.currentTab.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.currentTab.overviewModel.toDateWidth = this.overviewContext.measureText(this.currentTab.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.currentTab.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.currentTab.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.currentTab.overviewModel.metricList.length;\n\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n            });\n\n            /*\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.currentTab.overviewModel.metricList.forEach((metric) => {\n                    this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.groupSizeBarWidth;\n                });\n            } else {\n                this.overviewCanvasWidth += this.currentTab.overviewModel.metricList.length + this.config.overview.pieRadius * 2;\n            }*/\n        } else {\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                    this.getMaxMultiMetricGroupSize() * this.config.overview.groupSizeBarWidth;\n            } else {\n                this.overviewCanvasWidth += this.config.overview.pieRadius * 2;\n            }\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.groupSizeBarWidth;\n    }\n\n    getCurrentSingleMetricGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiMetricGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiMetricGroupList() {\n        return this.currentTab.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                this.currentTab.overviewModel.instanceHeight = this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups;\n            } else {\n                this.currentTab.overviewModel.instanceHeight = this.config.overview.pieRadius * 2 + this.config.overview.marginBetweenGroups;\n            }\n\n            this.currentTab.overviewModel.overviewHeight = groupCount * this.currentTab.overviewModel.instanceHeight;\n        } else {\n            this.currentTab.overviewModel.instanceHeight = this.config.overview.ungroupedPointHeight;\n            this.currentTab.overviewModel.overviewHeight = this.currentTab.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.currentTab.overviewModel.overviewHeight +\n            (this.currentTab.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.currentTab.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        //this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.currentTab.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    metric.startX += this.config.overview.marginBetweenMetricAndGroupSize;\n\n                    if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                        var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                        metric.startX += maxGroupSizeBarLength;\n                    } else {\n                        metric.startX += this.config.overview.pieRadius * 2;\n                    }\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeMetricGroupedOverview();\n        } else {\n            this.drawMultiMetricGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeMetricGroupedOverview() {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupedOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            if (metricIndex < this.currentTab.overviewModel.metricList.length - 1) {\n                this.drawMetricSeparator(metric);\n            }\n        });\n    }\n\n    drawGroupedOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        instance.y = this.currentTab.overviewModel.overviewStartY + groupIndex * this.currentTab.overviewModel.instanceHeight;\n\n        if (this.groupSizeChart == this.enumList.groupSizeChart.PIE) {\n            instance.y += this.currentTab.overviewModel.instanceHeight / 2;\n        }\n\n        this.drawOverviewInstance(instance, this.config.overview.groupedPointHeight, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, pointHeight, metricIndexList) {\n        var endY = instance.y + this.currentTab.overviewModel.instanceHeight;\n\n        if (endY > this.currentTab.overviewModel.overviewEndY) {\n            this.currentTab.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex, this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.currentTab.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result = null;\n\n        map.forEach((color, threshold) => {\n            if (!result && this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiMetricGroupedOverview() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupedOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.currentTab.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        this.currentTab.overviewModel.groupSizeLabelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleMetricGroupSize();\n        } else {\n            this.drawMultipleMetricGroupSize();\n        }\n    }\n\n    drawSingleMetricGroupSize() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                    this.drawSingleMetricBarGroupSize(group, startX);\n                } else {\n                    this.drawSingleMetricPieGroupSize(group, startX);\n                }\n            });\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n            } else {\n                this.drawGroupSizeLabel((startX * 2 + this.config.overview.pieRadius - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n            }\n        });\n    }\n\n    drawSingleMetricBarGroupSize(group, startX) {\n        this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n        // don't draw overlap if group isn't selected and is in a selected metric\n        if (this.currentTab.overviewModel.selectedMetricIndexList &&\n            (!this.currentTab.overviewModel.selectedMetricIndexList.includes(group.metricIndex) || group.isSelected)) {\n            this.drawBarGroupSizeWrapper(group, startX, group.overlapCount, this.config.overview.overlapColor);\n        }\n    }\n\n    drawBarGroupSizeWrapper(group, startX, length, color) {\n        var endX = startX + length * this.config.overview.groupSizeBarWidth;\n        var endY = group.y + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, group.y);\n        this.overviewContext.lineTo(endX, group.y);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawSingleMetricPieGroupSize(group, startX) {\n        var startAngle = -0.5 * Math.PI;\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.instanceList.length, this.config.overview.groupSizeColor);\n        this.drawPieGroupSizeWrapper(group, startX, startAngle, group.overlapCount, this.config.overview.overlapColor);\n    }\n\n    drawPieGroupSizeWrapper(group, startX, startAngle, size, color) {\n        var x = startX + this.config.overview.pieRadius;\n        var endAngle = startAngle + size * 2 * Math.PI / 360;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, group.y);\n        this.overviewContext.arc(x, group.y, this.config.overview.pieRadius, startAngle, endAngle);\n        this.overviewContext.lineTo(x, group.y);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = color;\n        this.overviewContext.fill();\n        return endAngle;\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.currentTab.overviewModel.labelTextHeight);\n    }\n\n    drawMultipleMetricGroupSize() {\n        var startX = this.currentTab.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize +\n            this.currentTab.overviewModel.groupSizeLabelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawBarGroupSizeWrapper(group, startX, group.instanceList.length, this.config.overview.groupSizeColor);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - this.currentTab.overviewModel.groupSizeLabelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            x += this.config.overview.marginBetweenMetricAndGroupSize;\n\n            if (this.groupSizeChart == this.enumList.groupSizeChart.HORIZONTAL_BAR) {\n                var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n                x += maxGroupSizeBarLength;\n            } else {\n                x += this.config.overview.pieRadius * 2;\n            }\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.currentTab.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.currentTab.overviewModel.overviewStartY + this.currentTab.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.currentTab.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            instance.y = this.currentTab.overviewModel.overviewStartY + instanceIndex * this.currentTab.overviewModel.instanceHeight;\n            this.drawOverviewInstance(instance, this.currentTab.overviewModel.instanceHeight, metricIndexList);\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.currentTab.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.currentTab.overviewModel.labelTextHeight);\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.currentTab.overviewModel.overviewStartY + this.currentTab.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.currentTab.overviewModel.toDate, metric.endX - this.currentTab.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    closeHistogram() {\n        this.showHistogram = false;\n\n        if (this.changedColorThreshold) {\n            this.changedColorThreshold = false;\n            this.drawOverview();\n\n            if (this.isGrouped) {\n                var temp = this.currentTab.focusModel.groupList;\n                this.currentTab.focusModel.groupList = [];\n\n                temp.forEach((group) => {\n                    this.addOrRemoveGroupToFocus(group.overviewGroup, true);\n                });\n\n                this.drawFocusGraph();\n            } else {\n                this.drawFocusGraph();\n            }\n        }\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.currentTab.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        });\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n                group.timeRangeIndexList = null;\n\n                // deselect group from focus\n                _.remove(this.currentTab.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.removeExistingFocusGroupInSameMetric(group);\n            }\n\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    removeExistingFocusGroupInSameMetric(group) {\n        var newGroupList = [];\n\n        this.currentTab.focusModel.groupList.forEach((existingGroup) => {\n            if (existingGroup.overviewGroup.metricIndex == group.metricIndex) {\n                existingGroup.overviewGroup.isSelected = false;\n            } else {\n                newGroupList.push(existingGroup);\n            }\n        });\n\n        this.currentTab.focusModel.groupList = newGroupList;\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.currentTab.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.currentTab.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.currentTab.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.currentTab.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    drawFocusGraph(initialiseData) {\n        if (!this.isGrouped && initialiseData) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.currentTab.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.currentTab.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.setFocusGraphCanvasHeight();\n                var pointCount = this.currentTab.focusModel.focusedIndexList.length - 1;\n                var pointWidth;\n\n                if (this.isGrouped) {\n                    pointWidth = Math.max(1, Math.floor(this.config.focusGraph.maxWidth / pointCount));\n                } else {\n                    pointWidth = this.config.focusGraph.ungroupedPointWidth;\n                }\n\n                this.focusGraphWidth = Math.min(this.config.focusGraph.maxWidth, pointCount * pointWidth);\n                this.scope.$apply();\n                this.currentTab.focusModel.pointWidth = Math.max(1, Math.floor(this.focusGraphWidth / pointCount));\n\n                this.$timeout(() => {\n                    var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                    if (focusGraphRow) {\n                        this.setFocusFromAndToDate();\n\n                        if (!this.isGrouped) {\n                            this.positionFocusFromAndToDate();\n                        }\n\n                        this.currentTab.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                        this.drawFocusGraphData();\n                        this.autoSrollFocusGraph();\n                    }\n                });\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    setFocusGraphCanvasHeight() {\n        if (this.isGrouped) {\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                if (group.showAllMetrics) {\n                    group.focusGraphHeight = this.currentTab.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.currentTab.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    group.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        } else {\n            this.currentTab.focusModel.data.forEach((instance) => {\n                if (instance.showAllMetrics) {\n                    instance.focusGraphHeight = this.currentTab.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                        (this.currentTab.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                } else {\n                    instance.focusGraphHeight = this.config.focusGraph.metricMaxHeight;\n                }\n            });\n        }\n    }\n\n    moveMouseOnHistogram(evt) {\n        this.currentTab.histogramModel.mousePosition = this.getMousePos(evt, this.histogramCanvas);\n\n        if (this.currentTab.histogramModel.isSelectingBar) {\n            this.setNewThresholdValue();\n        } else {\n            this.checkAndSetSelectedHistogramThresholdBar();\n        }\n    }\n\n    setNewThresholdValue() {\n        this.changedColorThreshold = true;\n        var value = Math.round((this.currentTab.histogramModel.mousePosition.x - this.currentTab.histogramModel.horizontalAxisStartX) / this.config.histogram.barWidth);\n        value = Math.max(value, 1);\n        value = Math.min(value, this.currentTab.histogramModel.metric.max - 1);\n\n        this.currentTab.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            if (threshold != this.currentTab.histogramModel.selectedBar.threshold) {\n                if (value >= this.currentTab.histogramModel.selectedBar.threshold.max) {\n                    // move right\n                    if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                        value = Math.min(value, threshold.max - 1);\n                        threshold.min = value;\n                    }\n                } else {\n                    // move left\n                    if (this.currentTab.histogramModel.selectedBar.threshold.min == 0) {\n                        // left most threshold\n                        if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    } else {\n                        // left threshold\n                        if (threshold.max == this.currentTab.histogramModel.selectedBar.threshold.min) {\n                            value = Math.max(value, threshold.max + 1);\n                        }\n\n                        // right threshold\n                        if (threshold.min == this.currentTab.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    }\n                }\n            }\n        });\n\n        this.currentTab.histogramModel.selectedBar.threshold.max = value;\n        this.drawHistogram();\n    }\n\n    checkAndSetSelectedHistogramThresholdBar() {\n        this.histogramCursor = \"default\";\n        this.currentTab.histogramModel.selectedBar = null;\n        var topY = this.currentTab.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        var bottomY = this.currentTab.histogramModel.sliderY + this.config.histogram.thresholdBarLength / 2;\n\n        if (this.isBetween(this.currentTab.histogramModel.mousePosition.y, topY, bottomY)) {\n            for (var i = 0; i < this.currentTab.histogramModel.thresholdBarList.length; ++i) {\n                var bar = this.currentTab.histogramModel.thresholdBarList[i];\n                var leftX = bar.x - this.config.histogram.barWidth;\n                var rightX = bar.x + this.config.histogram.barWidth;\n\n                if (this.isBetween(this.currentTab.histogramModel.mousePosition.x, leftX, rightX)) {\n                    this.histogramCursor = \"pointer\";\n                    this.currentTab.histogramModel.selectedBar = bar;\n                    break;\n                }\n            }\n        }\n    }\n\n    mouseDownOnHistogram() {\n        if (this.currentTab.histogramModel.selectedBar) {\n            this.currentTab.histogramModel.isSelectingBar = true;\n        }\n    }\n\n    mouseUpOnHistogram() {\n        this.currentTab.histogramModel.isSelectingBar = false;\n        this.currentTab.histogramModel.selectedBar = null;\n        this.histogramCursor = \"default\";\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        if (!this.isLoading) {\n            this.drawOverview();\n            this.clearFocusArea();\n            this.clearTimeIndicator();\n            this.deselectAllGroups();\n            this.showFocus = false;\n            this.showMergeSelectedGroups = false;\n        }\n    }\n\n    deselectAllGroups() {\n        this.currentTab.focusModel.groupList = [];\n        this.currentTab.overviewModel.timeRangePositionMap = new Map();\n        this.deselectSingleMetricGroups();\n        this.deselectMultiMetricGroups();\n    }\n\n    deselectSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                    group.overlapCount = 0;\n                });\n            }\n        });\n    }\n\n    deselectMultiMetricGroups() {\n        if (this.currentTab.overviewModel.originalGroupList) {\n            this.currentTab.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.currentTab.overviewModel.originalGroupList);\n            this.currentTab.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.initialiseSingleMetricInstanceGroupList();\n        this.changeGroupingSelection();\n    }\n\n    selectGroupsizeChart() {\n        this.drawOverview();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    mergeSelectedGroups() {\n        this.showMergeSelectedGroups = false;\n\n        // store current threshold value to restore original groups when threshold is changed\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleMetricGroups();\n        } else {\n            this.mergeMultipleMetricGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.initialiseGroupsOverlapCount();\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n    }\n\n    mergeSingleMetricGroups() {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = this.getCopyOfGroup(group);\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    getCopyOfGroup(group) {\n        var newGroup = {};\n        newGroup.name = group.name;\n        newGroup.metricIndex = group.metricIndex;\n        newGroup.instanceList = group.instanceList;\n        newGroup.total = group.total;\n        newGroup.color = group.color;\n        newGroup.isSelected = group.isSelected;\n        newGroup.markerX = group.markerX;\n        newGroup.y = group.y;\n        return newGroup;\n    }\n\n    mergeFocusGroupList() {\n        var oldFocusGroupList = this.currentTab.focusModel.groupList;\n        this.currentTab.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiMetricGroupList());\n        }\n\n        this.setMainMetricIndexAfterMerging(oldFocusGroupList);\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n        focusGroup.mainMetricIndex = this.currentTab.overviewModel.selectedMetricIndex;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.currentTab.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.currentTab.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.currentTab.focusModel.groupList.push(focusGroup);\n    }\n\n    setMainMetricIndexAfterMerging(oldFocusGroupList) {\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            var oldGroup = _.find(oldFocusGroupList, (search) => {\n                return search.overviewGroup == group.overviewGroup;\n            });\n\n            if (oldGroup) {\n                group = oldGroup.mainMetricIndex;\n            }\n        });\n    }\n\n    initialiseGroupsOverlapCount() {\n        this.currentTab.overviewModel.selectedMetricIndexList = [];\n\n        this.currentTab.focusModel.groupList.forEach((group) => {\n            this.currentTab.overviewModel.selectedMetricIndexList.push(group.overviewGroup.metricIndex);\n        });\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n            groupList.forEach((group) => {\n                group.overlapCount = 0;\n\n                if (this.currentTab.focusModel.groupList.length > 0) {\n                    this.checkOverlappingGroupsAndSetOverlapCount(group);\n                }\n            });\n        });\n    }\n\n    checkOverlappingGroupsAndSetOverlapCount(group) {\n        group.instanceList.forEach((instance) => {\n            var check = 0;\n\n            this.currentTab.focusModel.groupList.forEach((overlappingGroup) => {\n                if (overlappingGroup.overviewGroup.metricIndex != group.metricIndex) {\n                    var overlappingInstance = _.find(overlappingGroup.overviewGroup.instanceList, (search) => {\n                        return search.instance == instance.instance;\n                    });\n\n                    if (overlappingInstance) {\n                        ++check;\n                    }\n                }\n            });\n\n            if (this.currentTab.overviewModel.selectedMetricIndexList.length > 1 &&\n                this.currentTab.overviewModel.selectedMetricIndexList.includes(group.metricIndex)) {\n                if (check == this.currentTab.overviewModel.selectedMetricIndexList.length - 1) {\n                    ++group.overlapCount;\n                }\n            } else if (check == this.currentTab.overviewModel.selectedMetricIndexList.length) {\n                ++group.overlapCount;\n            }\n        });\n    }\n\n    mergeMultipleMetricGroups() {\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        if (!this.currentTab.overviewModel.originalGroupList) {\n            this.currentTab.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.currentTab.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.currentTab.overviewModel.thresholdGroupListMap) {\n            this.currentTab.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.currentTab.overviewModel.metricList) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n                this.currentTab.overviewModel.isSelectingTimeRange = true;\n                this.currentTab.overviewModel.timeRangeStartOffset = this.currentTab.overviewModel.mousePositionXOffset;\n                this.currentTab.overviewModel.timeRangeGroup = this.currentTab.overviewModel.hoveredGroup;\n            }\n        } else {\n            this.currentTab.overviewModel.focusAreaStartPoint = {};\n            this.focusInArea = false;\n            var firstMetric = this.currentTab.overviewModel.metricList[0];\n            this.currentTab.overviewModel.focusAreaStartPoint.x =\n                Math.max(firstMetric.startX, this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX);\n            this.currentTab.overviewModel.focusAreaStartPoint.y = this.currentTab.overviewModel.mousePosition.y;\n            this.isDrawingFocusArea = true;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        this.currentTab.histogramModel.metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        this.histogramMetric = this.panel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n        this.scope.$watch(\"ctrl.histogramMetric.color\", (newValue, oldValue) => {\n            if (newValue != oldValue) {\n                this.initialiseColorListByMetric(this.histogramMetric);\n                this.initialiseColorMapByMetric(this.currentTab.histogramModel.metric, this.histogramMetric);\n                this.drawHistogram();\n            }\n        });\n\n        this.drawHistogramAxes();\n        this.drawHistogramMaxValueAndOccurence();\n        this.drawHistogramBars();\n        this.drawHistogramThresholdSlider();\n    }\n\n    drawHistogramAxes() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.currentTab.histogramModel.verticalAxisStartY = this.currentTab.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.lineWdith = 1;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"gray\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis();\n        this.drawHistogramHorizontalAxis();\n    }\n\n    drawHistogramVerticalAxis() {\n        var occurences = \"occurences\";\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(this.currentTab.histogramModel.metric.histogram.max).width;\n        this.currentTab.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(\"occurences\", this.currentTab.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.currentTab.overviewModel.labelTextHeight);\n        this.currentTab.histogramModel.horizontalAxisY = this.currentTab.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLength;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis() {\n        this.currentTab.histogramModel.horizontalAxisEndX = this.currentTab.histogramModel.horizontalAxisStartX +\n            this.config.histogram.barWidth * (this.currentTab.histogramModel.metric.max + 1);\n        var labelX = this.currentTab.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.currentTab.histogramModel.horizontalAxisY + this.currentTab.overviewModel.labelTextHeight / 2;\n        this.histogramCanvasContext.fillText(this.histogramMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisEndX, this.currentTab.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        var occurenceLabelY = this.currentTab.histogramModel.verticalAxisStartY + this.currentTab.overviewModel.labelTextHeight / 2\n        this.histogramCanvasContext.fillText(this.currentTab.histogramModel.metric.histogram.max, 0, occurenceLabelY);\n        var maxValueWidth = this.histogramCanvasContext.measureText(this.currentTab.histogramModel.metric.max).width;\n        var valueLabelY = this.currentTab.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.currentTab.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(this.currentTab.histogramModel.metric.max, this.currentTab.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.currentTab.histogramModel.horizontalAxisStartX - this.currentTab.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    drawHistogramBars() {\n        var occurenceStep = this.config.histogram.verticalAxisLength / this.currentTab.histogramModel.metric.histogram.max;\n\n        this.currentTab.histogramModel.metric.histogram.data.forEach((occurences, value) => {\n            this.histogramCanvasContext.fillStyle = this.getColorFromMap(value, this.currentTab.histogramModel.metric.colorMap);\n            var x = this.currentTab.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * value;\n            var y = this.currentTab.histogramModel.horizontalAxisY - occurenceStep * occurences;\n            var height = this.currentTab.histogramModel.horizontalAxisY - y;\n            var minHeight = this.config.histogram.minimumBarHeight;\n\n            if (height < minHeight) {\n                y = this.currentTab.histogramModel.horizontalAxisY - minHeight;\n                height = minHeight;\n            }\n\n            this.histogramCanvasContext.fillRect(x, y, this.config.histogram.barWidth, height);\n        });\n    }\n\n    drawHistogramThresholdSlider() {\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.drawHistogramSliderLine();\n        this.drawHistogramThresholdBars();\n    }\n\n    drawHistogramSliderLine() {\n        this.currentTab.histogramModel.sliderY = this.currentTab.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenSliderAndChart;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.currentTab.histogramModel.horizontalAxisStartX, this.currentTab.histogramModel.sliderY);\n        this.histogramCanvasContext.lineTo(this.currentTab.histogramModel.horizontalAxisEndX, this.currentTab.histogramModel.sliderY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramThresholdBars() {\n        var thresholdBarY = this.currentTab.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        this.currentTab.histogramModel.thresholdBarList = [];\n        var i = 0;\n\n        this.currentTab.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            var bar = {};\n            bar.threshold = threshold;\n            bar.x = this.currentTab.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * (threshold.max + 1);\n\n            // no need to draw slider bar for last threshold\n            if (i < this.currentTab.histogramModel.metric.colorMap.size - 1) {\n                this.histogramCanvasContext.beginPath();\n                this.histogramCanvasContext.moveTo(bar.x, thresholdBarY);\n                this.histogramCanvasContext.lineTo(bar.x, thresholdBarY + this.config.histogram.thresholdBarLength);\n                this.histogramCanvasContext.stroke();\n                this.histogramCanvasContext.closePath();\n                ++i;\n            }\n\n            this.currentTab.histogramModel.thresholdBarList.push(bar);\n        });\n    }\n\n    selectTab(tab) {\n        this.currentTab = tab;\n\n        this.$timeout(() => {\n            this.drawOverview();\n            this.drawSelectedGroupsMarkers();\n            this.drawFocusGraph();\n\n            this.$timeout(() => {\n                if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                    this.drawTimeIndicators();\n                } else {\n                    this.drawSelectedTimeRanges();\n                }\n            });\n        });\n    }\n\n    removeTab(tab) {\n        _.remove(this.tabList, (search) => {\n            return search == tab;\n        });\n\n        if (this.currentTab == tab) {\n            this.selectTab(this.tabList[0]);\n        }\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.currentTab.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n                // check if mouse is on metric label\n                var bottomY = this.currentTab.overviewModel.overviewStartY - this.config.overview.marginBetweenLabelsAndOverview;\n\n                if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, 0, bottomY)) {\n                    this.isSelectingMetricLabel = true;\n                    this.setOverviewCursorToPointer();\n                } else {\n                    this.deselectMetricLabel();\n                }\n            } else {\n                this.deselectMetricLabel();\n            }\n\n            if (this.isGrouped) {\n                this.handleMouseMoveOnGroupedOverview();\n            } else if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n                if (this.isDrawingFocusArea) {\n                    this.drawFocusArea();\n                } else if (!this.focusAreaIsFixed) {\n                    this.clearFocusArea();\n                    this.drawFocus();\n                }\n            }\n        } else {\n            this.deselectMetricLabel();\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.currentTab.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.currentTab.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.currentTab.overviewModel.selectedMetricIndex = metricIndex;\n                    // set x position of mouse per overview graph for easier manipulation with mouse positions\n                    this.currentTab.overviewModel.mousePositionXOffset =\n                        this.currentTab.overviewModel.mousePosition.x - metric.startX + this.currentTab.overviewModel.metricList[0].startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.currentTab.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    deselectMetricLabel() {\n        this.isSelectingMetricLabel = false;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.currentTab.overviewModel.hoveredGroup = null;\n        this.currentTab.overviewModel.hoveredMarker = null;\n\n        if (this.currentTab.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n            this.drawFocusGraph(false);\n        } else {\n            this.checkAndSetSelectedOverviewMarker();\n\n            if (this.currentTab.overviewModel.selectedMetricIndex >= 0) {\n                this.checkAndSetHoveredGroup();\n                this.checkMouseIsOnTimeRange();\n            }\n\n            if (this.currentTab.overviewModel.isHoveringOnTimeRange) {\n                this.overviewCursor = \"pointer\";\n            }\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                this.setSelectedTimeIndexAndDrawTimeIndicators();\n            }\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.currentTab.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.currentTab.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.currentTab.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.setOverviewCursorToPointer();\n                this.currentTab.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleMetricGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiMetricGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.currentTab.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndexAndDrawTimeIndicators() {\n        if (this.currentTab.overviewModel.hoveredGroup) {\n            if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                this.setSelectedTimeIndex();\n            }\n\n            this.drawTimeIndicators();\n        } else {\n            this.clearTimeIndicator();\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiMetricGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.currentTab.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.currentTab.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.currentTab.overviewModel.metricList[this.currentTab.overviewModel.selectedMetricIndex]);\n        } else {\n            this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.currentTab.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.currentTab.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.currentTab.overviewModel.mousePositionXOffset - this.currentTab.overviewModel.metricList[0].startX;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.currentTab.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiMetricGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.currentTab.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.currentTab.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleMetricGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.currentTab.overviewModel.overviewStartY + this.currentTab.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.currentTab.overviewModel.mousePosition.x - this.currentTab.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    checkMouseIsOnTimeRange() {\n        this.currentTab.overviewModel.isHoveringOnTimeRange = false;\n        this.currentTab.overviewModel.mouseIsInsideTimeRange = false;\n        this.currentTab.overviewModel.hoveredTimeRangeGroup = null;\n\n        this.currentTab.overviewModel.timeRangePositionMap.forEach((position, group) => {\n            if (this.currentTab.overviewModel.selectedMetricIndex == group.metricIndex &&\n                this.isBetween(this.currentTab.overviewModel.mousePosition.y, position.startY, group.y)) {\n                this.currentTab.overviewModel.isHoveringOnTimeRange = true;\n                this.currentTab.overviewModel.hoveredTimeRangeGroup = group;\n\n                if (this.isBetween(this.currentTab.overviewModel.mousePosition.x, position.startX, position.endX)) {\n                    this.currentTab.overviewModel.mouseIsInsideTimeRange = true;\n                }\n            }\n        });\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var metricIndex = this.currentTab.overviewModel.selectedMetricIndex;\n        var instanceMetric = this.currentTab.overviewModel.timeRangeGroup.instanceList[0].metricList[metricIndex];\n        var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n        var startX = overviewMetric.startX + this.currentTab.overviewModel.timeRangeStartOffset - this.currentTab.overviewModel.metricList[0].startX;\n        var firstMetric = this.currentTab.overviewModel.metricList[0];\n        var endX = overviewMetric.startX + this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.currentTab.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.currentTab.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.currentTab.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleMetricGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.metricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiMetricGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.currentTab.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.metricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiMetricGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n\n        var position = {\n            startX: startX,\n            endX: endX,\n            startY: startY\n        };\n\n        this.currentTab.overviewModel.timeRangePositionMap.set(group, position);\n    }\n\n    drawFocusArea() {\n        this.initialiseFocusAreaPoints();\n\n        if (this.currentTab.focusAreaModel.startX != this.currentTab.focusAreaModel.endX &&\n            this.currentTab.focusAreaModel.startY != this.currentTab.focusAreaModel.endY) {\n            this.focusInArea = true;\n            this.focusAreaIsFixed = false;\n            this.drawFocusAreaSquare();\n        } else {\n            this.focusInArea = false;\n        }\n    }\n\n    initialiseFocusAreaPoints() {\n        var firstMetric = this.currentTab.overviewModel.metricList[0];\n        this.currentTab.focusAreaModel.startX = this.currentTab.overviewModel.focusAreaStartPoint.x;\n        this.currentTab.focusAreaModel.endX = this.currentTab.overviewModel.mousePositionXOffset - firstMetric.startX;\n\n        if (this.currentTab.focusAreaModel.startX > this.currentTab.overviewModel.mousePositionXOffset) {\n            this.currentTab.focusAreaModel.startX = this.currentTab.overviewModel.mousePositionXOffset;\n            this.currentTab.focusAreaModel.endX = this.currentTab.overviewModel.focusAreaStartPoint.x;\n        }\n\n        this.currentTab.focusAreaModel.startY = this.currentTab.overviewModel.focusAreaStartPoint.y;\n        this.currentTab.focusAreaModel.endY = this.currentTab.overviewModel.mousePosition.y;\n\n        if (this.currentTab.focusAreaModel.startY > this.currentTab.overviewModel.mousePosition.y) {\n            this.currentTab.focusAreaModel.startY = this.currentTab.overviewModel.mousePosition.y;\n            this.currentTab.focusAreaModel.endY = this.currentTab.overviewModel.focusAreaStartPoint.y;\n        }\n\n        this.currentTab.focusAreaModel.startX = Math.max(this.currentTab.focusAreaModel.startX, firstMetric.startX);\n        this.currentTab.focusAreaModel.endX = Math.min(this.currentTab.focusAreaModel.endX, firstMetric.endX);\n        this.currentTab.focusAreaModel.startY = Math.max(this.currentTab.focusAreaModel.startY, this.currentTab.overviewModel.overviewStartY);\n        this.currentTab.focusAreaModel.endY = Math.min(this.currentTab.focusAreaModel.endY, this.currentTab.overviewModel.overviewEndY);\n    }\n\n    drawFocusAreaSquare() {\n        this.clearFocusArea();\n        this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n        var width = this.currentTab.focusAreaModel.endX - this.currentTab.focusAreaModel.startX;\n        var height = this.currentTab.focusAreaModel.endY - this.currentTab.focusAreaModel.startY;\n\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            this.focusAreaContext.strokeRect(metric.startX + this.currentTab.focusAreaModel.startX, this.currentTab.focusAreaModel.startY, width, height);\n        });\n    }\n\n    mouseUpOnOverView() {\n        if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.currentTab.overviewModel.hoveredMarker.group);\n            } else if (this.currentTab.overviewModel.isHoveringOnTimeRange) {\n                if (this.currentTab.overviewModel.mouseIsInsideTimeRange) {\n                    this.addNewTab();\n                    this.selectTab(this.currentTab);\n                } else {\n                    this.currentTab.overviewModel.hoveredTimeRangeGroup.timeRangeIndexList = null;\n                    this.drawSelectedTimeRanges();\n                    this.drawFocusGraph(false);\n                }\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph(false);\n            }\n\n            this.currentTab.overviewModel.isHoveringOnTimeRange = false;\n            this.currentTab.overviewModel.isSelectingTimeRange = false;\n        } else {\n            if (this.isDrawingFocusArea) {\n                this.drawFocusGraph(false);\n                this.isDrawingFocusArea = false;\n            }\n\n            this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.currentTab.focusModel.overviewGroupWithIntervalList) {\n                    this.currentTab.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    addNewTab() {\n        var newTab = this.initialiseNewTab();\n        newTab.fromDate = this.currentTab.overviewModel.hoveredTimeRangeGroup.startTimeRangeDate;\n        newTab.toDate = this.currentTab.overviewModel.hoveredTimeRangeGroup.endTimeRangeDate;\n        this.initialiseNewTabData(newTab);\n        this.currentTab = newTab;\n        this.initialiseMetricMinMaxTotal();\n        this.initialiseColorMap();\n        this.initialiseOverviewData();\n        this.initialiseOverviewGroups();\n        this.initialiseCompressedTimeIndexes();\n    }\n\n    initialiseNewTabData(newTab) {\n        this.currentTab.overviewModel.metricList.forEach((metric) => {\n            var newMetric = {};\n            newMetric.data = [];\n            var group = this.currentTab.overviewModel.hoveredTimeRangeGroup;\n            var instanceMetric = group.instanceList[0].metricList[this.currentTab.overviewModel.selectedMetricIndex];\n            var timeRangeIndexList = group.timeRangeIndexList;\n            var startDate = instanceMetric.data[timeRangeIndexList[0]].date;\n            var endDate = instanceMetric.data[timeRangeIndexList[timeRangeIndexList.length - 1]].date;\n\n            metric.data.forEach((metricInstance) => {\n                var newMetricInstance = {};\n                newMetricInstance.metric = metricInstance.metric;\n                newMetricInstance.values = [];\n\n                metricInstance.values.forEach((value) => {\n                    var date = value[0];\n\n                    if (this.isBetween(date, startDate, endDate)) {\n                        newMetricInstance.values.push(value);\n                    }\n                });\n\n                newMetric.data.push(newMetricInstance);\n            });\n\n            newTab.overviewModel.metricList.push(newMetric);\n        });\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        var updatedSelectedGroups = false;\n\n        if (this.currentTab.overviewModel.isSelectingTimeRange) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.removeExistingGroupsInMetricByGroup(this.currentTab.overviewModel.timeRangeGroup);\n            }\n\n            var removeExisting = this.currentTab.overviewModel.timeRangeStartOffset == this.currentTab.overviewModel.mousePositionXOffset;\n            this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.timeRangeGroup, removeExisting);\n            updatedSelectedGroups = true;\n        } else if (this.currentTab.overviewModel.hoveredGroup) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.removeExistingGroupsInMetricByGroup(this.currentTab.overviewModel.hoveredGroup);\n            }\n\n            this.addOrRemoveGroupToFocus(this.currentTab.overviewModel.hoveredGroup, true);\n            updatedSelectedGroups = true;\n        } else {\n            this.stopInterval();\n        }\n\n        if (updatedSelectedGroups) {\n            this.drawFocusAfterUpdatingSelectedGroups();\n        }\n    }\n\n    removeExistingGroupsInMetricByGroup(group) {\n        _.remove(this.currentTab.focusModel.groupList, (search) => {\n            search.overviewGroup.metricIndex == group.metricIndex &&\n                search.overviewGroup != group;\n        });\n\n        var groupList = this.getCurrentSingleMetricGroupList(this.currentTab.overviewModel.metricList[group.metricIndex]);\n\n        if (groupList) {\n            groupList.forEach((existingGroup) => {\n                if (existingGroup != group) {\n                    existingGroup.isSelected = false;\n                    existingGroup.timeRangeIndexList = null;\n                }\n            });\n        }\n    }\n\n    drawFocusAfterUpdatingSelectedGroups() {\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.initialiseGroupsOverlapCount();\n\n            if (this.currentTab.focusModel.groupList.length > 1) {\n                this.initialiseOverlapList();\n            }\n\n            this.drawOverview();\n        }\n\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph(false);\n        this.drawOverlapDetails();\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    initialiseOverlapList() {\n        this.currentTab.focusModel.overlappingList = [];\n        var firstGroup = this.currentTab.focusModel.groupList[0];\n\n        firstGroup.instanceList.forEach((instance) => {\n            var check = 0;\n\n            for (var groupIndex = 1; groupIndex < this.currentTab.focusModel.groupList.length; ++groupIndex) {\n                var overlappingGroup = this.currentTab.focusModel.groupList[groupIndex];\n\n                var overlappingInstance = _.find(overlappingGroup.instanceList, (search) => {\n                    return search.instance == instance.instance;\n                });\n\n                if (overlappingInstance) {\n                    ++check;\n                }\n            }\n\n            if (check == this.currentTab.focusModel.groupList.length - 1) {\n                this.currentTab.focusModel.overlappingList.push(instance);\n            }\n        });\n    }\n\n    drawOverlapDetails() {\n        if (this.showOverlapDetails) {\n            this.$timeout(() => {\n                this.overlapGraphHeight = this.currentTab.focusModel.groupList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.currentTab.focusModel.groupList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.scope.$apply();\n\n                var metricIndexList = [];\n\n                this.currentTab.focusModel.groupList.forEach((group) => {\n                    metricIndexList.push(group.overviewGroup.metricIndex);\n                });\n\n                this.currentTab.focusModel.overlappingList.forEach((instance, instanceIndex) => {\n                    this.drawOverlapInstance(instance, instanceIndex, metricIndexList);\n                });\n            });\n        }\n    }\n\n    drawOverlapInstance(instance, instanceIndex, metricIndexList) {\n        var canvas = this.getElementByID(\"focusGraphOverlapCanvas-\" + instanceIndex)\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n        var metricList = [];\n\n        metricIndexList.forEach((metricIndex) => {\n            metricList.push(instance.metricList[metricIndex]);\n        });\n\n        this.drawFocusGraphInstance(context, valueIndexList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocus() {\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            var metric = this.currentTab.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph(true);\n                    break;\n                }\n            }\n        }\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.currentTab.focusModel.data) {\n            this.currentTab.focusModel.data = [];\n        }\n\n        this.currentTab.focusModel.data.length = 0;\n        var topY = Math.max(0, this.currentTab.overviewModel.mousePosition.y - this.config.overview.selectedInstancesForFocusOffset);\n        var bottomY = Math.min(this.currentTab.overviewModel.overviewEndY, this.currentTab.overviewModel.mousePosition.y + this.config.overview.selectedInstancesForFocusOffset);\n\n        if (this.focusInArea) {\n            topY = this.currentTab.focusAreaModel.startY;\n            bottomY = this.currentTab.focusAreaModel.endY;\n        }\n\n        this.currentTab.overviewModel.data.forEach((overviewInstance) => {\n            if (this.isBetween(overviewInstance.y, topY, bottomY)) {\n                this.currentTab.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.currentTab.focusModel.focusedIndexList);\n                this.currentTab.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var metricIndex = 0; metricIndex < overviewInstance.metricList.length; ++metricIndex) {\n            var instanceMetric = overviewInstance.metricList[metricIndex];\n\n            if (instanceMetric.data.length > 0) {\n                var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n                var leftX = Math.max(overviewMetric.startX, this.currentTab.overviewModel.mousePositionXOffset - this.config.overview.selectedInstancesForFocusOffset);\n                var rightX = Math.min(overviewMetric.endX, this.currentTab.overviewModel.mousePositionXOffset + this.config.overview.selectedInstancesForFocusOffset);\n\n                if (this.focusInArea) {\n                    leftX = overviewMetric.startX + this.currentTab.focusAreaModel.startX;\n                    rightX = overviewMetric.startX + this.currentTab.focusAreaModel.endX;\n                }\n\n                instanceMetric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, leftX, rightX)) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.currentTab.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((instanceMetric, metricIndex) => {\n            for (var i = 0; i < this.config.colorCount; ++i) {\n                var layer = {};\n                layer.valueList = [];\n                instanceMetric.layerList.push(layer);\n            }\n\n            var overviewMetric = this.currentTab.overviewModel.metricList[metricIndex];\n\n            instanceMetric.data.forEach((point) => {\n                var value = point.value;\n                var colorList = this.panel.metricList[metricIndex].colorList;\n\n                instanceMetric.layerList.forEach((layer, layerIndex) => {\n                    overviewMetric.colorMap.forEach((color, threshold) => {\n                        if (color == colorList[layerIndex]) {\n                            layer.valueList.push(value > 0 ? value : 0);\n                            layer.range = threshold.max - threshold.min;\n                            value -= layer.range;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.currentTab.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.currentTab.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.currentTab.focusModel.focusedIndexList[0];\n                var toIndex = this.currentTab.focusModel.focusedIndexList[this.currentTab.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        var toDateWidth = this.overviewContext.measureText(this.focusedToDate).width;\n        this.toDateLeftMargin = this.focusGraphWidth - (fromDateWidth + toDateWidth) / 2;\n    }\n\n    drawFocusGraphData() {\n        if (this.currentTab.overviewModel.selectedMetricIndex > -1) {\n            if (this.isGrouped) {\n                this.$timeout(() => {\n                    if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                        this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                            this.currentTab.overviewModel.metricList.length;\n                    } else {\n                        this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                    }\n\n                    this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                    this.scope.$apply();\n\n                    this.$timeout(() => {\n                        this.drawGroupFocusMarkers();\n                        this.drawGroupedFocusGraph();\n                    });\n                });\n            } else {\n                this.drawUngroupedFocusGraph();\n            }\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.currentTab.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        var metricList = instance.metricList;\n        var metricIndexList = Array.from(Array(instance.metricList.length).keys())\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && !group.showAllMetrics) {\n            metricList = [instance.metricList[group.mainMetricIndex]];\n            metricIndexList = [group.mainMetricIndex];\n        }\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var pointWidth = Math.max(1, Math.floor(this.config.focusGraph.maxWidth / group.overviewGroup.timeRangeIndexList.length));\n            this.drawGroupedFocusGraphInstance(canvas, group.overviewGroup.timeRangeIndexList, pointWidth, metricList, metricIndexList);\n        } else {\n            var valueList = Array.from(Array(maxMetricLength).keys());\n            this.drawGroupedFocusGraphInstance(canvas, valueList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, valueIndexList, pointWidth, metricList, metricIndexList) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList);\n    }\n\n    drawFocusGraphInstance(context, valueIndexList, pointWidth, metricList, metricIndexList) {\n        metricList.forEach((metric, metricListIndex) => {\n\n            metric.layerList.forEach((layer, layerIndex) => {\n                var panelMetric = this.panel.metricList[metricIndexList[metricListIndex]];\n                context.fillStyle = panelMetric.colorList[layerIndex];\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricListIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n\n                // start drawing from bottom\n                context.moveTo(0, y);\n                var x = 0;\n                var totalValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != null) {\n                        x = pointWidth * positionIndex;\n                        this.moveFocusGraphContextBasedOnValue(context, value, layer, layerIndex, x, y);\n                        totalValue += value;\n                    }\n                });\n\n                // draw straight line to base at the end\n                context.lineTo(x, y);\n\n                // move back to the starting point\n                context.lineTo(0, y);\n                context.closePath();\n\n                if (totalValue > 0 || layerIndex == 0) {\n                    context.fill();\n                }\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.currentTab.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var valueIndexList = Array.from(Array(this.getMaxMetricLength()).keys());\n            var metricList = [instance.metricList[this.currentTab.overviewModel.selectedMetricIndex]];\n            var metricIndexList = [this.currentTab.overviewModel.selectedMetricIndex];\n\n            if (instance.showAllMetrics) {\n                metricList = instance.metricList;\n                metricIndexList = Array.from(Array(instance.metricList.length).keys());\n            }\n\n            this.drawFocusGraphInstance(context, valueIndexList, this.currentTab.focusModel.pointWidth, metricList, metricIndexList);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveFocusGraphContextBasedOnValue(context, value, layer, layerIndex, x, y) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            var baseY = layerIndex == 0 ? y - this.config.focusGraph.metricMinHeight : y;\n            context.lineTo(x, baseY);\n        } else {\n            var height;\n\n            if (value >= layer.range) {\n                height = this.config.focusGraph.metricMaxHeight;\n            } else {\n                height = value * this.config.focusGraph.metricMaxHeight / layer.range;\n            }\n\n            height = Math.max(this.config.focusGraph.metricMinHeight, height);\n            context.lineTo(x, y - height);\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.currentTab.overviewModel.hoveredGroup && this.currentTab.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.currentTab.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.currentTab.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.currentTab.focusModel.data.length; ++i) {\n                var focusModelInstance = this.currentTab.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.currentTab.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.currentTab.overviewModel.data.length; ++i) {\n            var instance = this.currentTab.overviewModel.data[i];\n\n            if (this.isBetween(this.currentTab.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    leaveMouseFromOverview() {\n        this.currentTab.overviewModel.isSelectingTimeRange = false;\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.currentTab.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.currentTab.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.currentTab.focusModel.overviewGroupWithIntervalList) {\n                this.currentTab.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    showHideAllMetrics() {\n        this.drawFocusGraph(false);\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.currentTab.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.currentTab.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.currentTab.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    showHideOverlapDetails() {\n        this.showOverlapDetails = !this.showOverlapDetails;\n        this.drawOverlapDetails();\n    }\n\n    selectNode(index, evt) {\n        var instance = this.currentTab.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}