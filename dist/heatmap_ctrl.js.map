{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","initialiseStartingVariables","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","focusAreaSize","xCrossSize","timeIndicator","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","panelDefaults","predefinedMetricList","name","query","defaults","panel","predefinedMetricOptionList","forEach","metric","push","metricList","colorList","luminanceChange","i","changeColorLuminance","firstLoad","overviewModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","scope","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initiliseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","threshold","average","set","populateOverviewData","calculateInstanceMetricTotalMinMax","sortOverviewData","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","total","getThresholdAverage","map","isBetween","target","start","end","sort","first","second","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","initialiseMetricSingleAttributeGroups","initialiseSingleAttributeGroupsColor","initialiseSingleAttributeInstanceGroupList","thresholdGroupListMap","populateSingleAttributeGroupList","thresholdValue","group","initialiseNewSingleAttributeGroups","instanceList","markerX","originalColor","groupIndex","populateMultiAttributeGroupList","initialiseMultiAttributeGroupsColor","findExistingMultiAttributeGroup","initialiseNewMultiAttributeGroup","instanceMetric","groupMetric","greyValue","overviewMetric","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","convertDateToString","toDateWidth","isGrouped","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","getCurrentSingleAttributeGroupList","largestGroup","get","getCurrentMultiAttributeGroupList","groupCount","getMaxGroupCount","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","overviewInstanceHeight","drawSingeAttributeGroupedOverview","drawMultiAttributeGroupedOverview","drawGroupSize","drawGroupOverviewWrapper","drawMetricSeparator","metricIndexList","drawOverviewInstance","y","instanceIndex","pointHeight","marginBetweenInstances","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","drawGroupSizeLabel","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","floor","drawGroupBarAtPosition","format","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","showFocus","showMergeSelectedGroups","deselectSingleAttributeGroups","deselectMultiAttributeGroups","originalGroupList","previousGroupThreshold","isSelected","timeRangeIndexList","mergeSingleAttributeGroups","mergeMultipleAttributeGroups","mergeFocusGroupList","drawSelectedGroupsMarkers","drawFocusGraph","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","mergeFocusGroupListWrapper","addGroupToFocus","focusGroup","overviewGroup","overviewInstance","metricWithMostData","focusedIndexList","focusInstance","getFocusInstance","evt","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","setOverviewMousePosition","hoveredMarker","checkAndSetSelectedOverviewMarker","checkMouseIsOnGroupAndSetHoveredGroup","setSelectedTimeIndex","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","focusAreaIsFixed","drawFocus","mousePosition","getMousePos","rect","getBoundingClientRect","clientX","left","clientY","top","selectedMetricIndex","checkAndSetHoveredGroup","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","markerIndex","marker","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","temp","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","fixFocusArea","updatedSelectedGroups","addOrRemoveGroupToFocus","stopInterval","removeExisting","remove","setShowMergeGroupsButton","setShowMergeGroupsButtonWrapper","selectedGroupCount","indexList","initialiseFocusInstanceData","drawOverviewGroupMarker","focusGroupWithInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","marginBetweenMarkers","drawFocusArea","checkMouseIsInMetric","size","getFocusAreaSize","minimumTopY","focusStartY","offset","getFocusAreaOffset","focusStartX","strokeRect","sourceMetricIndex","initialiseFocusGraphData","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","positionIndex","undefined","moveContextBasedOnValue","graphBeginX","getUngroupedFocusCanvas","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n        this.initialiseStartingVariables();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 8,\n            ungroupedPointWidth: 35,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    query: \"node_load1{job='node'}\"\n                },\n\n                {\n                    name: \"Memory\",\n                    query: \"100 - (node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    query: \"sum by (instance) (node_network_receive_bytes_total{job='node',device!~'^(?:docker|vboxnet|veth|lo).*'})\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    query: \"sum by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        _.defaults(this.panel, this.panelDefaults);\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        this.panel.metricList.forEach((metric) => {\n            metric.colorList = [];\n            metric.colorList.push(metric.color);\n            var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n            for (var i = 0; i < this.config.colorCount - 1; ++i) {\n                var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n                metric.colorList.push(color);\n            }\n        });\n    }\n\n    initialiseStartingVariables() {\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initiliseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = parseFloat(value[1]);\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.panel.metricList[index].colorList;\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initiliseOverviewData() {\n        this.overviewModel.data = [];\n        this.populateOverviewData();\n        this.calculateInstanceMetricTotalMinMax();\n        this.sortOverviewData();\n    }\n\n    populateOverviewData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n                });\n            });\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseMetricSingleAttributeGroups(metric, metricIndex);\n            this.initialiseSingleAttributeGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleAttributeInstanceGroupList();\n    }\n\n    initialiseMetricSingleAttributeGroups(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                var min = search.total * (1 - thresholdValue);\n                var max = search.total * (1 + thresholdValue);\n                return this.isBetween(instance.metricList[metricIndex].total, min, max);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleAttributeGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleAttributeInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                for (var i = 0; i < metric.thresholdGroupListMap.length; ++i) {\n                    var group = metric.thresholdGroupListMap[i];\n\n                    if (instance.metricList[metricIndex].total == group.total) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiAttributeGroupList(groupList, groupingThreshold);\n            this.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiAttributeGroupsColor();\n    }\n\n    populateMultiAttributeGroupList(groupList, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiAttributeGroup(groupList, thresholdValue, instance);\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiAttributeGroup(groupList, thresholdValue, instance) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n                var min = metric.total * (1 - thresholdValue);\n                var max = metric.total * (1 + thresholdValue);\n\n                if (!this.isBetween(instance.metricList[i].total, min, max)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiAttributeGroupsColor() {\n        this.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocusArea();\n            this.drawOverview();\n        }\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n            this.scope.$apply();\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n        this.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleAttributeGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiAttributeGroupSize() * this.config.overview.multipleAttributeGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getCurrentSingleAttributeGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiAttributeGroupList() {\n        return this.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                    metric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeAttributeGroupedOverview();\n        } else {\n            this.drawMultiAttributeGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeAttributeGroupedOverview() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            this.drawMetricSeparator(metric);\n        });\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight, this.config.overview.marginBetweenGroups, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, instanceIndex, pointHeight, marginBetweenInstances, metricIndexList) {\n        instance.y = this.overviewModel.overviewStartY + instanceIndex * (pointHeight + marginBetweenInstances);\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex,\n                        this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiAttributeGroupedOverview() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - labelWidth) / 2);\n        });\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.overviewModel.labelTextHeight);\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY +\n            groupIndex * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize + labelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - labelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        if (!this.isCompressed) {\n            // this.drawGroupBars();\n        }\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.decompressedMarginBetweenMetrics / 2 -\n                Math.floor(this.config.overview.groupBarWidth / 2);\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.thresholdGroupListMap.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x, y, this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n            var label = this.panel.metricList[i].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.panel.metricList[i].color;\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.clearFocusArea();\n        this.clearTimeIndicator();\n        this.deselectAllGroups();\n        this.showFocus = false;\n        this.showMergeSelectedGroups = false;\n    }\n\n    deselectAllGroups() {\n        this.focusModel.groupList = [];\n        this.deselectSingleAttributeGroups();\n        this.deselectMultiAttributeGroups();\n    }\n\n    deselectSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                });\n            }\n        });\n    }\n\n    deselectMultiAttributeGroups() {\n        if (this.overviewModel.originalGroupList) {\n            this.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.overviewModel.originalGroupList);\n            this.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.changeGroupingSelection();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    mergeSelectedGroups() {\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleAttributeGroups();\n        } else {\n            this.mergeMultipleAttributeGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.showMergeSelectedGroups = false;\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph();\n    }\n\n    mergeSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = JSON.parse(JSON.stringify(group));\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    mergeFocusGroupList() {\n        this.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiAttributeGroupList());\n        }\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    mergeMultipleAttributeGroups() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        if (!this.overviewModel.originalGroupList) {\n            this.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.thresholdGroupListMap) {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isGrouped && this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.overviewModel.isSelectingTimeRange = true;\n            this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset;\n            this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n        }\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n\n            if (this.isGrouped) {\n                this.initialiseOverviewCanvasCursor();\n                this.overviewModel.hoveredGroup = null;\n                this.overviewModel.hoveredMarker = null;\n                this.checkAndSetSelectedOverviewMarker();\n                this.checkMouseIsOnGroupAndSetHoveredGroup();\n\n                if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                    if (this.overviewModel.hoveredGroup) {\n                        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                            this.setSelectedTimeIndex();\n                        }\n\n                        this.drawTimeIndicators();\n                    } else {\n                        this.clearTimeIndicator();\n                    }\n                } else if (this.overviewModel.isSelectingTimeRange) {\n                    this.initialiseSelectedGroupTimeRangeIndexList();\n                    this.drawSelectedTimeRanges();\n                }\n            } else if (!this.isCompressed && !this.focusAreaIsFixed) {\n                this.drawFocus(evt);\n            }\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    checkMouseIsOnGroupAndSetHoveredGroup() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n\n                    if (this.checkAndSetHoveredGroup(metric)) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup(metric) {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            groupList = this.getCurrentSingleAttributeGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiAttributeGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.overviewCursor = \"pointer\";\n            return true;\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.overviewCursor = \"pointer\";\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiAttributeGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleAttributeGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.timeRangeMetricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiAttributeGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n    }\n\n    mouseUpOnOverView(evt) {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph();\n            }\n        } else if (!this.isCompressed) {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph();\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        })\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiAttributeGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph();\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            this.clearFocusArea();\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            var size = this.getFocusAreaSize();\n            var offset = this.getFocusAreaOffset();\n\n            if (offset >= 0) {\n                this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n                this.overviewModel.metricList.forEach((metric) => {\n                    metric.focusStartX = metric.startX + offset;\n                    this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n                });\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    this.focusModel.sourceMetricIndex = i;\n\n                    return Math.min(Math.max(metric.startX,\n                        this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                        metric.endX - this.getFocusAreaSize()) - metric.startX;\n                }\n            }\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.panel.metricList[metricIndex].colorList.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.drawGroupedFocusGraphInstance(canvas, instance, Array.from(Array(maxMetricLength).keys()), this.getFocusGraphPointWidth());\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            var pointWidth = Math.floor(this.focusGraphWidth / group.overviewGroup.timeRangeIndexList.length);\n            this.drawGroupedFocusGraphInstance(canvas, instance, group.overviewGroup.timeRangeIndexList, pointWidth);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, instance, valueIndexList, pointWidth) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context, valueIndexList, pointWidth);\n    }\n\n    drawFocusGraphInstance(instance, context, valueIndexList, pointWidth) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != undefined) {\n                        x = pointWidth * positionIndex;\n                        this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                            this.overviewModel.metricList[metricIndex].layerRange);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context, Array.from(Array(this.getMaxMetricLength()).keys()), this.config.focusGraph.ungroupedPointWidth);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    selectNode(index, evt) {\n        var instance = this.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}