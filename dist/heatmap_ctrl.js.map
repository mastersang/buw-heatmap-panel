{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","initialiseStartingVariables","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","focusAreaSize","xCrossSize","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLength","barWidth","minimumBarHeight","marginBetweenSliderAndChart","thresholdBarLength","maxOffsetToSelectBar","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","colorList","luminanceChange","i","changeColorLuminance","firstLoad","overviewModel","histogramModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","scope","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","isGrouped","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","point","checkAndSetOverviewMinMax","layerRange","colorMap","getColorMap","Map","threshold","average","set","sortOverviewData","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sort","first","second","total","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","setHistogramMinMax","getThresholdAverage","map","isBetween","target","start","end","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","initialiseMetricSingleAttributeGroups","initialiseSingleAttributeGroupsColor","initialiseSingleAttributeInstanceGroupList","thresholdGroupListMap","populateSingleAttributeGroupList","thresholdValue","group","initialiseNewSingleAttributeGroups","instanceList","markerX","originalColor","groupIndex","populateMultiAttributeGroupList","initialiseMultiAttributeGroupsColor","findExistingMultiAttributeGroup","initialiseNewMultiAttributeGroup","instanceMetric","groupMetric","greyValue","overviewMetric","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","convertDateToString","toDateWidth","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","getCurrentSingleAttributeGroupList","largestGroup","getCurrentMultiAttributeGroupList","groupCount","getMaxGroupCount","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","overviewInstanceHeight","drawSingeAttributeGroupedOverview","drawMultiAttributeGroupedOverview","drawGroupSize","drawGroupOverviewWrapper","drawMetricSeparator","metricIndexList","drawOverviewInstance","y","instanceIndex","pointHeight","marginBetweenInstances","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","drawGroupSizeLabel","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","floor","drawGroupBarAtPosition","getMetricDarkestColor","format","showHistogram","changedColorThreshold","temp","addOrRemoveGroupToFocus","overviewGroup","drawFocusGraph","removeExisting","focusGroup","isSelected","remove","addGroupToFocus","setShowMergeGroupsButton","showMergeSelectedGroups","setShowMergeGroupsButtonWrapper","selectedGroupCount","drawOverviewGroupMarker","marker","initialiseFocusGraphData","showFocus","focusedIndexList","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","evt","mousePosition","getMousePos","isSelectingBar","setNewThresholdValue","checkAndSetSelectedHistogramThresholdBar","offsetValue","horizontalAxisStartX","selectedBar","drawHistogram","histogramCursor","topY","sliderY","bottomY","thresholdBarList","bar","leftX","rightX","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","deselectSingleAttributeGroups","deselectMultiAttributeGroups","originalGroupList","previousGroupThreshold","timeRangeIndexList","mergeSingleAttributeGroups","mergeMultipleAttributeGroups","mergeFocusGroupList","drawSelectedGroupsMarkers","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","mergeFocusGroupListWrapper","overviewInstance","metricWithMostData","focusInstance","getFocusInstance","isSelectingMetricLabel","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","selectedMetricIndex","drawHistogramAxes","drawHistogramMaxValueAndOccurence","drawHistogramBars","drawHistogramThresholdSlider","verticalAxisStartY","lineWdith","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","maxOccurenceWidth","verticalLabelWidth","horizontalAxisY","horizontalAxisEndX","labelX","labelY","panelMetric","occurenceLabelY","maxValueWidth","valueLabelY","originX","occurenceStep","minHeight","drawHistogramSliderLine","drawHistogramThresholdBars","thresholdBarY","size","setOverviewMousePosition","setSelectedMetricIndex","setOverviewCursorToPointer","deselectMetricLabel","handleMouseMoveOnGroupedOverview","focusAreaIsFixed","drawFocus","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","setSelectedTimeIndex","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","markerIndex","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","fixFocusArea","focusGroupWithInterval","stopInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","marginBetweenMarkers","updatedSelectedGroups","drawFocusArea","getFocusAreaSize","minimumTopY","focusStartY","offset","getFocusAreaOffset","focusStartX","strokeRect","sourceMetricIndex","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","indexList","initialiseFocusInstanceData","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","layerIndex","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","previousX","previousValue","valueIndex","positionIndex","moveFocusGraphContextBasedOnValue","graphBeginX","getUngroupedFocusCanvas","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,gB,kBAAAA,gB;;AAEFC,MAAAA,M;;AACAC,MAAAA,C;;;6BAEMC,W;;;;;AACT,6BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,WAApD,EAAiEC,OAAjE,EAA0E;AAAA;;AAAA;;AACtE,2FAAML,MAAN,EAAcC,SAAd;AACA,gBAAKC,QAAL,GAAgBA,QAAhB;AACA,gBAAKC,SAAL,GAAiBA,SAAjB;AACA,gBAAKC,WAAL,GAAmBA,WAAnB;AACA,gBAAKC,OAAL,GAAeA,OAAf;;AAEA,gBAAKC,gBAAL;;AACA,gBAAKC,uBAAL;;AACA,gBAAKC,oCAAL;;AACA,gBAAKC,0BAAL;;AACA,gBAAKC,2BAAL;;AAEA,gBAAKC,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,+BAAjC;;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKG,cAAL,CAAoBD,IAApB,+BAAhC;;AAdsE;AAezE;;;;6CAEkB;AACf,iBAAKE,uBAAL;AACA,iBAAKC,wBAAL;AACA,iBAAKC,yBAAL;AACA,iBAAKC,yBAAL;AACA,iBAAKC,6BAAL;AACA,iBAAKD,yBAAL;AACA,iBAAKE,0BAAL;AACH;;;oDAEyB;AACtB,iBAAKC,MAAL,GAAc;AACVC,cAAAA,UAAU,EAAE,yEADF;AAEVC,cAAAA,UAAU,EAAE,mBAFF;AAGVC,cAAAA,UAAU,EAAE,CAHF;AAIVC,cAAAA,kBAAkB,EAAE,GAJV;AAKVC,cAAAA,6BAA6B,EAAE,EALrB;AAMVC,cAAAA,sBAAsB,EAAE,EANd;AAOVC,cAAAA,iBAAiB,EAAE,GAPT;AAQVC,cAAAA,eAAe,EAAE,EARP;AASVC,cAAAA,aAAa,EAAE;AATL,aAAd;AAWH;;;qDAE0B;AACvB,iBAAKT,MAAL,CAAYU,QAAZ,GAAuB;AACnBC,cAAAA,mBAAmB,EAAE,EADF;AAEnBC,cAAAA,cAAc,EAAE,EAFG;AAGnBC,cAAAA,YAAY,EAAE,EAHK;AAInBC,cAAAA,8BAA8B,EAAE,EAJb;AAKnBC,cAAAA,UAAU,EAAE,CALO;AAMnBC,cAAAA,oBAAoB,EAAE,CANH;AAOnBC,cAAAA,kBAAkB,EAAE,CAPD;AAQnBC,cAAAA,8BAA8B,EAAE,GARb;AASnBC,cAAAA,gCAAgC,EAAE,EATf;AAUnBC,cAAAA,mBAAmB,EAAE,EAVF;AAWnBC,cAAAA,aAAa,EAAE,CAXI;AAYnBC,cAAAA,6BAA6B,EAAE,CAZZ;AAanBC,cAAAA,+BAA+B,EAAE,CAbd;AAcnBC,cAAAA,2BAA2B,EAAE,EAdV;AAenBC,cAAAA,+BAA+B,EAAE;AAfd,aAAvB;AAiBH;;;sDAE2B;AACxB,iBAAKzB,MAAL,CAAY0B,SAAZ,GAAwB;AACpBC,cAAAA,KAAK,EAAE,MADa;AAEpBC,cAAAA,aAAa,EAAE,EAFK;AAGpBC,cAAAA,UAAU,EAAE;AAHQ,aAAxB;AAKH;;;0DAE+B;AAC5B,iBAAK7B,MAAL,CAAY8B,aAAZ,GAA4B;AACxBH,cAAAA,KAAK,EAAE;AADiB,aAA5B;AAGH;;;sDAE2B;AACxB,iBAAK3B,MAAL,CAAY+B,SAAZ,GAAwB;AACpBC,cAAAA,2BAA2B,EAAE,EADT;AAEpBC,cAAAA,kBAAkB,EAAE,GAFA;AAGpBC,cAAAA,QAAQ,EAAE,CAHU;AAIpBC,cAAAA,gBAAgB,EAAE,CAJE;AAKpBC,cAAAA,2BAA2B,EAAE,EALT;AAMpBC,cAAAA,kBAAkB,EAAE,EANA;AAOpBC,cAAAA,oBAAoB,EAAE;AAPF,aAAxB;AASH;;;uDAE4B;AAAA;;AACzB,iBAAKtC,MAAL,CAAYuC,UAAZ;AACIC,cAAAA,QAAQ,EAAE,KADd;AAEIC,cAAAA,SAAS,EAAE,KAFf;AAGIC,cAAAA,iBAAiB,EAAE,CAHvB;AAIIC,cAAAA,mBAAmB,EAAE,EAJzB;AAKIC,cAAAA,eAAe,EAAE,EALrB;AAMIC,cAAAA,oBAAoB,EAAE;AAN1B,mEAOe,KAPf,wDAQgB,EARhB,kEAS0B,EAT1B;AAWH;;;oDAEyB;AACtB,iBAAKC,aAAL,GAAqB;AACjBC,cAAAA,oBAAoB,EAAE,CAClB;AACIC,gBAAAA,IAAI,EAAE,KADV;AAEIC,gBAAAA,IAAI,EAAE,GAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eADkB,EAOlB;AACIF,gBAAAA,IAAI,EAAE,QADV;AAEIC,gBAAAA,IAAI,EAAE,GAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eAPkB,EAalB;AACIF,gBAAAA,IAAI,EAAE,MADV;AAEIC,gBAAAA,IAAI,EAAE,GAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eAbkB,EAmBlB;AACIF,gBAAAA,IAAI,EAAE,SADV;AAEIC,gBAAAA,IAAI,EAAE,KAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eAnBkB,EAyBlB;AACIF,gBAAAA,IAAI,EAAE,kBADV;AAEIC,gBAAAA,IAAI,EAAE,IAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eAzBkB;AADL,aAArB,CADsB,CAmCtB;AACA;;AACA1E,YAAAA,CAAC,CAAC2E,QAAF,CAAW,KAAKC,KAAhB,EAAuB,KAAKN,aAA5B;;AAEA,gBAAI,CAAC,KAAKM,KAAL,CAAWC,UAAhB,EAA4B;AACxB,mBAAKD,KAAL,CAAWC,UAAX,GAAwB,KAAKD,KAAL,CAAWL,oBAAnC;AACH;AACJ;;;iEAEsC;AAAA;;AACnC,iBAAKO,0BAAL,GAAkC,EAAlC;AAEA,iBAAKR,aAAL,CAAmBC,oBAAnB,CAAwCQ,OAAxC,CAAgD,UAACC,MAAD,EAAY;AACxD,cAAA,MAAI,CAACF,0BAAL,CAAgCG,IAAhC,CAAqCD,MAAM,CAACR,IAA5C;AACH,aAFD;AAGH;;;uDAE4B;AAAA;;AACzB,gBAAI,KAAKI,KAAL,CAAWC,UAAf,EAA2B;AACvB,mBAAKD,KAAL,CAAWC,UAAX,CAAsBE,OAAtB,CAA8B,UAACC,MAAD,EAAY;AACtC;AACAA,gBAAAA,MAAM,CAACE,SAAP,GAAmB,EAAnB;AACAF,gBAAAA,MAAM,CAACE,SAAP,CAAiBD,IAAjB,CAAsBD,MAAM,CAAC7B,KAA7B;AACA,oBAAIgC,eAAe,GAAG,CAAC,MAAI,CAAC3D,MAAL,CAAYI,kBAAb,GAAkC,MAAI,CAACJ,MAAL,CAAYG,UAApE,CAJsC,CAMtC;;AACA,qBAAK,IAAIyD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAI,CAAC5D,MAAL,CAAYG,UAAhC,EAA4C,EAAEyD,CAA9C,EAAiD;AAC7C,sBAAIjC,KAAK,GAAG,MAAI,CAACkC,oBAAL,CAA0BL,MAAM,CAAC7B,KAAjC,EAAwCiC,CAAC,GAAGD,eAA5C,CAAZ;;AACAH,kBAAAA,MAAM,CAACE,SAAP,CAAiBD,IAAjB,CAAsB9B,KAAtB;AACH;AACJ,eAXD;AAYH;AACJ;;;wDAE6B;AAC1B,iBAAKmC,SAAL,GAAiB,IAAjB;AACA,iBAAKC,aAAL,GAAqB,EAArB;AACA,iBAAKC,cAAL,GAAsB,EAAtB;AACA,iBAAKD,aAAL,CAAmBE,eAAnB,GAAqC,EAArC;AACA,iBAAKC,UAAL,GAAkB,EAAlB;AACA,iBAAKA,UAAL,CAAgBC,SAAhB,GAA4B,EAA5B;AACH;;;+CAEoBC,G,EAAKC,G,EAAK;AAC3BD,YAAAA,GAAG,GAAGE,MAAM,CAACF,GAAD,CAAN,CAAYG,OAAZ,CAAoB,aAApB,EAAmC,EAAnC,CAAN;;AAEA,gBAAIH,GAAG,CAACI,MAAJ,GAAa,CAAjB,EAAoB;AAChBJ,cAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ,GAAkBA,GAAG,CAAC,CAAD,CAArB,GAA2BA,GAAG,CAAC,CAAD,CAA9B,GAAoCA,GAAG,CAAC,CAAD,CAAvC,GAA6CA,GAAG,CAAC,CAAD,CAAtD;AACH;;AAEDC,YAAAA,GAAG,GAAGA,GAAG,IAAI,CAAb;AACA,gBAAII,GAAG,GAAG,GAAV;AAAA,gBAAeC,CAAf;AAAA,gBAAkBd,CAAlB;;AAEA,iBAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpBc,cAAAA,CAAC,GAAGC,QAAQ,CAACP,GAAG,CAACQ,MAAJ,CAAWhB,CAAC,GAAG,CAAf,EAAkB,CAAlB,CAAD,EAAuB,EAAvB,CAAZ;AACAc,cAAAA,CAAC,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYN,CAAC,GAAIA,CAAC,GAAGL,GAArB,CAAT,EAAqC,GAArC,CAAX,EAAsDY,QAAtD,CAA+D,EAA/D,CAAJ;AACAR,cAAAA,GAAG,IAAI,CAAC,OAAOC,CAAR,EAAWE,MAAX,CAAkBF,CAAC,CAACF,MAApB,CAAP;AACH;;AAED,mBAAOC,GAAP;AACH;;;iDAEsBS,K,EAAO;AAC1B,gBAAI1B,MAAM,GAAG,KAAKJ,KAAL,CAAWC,UAAX,CAAsB6B,KAAtB,CAAb;;AAEA,gBAAI,CAAC1B,MAAM,CAAC2B,QAAZ,EAAsB;AAClB,mBAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWL,oBAAX,CAAgCyB,MAApD,EAA4D,EAAEZ,CAA9D,EAAiE;AAC7D,oBAAIwB,gBAAgB,GAAG,KAAKhC,KAAL,CAAWL,oBAAX,CAAgCa,CAAhC,CAAvB;;AAEA,oBAAIJ,MAAM,CAACR,IAAP,IAAeoC,gBAAgB,CAACpC,IAApC,EAA0C;AACtC,uBAAKI,KAAL,CAAWC,UAAX,CAAsB6B,KAAtB,IAA+BG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,gBAAf,CAAX,CAA/B;AACA;AACH;AACJ;AACJ;AACJ;;;+BAEII,K,EAAOC,I,EAAM;AACd,iBAAKD,KAAL,GAAaA,KAAb;AACA,iBAAKC,IAAL,GAAYA,IAAZ;AAEA,iBAAKC,iBAAL;AACA,iBAAKC,oBAAL;AACH;;;8CAEmB;AAChB,iBAAKC,QAAL,GAAgB;AACZC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,MAAM,EAAE,GADE;AAEVC,gBAAAA,QAAQ,EAAE;AAFA,eADF;AAMZC,cAAAA,iBAAiB,EAAE;AACfC,gBAAAA,KAAK,EAAE,GADQ;AAEfC,gBAAAA,KAAK,EAAE;AAFQ;AANP,aAAhB;AAYA,iBAAKL,YAAL,GAAoB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAA/C;AACA,iBAAKK,iBAAL,GAAyB,CAAzB;AACA,iBAAKH,iBAAL,GAAyB,KAAKJ,QAAL,CAAcI,iBAAd,CAAgCC,KAAzD;AACA,iBAAKG,8BAAL;AACH;;;2DAEgC;AAC7B,iBAAKC,cAAL,GAAsB,KAAKC,SAAL,GAAiB,SAAjB,GAA6B,WAAnD;AACH;;;iDAEsB;AACnB;AACA,iBAAKC,cAAL,GAAsB,KAAKC,cAAL,CAAoB,gBAApB,CAAtB;AACA,iBAAKC,eAAL,GAAuB,KAAKC,gBAAL,CAAsB,KAAKH,cAA3B,CAAvB,CAHmB,CAKnB;;AACA,iBAAKI,eAAL,GAAuB,KAAKH,cAAL,CAAoB,iBAApB,CAAvB;AACA,iBAAKI,gBAAL,GAAwB,KAAKF,gBAAL,CAAsB,KAAKC,eAA3B,CAAxB,CAPmB,CASnB;;AACA,iBAAKE,eAAL,GAAuB,KAAKL,cAAL,CAAoB,iBAApB,CAAvB;AACA,iBAAKM,sBAAL,GAA8B,KAAKJ,gBAAL,CAAsB,KAAKG,eAA3B,CAA9B,CAXmB,CAanB;;AACA,iBAAKE,2BAAL,GAAmC,KAAKP,cAAL,CAAoB,6BAApB,CAAnC;AACA,iBAAKQ,4BAAL,GAAoC,KAAKN,gBAAL,CAAsB,KAAKK,2BAA3B,CAApC,CAfmB,CAiBnB;;AACA,iBAAKE,eAAL,GAAuB,KAAKjH,MAAL,CAAYuC,UAAZ,CAAuBC,QAA9C;AACA,iBAAK0E,gBAAL,GAAwB,KAAKlH,MAAL,CAAYuC,UAAZ,CAAuBE,SAA/C;AACA,iBAAK0E,mBAAL,GAA2B,KAAKX,cAAL,CAAoB,qBAApB,CAA3B;AACH;;;yCAEcY,E,EAAI;AACf,gBAAIC,IAAI,GAAG,KAAK5B,IAAL,CAAU4B,IAAV,CAAe,MAAMD,EAArB,CAAX;AACA,mBAAOC,IAAI,CAAC,CAAD,CAAX;AACH;;;2CAEgBC,M,EAAQ;AACrB,mBAAOA,MAAM,CAACC,UAAP,CAAkB,IAAlB,CAAP;AACH;;;2CAEgB;AACb,iBAAKC,YAAL,CAAkB,SAAlB,EAA6B,8CAA7B,EAA6E,CAA7E;AACH;;;yCAEcC,I,EAAM;AACjB,iBAAKC,IAAL;AACH;;;iCAEM;AAAA;;AACH,iBAAK9I,QAAL,CAAc,YAAM;AAChB,cAAA,MAAI,CAAC+I,SAAL,GAAiB,IAAjB;;AAEA,cAAA,MAAI,CAACnC,KAAL,CAAWoC,MAAX;;AAEA,cAAA,MAAI,CAAC7D,aAAL,CAAmBV,UAAnB,GAAgC,EAAhC;;AAEA,cAAA,MAAI,CAACD,KAAL,CAAWC,UAAX,CAAsBE,OAAtB,CAA8B,YAAM;AAChC,gBAAA,MAAI,CAACQ,aAAL,CAAmBV,UAAnB,CAA8BI,IAA9B,CAAmC,IAAnC;AACH,eAFD;;AAIA,cAAA,MAAI,CAACoE,SAAL,GAAiB,CAAjB;AACA,cAAA,MAAI,CAACC,QAAL,GAAgB,MAAI,CAACC,gBAAL,CAAsB,MAAI,CAAChJ,OAAL,CAAaiJ,SAAb,GAAyBC,IAAzB,CAA8BC,EAApD,CAAhB;AACA,cAAA,MAAI,CAACC,MAAL,GAAc,MAAI,CAACJ,gBAAL,CAAsB,MAAI,CAAChJ,OAAL,CAAaiJ,SAAb,GAAyBI,EAAzB,CAA4BF,EAAlD,CAAd;;AAEA,cAAA,MAAI,CAAC9E,KAAL,CAAWC,UAAX,CAAsBE,OAAtB,CAA8B,UAACC,MAAD,EAAS0B,KAAT,EAAmB;AAC7C,gBAAA,MAAI,CAACmD,cAAL,CAAoB7E,MAAM,CAACN,KAA3B,EAAkCgC,KAAlC;AACH,eAFD;;AAIA,cAAA,MAAI,CAACoD,cAAL;AACH,aApBD;AAqBH;;;2CAEgBC,I,EAAM;AACnB,mBAAO1D,IAAI,CAACC,KAAL,CAAWyD,IAAI,CAACC,OAAL,KAAiB,IAA5B,CAAP;AACH;;;yCAEctF,K,EAAOgC,K,EAAO;AAAA;;AACzB,gBAAIuD,OAAO,GAAG,IAAIC,cAAJ,EAAd;;AAEAD,YAAAA,OAAO,CAACE,kBAAR,GAA6B,YAAM;AAC/B;AACA,kBAAIF,OAAO,CAACG,UAAR,IAAsB,CAA1B,EAA6B;AACzB,kBAAE,MAAI,CAACf,SAAP;;AAEA,oBAAIY,OAAO,CAACI,MAAR,IAAkB,GAAtB,EAA2B;AACvB,sBAAIrF,MAAM,GAAG,EAAb;AACAA,kBAAAA,MAAM,CAACiE,IAAP,GAAcpC,IAAI,CAACC,KAAL,CAAWmD,OAAO,CAACK,YAAnB,EAAiCrB,IAAjC,CAAsCsB,MAApD;AACA,kBAAA,MAAI,CAAChF,aAAL,CAAmBV,UAAnB,CAA8B6B,KAA9B,IAAuC1B,MAAvC;AACH;AACJ;AACJ,aAXD;;AAaA,gBAAIwF,GAAG,GAAG,KAAKhJ,MAAL,CAAYC,UAAZ,GAAyBgJ,kBAAkB,CAAC/F,KAAD,CAA3C,GAAqD,SAArD,GAAiE,KAAK4E,QAAtE,GAAiF,OAAjF,GAA2F,KAAKK,MAAhG,GAAyG,UAAnH;AACAM,YAAAA,OAAO,CAACS,IAAR,CAAa,KAAb,EAAoBF,GAApB,EAAyB,IAAzB;AACAP,YAAAA,OAAO,CAACU,IAAR,CAAa,IAAb;AACH;;;2CAEgB;AAAA;;AACb,iBAAKvK,QAAL,CAAc,YAAM;AAChB,kBAAI,MAAI,CAACiJ,SAAL,GAAiB,MAAI,CAAC9D,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAnD,EAA2D;AACvD,gBAAA,MAAI,CAAC8D,cAAL,CAAoB9I,IAApB,CAAyB,MAAzB;AACH,eAFD,MAEO;AACH,gBAAA,MAAI,CAACmI,SAAL,GAAiB,KAAjB;;AAEA,oBAAI,CAAC,MAAI,CAAC5D,aAAL,CAAmBV,UAAnB,CAA8B+F,QAA9B,CAAuC,IAAvC,CAAL,EAAmD;AAC/C,kBAAA,MAAI,CAACC,kBAAL;;AACA,kBAAA,MAAI,CAACC,2BAAL;;AACA,kBAAA,MAAI,CAACC,kBAAL;;AACA,kBAAA,MAAI,CAACC,sBAAL;;AACA,kBAAA,MAAI,CAACC,wBAAL;;AACA,kBAAA,MAAI,CAACC,+BAAL;;AACA,kBAAA,MAAI,CAACC,cAAL;AACH;AACJ;AACJ,aAhBD,EAgBG,GAhBH;AAiBH;;;+CAEoB;AACjB,iBAAK5F,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9CA,cAAAA,MAAM,CAACiE,IAAP,CAAYlE,OAAZ,CAAoB,UAACqG,QAAD,EAAc;AAC9BA,gBAAAA,QAAQ,CAACC,MAAT,CAAgBtG,OAAhB,CAAwB,UAACuG,KAAD,EAAW;AAC/BA,kBAAAA,KAAK,CAAC,CAAD,CAAL,GAAWC,UAAU,CAACD,KAAK,CAAC,CAAD,CAAN,CAArB;AACAA,kBAAAA,KAAK,CAAC,CAAD,CAAL,GAAWjF,IAAI,CAACC,KAAL,CAAWiF,UAAU,CAACD,KAAK,CAAC,CAAD,CAAN,CAArB,CAAX;AACH,iBAHD;AAIH,eALD;AAMH,aAPD;AAQH;;;wDAE6B;AAAA;;AAC1B,iBAAK/F,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9CA,cAAAA,MAAM,CAACuB,GAAP,GAAa,CAAC,CAAd;AACAvB,cAAAA,MAAM,CAACwB,GAAP,GAAa,CAAC,CAAd;AAEAxB,cAAAA,MAAM,CAACiE,IAAP,CAAYlE,OAAZ,CAAoB,UAACqG,QAAD,EAAc;AAC9BA,gBAAAA,QAAQ,CAACC,MAAT,CAAgBtG,OAAhB,CAAwB,UAACyG,KAAD,EAAW;AAC/B,kBAAA,MAAI,CAACC,yBAAL,CAA+BzG,MAA/B,EAAuCwG,KAAvC;AACH,iBAFD;AAGH,eAJD;AAKH,aATD;AAUH;;;oDAEyBxG,M,EAAQwG,K,EAAO;AACrC,gBAAIF,KAAK,GAAGE,KAAK,CAAC,CAAD,CAAjB;;AAEA,gBAAIxG,MAAM,CAACuB,GAAP,IAAc,CAAC,CAAnB,EAAsB;AAClBvB,cAAAA,MAAM,CAACuB,GAAP,GAAa+E,KAAb;AACAtG,cAAAA,MAAM,CAACwB,GAAP,GAAa8E,KAAb;AACH,aAHD,MAGO;AACH,kBAAIA,KAAK,GAAGtG,MAAM,CAACuB,GAAnB,EAAwB;AACpBvB,gBAAAA,MAAM,CAACuB,GAAP,GAAa+E,KAAb;AACH;;AAED,kBAAIA,KAAK,GAAGtG,MAAM,CAACwB,GAAnB,EAAwB;AACpBxB,gBAAAA,MAAM,CAACwB,GAAP,GAAa8E,KAAb;AACH;AACJ;AACJ;;;+CAEoB;AAAA;;AACjB,iBAAK/F,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAS0B,KAAT,EAAmB;AACrD,kBAAIxB,SAAS,GAAG,MAAI,CAACN,KAAL,CAAWC,UAAX,CAAsB6B,KAAtB,EAA6BxB,SAA7C;AACAF,cAAAA,MAAM,CAAC0G,UAAP,GAAoBrF,IAAI,CAACC,KAAL,CAAWtB,MAAM,CAACwB,GAAP,GAAatB,SAAS,CAACc,MAAlC,CAApB,CAFqD,CAIrD;;AACAhB,cAAAA,MAAM,CAAC2G,QAAP,GAAkB,MAAI,CAACC,WAAL,CAAiB5G,MAAjB,EAAyBE,SAAzB,CAAlB;AACH,aAND;AAOH;;;sCAEWF,M,EAAQE,S,EAAW;AAC3B,gBAAIyG,QAAQ,GAAG,IAAIE,GAAJ,EAAf;;AAEA,iBAAK,IAAIzG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACc,MAA9B,EAAsC,EAAEZ,CAAxC,EAA2C;AACvC,kBAAI0G,SAAS,GAAG,EAAhB;AACAA,cAAAA,SAAS,CAACvF,GAAV,GAAgBnB,CAAC,GAAGJ,MAAM,CAAC0G,UAA3B;AACAI,cAAAA,SAAS,CAACtF,GAAV,GAAgBsF,SAAS,CAACvF,GAAV,GAAgBvB,MAAM,CAAC0G,UAAvC;AACAI,cAAAA,SAAS,CAACC,OAAV,GAAoB,CAACD,SAAS,CAACtF,GAAV,GAAgBsF,SAAS,CAACvF,GAA3B,IAAkC,CAAtD;AACAoF,cAAAA,QAAQ,CAACK,GAAT,CAAaF,SAAb,EAAwB5G,SAAS,CAACE,CAAD,CAAjC;AACH;;AAED,mBAAOuG,QAAP;AACH;;;mDAEwB;AACrB,iBAAKpG,aAAL,CAAmB0D,IAAnB,GAA0B,EAA1B;AACA,iBAAKgD,gBAAL;AACA,iBAAKC,8CAAL;AACA,iBAAKC,kCAAL;AACH;;;6CAEkB;AACf,iBAAK5G,aAAL,CAAmB0D,IAAnB,CAAwBmD,IAAxB,CAA6B,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC5C,mBAAK,IAAIlH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiH,KAAK,CAACxH,UAAN,CAAiBmB,MAArC,EAA6C,EAAEZ,CAA/C,EAAkD;AAC9C,oBAAIiH,KAAK,CAACxH,UAAN,CAAiBO,CAAjB,EAAoBmH,KAApB,IAA6BD,MAAM,CAACzH,UAAP,CAAkBO,CAAlB,EAAqBmH,KAAtD,EAA6D;AACzD,yBAAOF,KAAK,CAACxH,UAAN,CAAiBO,CAAjB,EAAoBmH,KAApB,GAA4BD,MAAM,CAACzH,UAAP,CAAkBO,CAAlB,EAAqBmH,KAAxD;AACH;AACJ;;AAED,qBAAO,CAAP;AACH,aARD;AASH;;;2EAEgD;AAAA;;AAC7C,iBAAKhH,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASwH,WAAT,EAAyB;AAC3DxH,cAAAA,MAAM,CAACzB,SAAP,GAAmB,EAAnB;AACAyB,cAAAA,MAAM,CAACzB,SAAP,CAAiB0F,IAAjB,GAAwB,IAAI4C,GAAJ,EAAxB;AAEA7G,cAAAA,MAAM,CAACiE,IAAP,CAAYlE,OAAZ,CAAoB,UAAC0H,cAAD,EAAoB;AACpC,oBAAIC,WAAW,GAAG1M,CAAC,CAAC6I,IAAF,CAAO,MAAI,CAACtD,aAAL,CAAmB0D,IAA1B,EAAgC,UAAC0D,MAAD,EAAY;AAC1D,yBAAOF,cAAc,CAACzH,MAAf,CAAsBoG,QAAtB,IAAkCuB,MAAM,CAACvB,QAAhD;AACH,iBAFiB,CAAlB;;AAIA,oBAAI,CAACsB,WAAL,EAAkB;AACdA,kBAAAA,WAAW,GAAG,MAAI,CAACE,oBAAL,CAA0BH,cAA1B,CAAd;AACH;;AAEDA,gBAAAA,cAAc,CAACpB,MAAf,CAAsBtG,OAAtB,CAA8B,UAACuG,KAAD,EAAW;AACrC,sBAAIE,KAAK,GAAG,EAAZ;AACAA,kBAAAA,KAAK,CAACzB,IAAN,GAAauB,KAAK,CAAC,CAAD,CAAlB;AACAE,kBAAAA,KAAK,CAACF,KAAN,GAAcA,KAAK,CAAC,CAAD,CAAnB;AACAoB,kBAAAA,WAAW,CAAC7H,UAAZ,CAAuB2H,WAAvB,EAAoCvD,IAApC,CAAyChE,IAAzC,CAA8CuG,KAA9C;;AAEA,sBAAIxG,MAAM,CAACzB,SAAP,CAAiB0F,IAAjB,CAAsB4D,GAAtB,CAA0BrB,KAAK,CAACF,KAAhC,CAAJ,EAA4C;AACxC,wBAAIwB,UAAU,GAAG9H,MAAM,CAACzB,SAAP,CAAiB0F,IAAjB,CAAsB8D,GAAtB,CAA0BvB,KAAK,CAACF,KAAhC,CAAjB;AACAtG,oBAAAA,MAAM,CAACzB,SAAP,CAAiB0F,IAAjB,CAAsB+C,GAAtB,CAA0BR,KAAK,CAACF,KAAhC,EAAuCwB,UAAU,GAAG,CAApD;AACH,mBAHD,MAGO;AACH9H,oBAAAA,MAAM,CAACzB,SAAP,CAAiB0F,IAAjB,CAAsB+C,GAAtB,CAA0BR,KAAK,CAACF,KAAhC,EAAuC,CAAvC;AACH;AACJ,iBAZD;AAaH,eAtBD;AAwBAtG,cAAAA,MAAM,CAACzB,SAAP,CAAiB0F,IAAjB,GAAwB,IAAI4C,GAAJ,CAAQ,mBAAI7G,MAAM,CAACzB,SAAP,CAAiB0F,IAArB,EAA2BmD,IAA3B,CAAgC,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC/E,uBAAOD,KAAK,CAAC,CAAD,CAAL,GAAWC,MAAM,CAAC,CAAD,CAAxB;AACH,eAF+B,CAAR,CAAxB;;AAIA,cAAA,MAAI,CAACU,kBAAL,CAAwBhI,MAAM,CAACzB,SAA/B;AACH,aAjCD;AAkCH;;;6CAEkBA,S,EAAW;AAC1BA,YAAAA,SAAS,CAACgD,GAAV,GAAgB,CAAC,CAAjB;AACAhD,YAAAA,SAAS,CAACiD,GAAV,GAAgB,CAAC,CAAjB;AAEAjD,YAAAA,SAAS,CAAC0F,IAAV,CAAelE,OAAf,CAAuB,UAAC+H,UAAD,EAAaxB,KAAb,EAAuB;AAC1C,kBAAI/H,SAAS,CAACgD,GAAV,IAAiB,CAAC,CAAtB,EAAyB;AACrBhD,gBAAAA,SAAS,CAACgD,GAAV,GAAgBuG,UAAhB;AACAvJ,gBAAAA,SAAS,CAACiD,GAAV,GAAgBsG,UAAhB;AACH,eAHD,MAGO;AACH,oBAAIvJ,SAAS,CAACgD,GAAV,GAAgBuG,UAApB,EAAgC;AAC5BvJ,kBAAAA,SAAS,CAACgD,GAAV,GAAgBuG,UAAhB;AACH;;AAED,oBAAIvJ,SAAS,CAACiD,GAAV,GAAgBsG,UAApB,EAAgC;AAC5BvJ,kBAAAA,SAAS,CAACiD,GAAV,GAAgBsG,UAAhB;AACH;AACJ;AACJ,aAbD;AAcH;;;+CAEoBL,c,EAAgB;AACjC,gBAAIC,WAAW,GAAG,EAAlB;AACAA,YAAAA,WAAW,CAACtB,QAAZ,GAAuBqB,cAAc,CAACzH,MAAf,CAAsBoG,QAA7C;AAEAsB,YAAAA,WAAW,CAAC7H,UAAZ,GAAyB,EAAzB;;AAEA,iBAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAIJ,MAAM,GAAG,EAAb;AACAA,cAAAA,MAAM,CAACiE,IAAP,GAAc,EAAd;AACAyD,cAAAA,WAAW,CAAC7H,UAAZ,CAAuBI,IAAvB,CAA4BD,MAA5B;AACH;;AAED,iBAAKO,aAAL,CAAmB0D,IAAnB,CAAwBhE,IAAxB,CAA6ByH,WAA7B;AACA,mBAAOA,WAAP;AACH;;;+DAEoC;AAAA;;AACjC,iBAAKnH,aAAL,CAAmB0D,IAAnB,CAAwBlE,OAAxB,CAAgC,UAACqG,QAAD,EAAc;AAC1CA,cAAAA,QAAQ,CAACvG,UAAT,CAAoBE,OAApB,CAA4B,UAACC,MAAD,EAASwH,WAAT,EAAyB;AACjDxH,gBAAAA,MAAM,CAACuH,KAAP,GAAe,CAAf;AACAvH,gBAAAA,MAAM,CAACuB,GAAP,GAAa,CAAC,CAAd;AACAvB,gBAAAA,MAAM,CAACwB,GAAP,GAAa,CAAC,CAAd;AAEAxB,gBAAAA,MAAM,CAACiE,IAAP,CAAYlE,OAAZ,CAAoB,UAACyG,KAAD,EAAW;AAC3B;AACAxG,kBAAAA,MAAM,CAACuH,KAAP,IAAgB,OAAI,CAACU,mBAAL,CAAyBzB,KAAK,CAACF,KAA/B,EAAsC,OAAI,CAAC/F,aAAL,CAAmBV,UAAnB,CAA8B2H,WAA9B,EAA2Cb,QAAjF,CAAhB;;AAEA,sBAAI3G,MAAM,CAACuB,GAAP,IAAc,CAAC,CAAf,IAAoBiF,KAAK,CAACF,KAAN,GAActG,MAAM,CAACuB,GAA7C,EAAkD;AAC9CvB,oBAAAA,MAAM,CAACuB,GAAP,GAAaiF,KAAK,CAACF,KAAnB;AACH;;AAED,sBAAItG,MAAM,CAACwB,GAAP,IAAc,CAAC,CAAf,IAAoBgF,KAAK,CAACF,KAAN,GAActG,MAAM,CAACwB,GAA7C,EAAkD;AAC9CxB,oBAAAA,MAAM,CAACwB,GAAP,GAAagF,KAAK,CAACF,KAAnB;AACH;AACJ,iBAXD;AAYH,eAjBD;AAkBH,aAnBD;AAoBH;;;8CAEmBA,K,EAAO4B,G,EAAK;AAAA;;AAC5B,gBAAI3C,MAAJ;AAEA2C,YAAAA,GAAG,CAACnI,OAAJ,CAAY,UAAC5B,KAAD,EAAQ2I,SAAR,EAAsB;AAC9B,kBAAI,OAAI,CAACqB,SAAL,CAAe7B,KAAf,EAAsBQ,SAAS,CAACvF,GAAhC,EAAqCuF,SAAS,CAACtF,GAA/C,CAAJ,EAAyD;AACrD+D,gBAAAA,MAAM,GAAGuB,SAAS,CAACC,OAAnB;AACH;AACJ,aAJD;AAMA,mBAAOxB,MAAP;AACH;;;oCAES6C,M,EAAQC,K,EAAOC,G,EAAK;AAC1B,mBAAOD,KAAK,IAAID,MAAT,IAAmBA,MAAM,IAAIE,GAApC;AACH;;;qDAE0B;AACvB,iBAAKC,+BAAL;AACA,iBAAKC,8BAAL;AACH;;;4DAEiC;AAAA;;AAC9B,iBAAKjI,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASwH,WAAT,EAAyB;AAC3D,cAAA,OAAI,CAACiB,qCAAL,CAA2CzI,MAA3C,EAAmDwH,WAAnD;;AACA,cAAA,OAAI,CAACkB,oCAAL,CAA0C1I,MAA1C,EAAkDwH,WAAlD;AACH,aAHD;AAKA,iBAAKmB,0CAAL;AACH;;;gEAEqC3I,M,EAAQwH,W,EAAa;AACvDxH,YAAAA,MAAM,CAAC4I,qBAAP,GAA+B,IAAI/B,GAAJ,EAA/B;;AAEA,iBAAK,IAAIlE,iBAAiB,GAAG,CAA7B,EAAgCA,iBAAiB,IAAI,KAAKnG,MAAL,CAAYM,sBAAjE,EAAyF,EAAE6F,iBAA3F,EAA8G;AAC1G,kBAAIhC,SAAS,GAAG,EAAhB;AACA,mBAAKkI,gCAAL,CAAsClI,SAAtC,EAAiD6G,WAAjD,EAA8D7E,iBAA9D;AAEAhC,cAAAA,SAAS,CAACyG,IAAV,CAAe,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC9B,uBAAOD,KAAK,CAACE,KAAN,GAAcD,MAAM,CAACC,KAA5B;AACH,eAFD;AAIAvH,cAAAA,MAAM,CAAC4I,qBAAP,CAA6B5B,GAA7B,CAAiCrE,iBAAjC,EAAoDhC,SAApD;AACH;AACJ;;;2DAEgCA,S,EAAW6G,W,EAAa7E,iB,EAAmB;AAAA;;AACxE,gBAAImG,cAAc,GAAGnG,iBAAiB,GAAG,IAAzC;AAEA,iBAAKpC,aAAL,CAAmB0D,IAAnB,CAAwBlE,OAAxB,CAAgC,UAACqG,QAAD,EAAc;AAC1C,kBAAI2C,KAAK,GAAG/N,CAAC,CAAC6I,IAAF,CAAOlD,SAAP,EAAkB,UAACgH,MAAD,EAAY;AACtC,oBAAIpG,GAAG,GAAGoG,MAAM,CAACJ,KAAP,IAAgB,IAAIuB,cAApB,CAAV;AACA,oBAAItH,GAAG,GAAGmG,MAAM,CAACJ,KAAP,IAAgB,IAAIuB,cAApB,CAAV;AACA,uBAAO,OAAI,CAACX,SAAL,CAAe/B,QAAQ,CAACvG,UAAT,CAAoB2H,WAApB,EAAiCD,KAAhD,EAAuDhG,GAAvD,EAA4DC,GAA5D,CAAP;AACH,eAJW,CAAZ;;AAMA,kBAAI,CAACuH,KAAL,EAAY;AACRA,gBAAAA,KAAK,GAAG,OAAI,CAACC,kCAAL,CAAwC5C,QAAxC,EAAkDoB,WAAlD,CAAR;AACA7G,gBAAAA,SAAS,CAACV,IAAV,CAAe8I,KAAf;AACH;;AAEDA,cAAAA,KAAK,CAACE,YAAN,CAAmBhJ,IAAnB,CAAwBmG,QAAxB;AACH,aAbD;AAcH;;;6DAEkCA,Q,EAAUoB,W,EAAa;AACtD,gBAAIuB,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAACE,YAAN,GAAqB,EAArB;AACAF,YAAAA,KAAK,CAACG,OAAN,GAAgB,CAAhB;AACAH,YAAAA,KAAK,CAACxB,KAAN,GAAcnB,QAAQ,CAACvG,UAAT,CAAoB2H,WAApB,EAAiCD,KAA/C;AACA,mBAAOwB,KAAP;AACH;;;+DAEoC/I,M,EAAQwH,W,EAAa;AAAA;;AACtD,gBAAI2B,aAAa,GAAG,KAAKvJ,KAAL,CAAWC,UAAX,CAAsB2H,WAAtB,EAAmCtH,SAAnC,CAA6C,CAA7C,CAApB;AAEAF,YAAAA,MAAM,CAAC4I,qBAAP,CAA6B7I,OAA7B,CAAqC,UAACY,SAAD,EAAe;AAChD,kBAAIR,eAAe,GAAG,CAAC,OAAI,CAAC3D,MAAL,CAAYI,kBAAb,GAAkC+D,SAAS,CAACK,MAAlE;AAEAL,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAQK,UAAR,EAAuB;AACrCL,gBAAAA,KAAK,CAAC5K,KAAN,GAAc,OAAI,CAACkC,oBAAL,CAA0B8I,aAA1B,EAAyCC,UAAU,GAAGjJ,eAAtD,CAAd;AACH,eAFD;AAGH,aAND;AAOH;;;uEAE4C;AAAA;;AACzC,iBAAKI,aAAL,CAAmB0D,IAAnB,CAAwBlE,OAAxB,CAAgC,UAACqG,QAAD,EAAc;AAC1CA,cAAAA,QAAQ,CAACzF,SAAT,GAAqB,EAArB;;AAEA,cAAA,OAAI,CAACJ,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASwH,WAAT,EAAyB;AAC3D,qBAAK,IAAIpH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAAC4I,qBAAP,CAA6B5H,MAAjD,EAAyD,EAAEZ,CAA3D,EAA8D;AAC1D,sBAAI2I,KAAK,GAAG/I,MAAM,CAAC4I,qBAAP,CAA6BxI,CAA7B,CAAZ;;AAEA,sBAAIgG,QAAQ,CAACvG,UAAT,CAAoB2H,WAApB,EAAiCD,KAAjC,IAA0CwB,KAAK,CAACxB,KAApD,EAA2D;AACvDnB,oBAAAA,QAAQ,CAACzF,SAAT,CAAmBV,IAAnB,CAAwB8I,KAAxB;AACA;AACH;AACJ;AACJ,eATD;AAUH,aAbD;AAcH;;;2DAEgC;AAC7B,iBAAKxI,aAAL,CAAmBqI,qBAAnB,GAA2C,IAAI/B,GAAJ,EAA3C;;AAEA,iBAAK,IAAIlE,iBAAiB,GAAG,CAA7B,EAAgCA,iBAAiB,IAAI,KAAKnG,MAAL,CAAYM,sBAAjE,EAAyF,EAAE6F,iBAA3F,EAA8G;AAC1G,kBAAIhC,SAAS,GAAG,EAAhB;AACA,mBAAK0I,+BAAL,CAAqC1I,SAArC,EAAgDgC,iBAAhD;AACA,mBAAKpC,aAAL,CAAmBqI,qBAAnB,CAAyC5B,GAAzC,CAA6CrE,iBAA7C,EAAgEhC,SAAhE;AACH;;AAED,iBAAK2I,mCAAL;AACH;;;0DAE+B3I,S,EAAWgC,iB,EAAmB;AAAA;;AAC1D,gBAAImG,cAAc,GAAGnG,iBAAiB,GAAG,IAAzC;AAEA,iBAAKpC,aAAL,CAAmB0D,IAAnB,CAAwBlE,OAAxB,CAAgC,UAACqG,QAAD,EAAc;AAC1C,kBAAI2C,KAAK,GAAG,OAAI,CAACQ,+BAAL,CAAqC5I,SAArC,EAAgDmI,cAAhD,EAAgE1C,QAAhE,CAAZ;;AAEA,kBAAI,CAAC2C,KAAL,EAAY;AACRA,gBAAAA,KAAK,GAAG,OAAI,CAACS,gCAAL,CAAsCpD,QAAtC,CAAR;AACAzF,gBAAAA,SAAS,CAACV,IAAV,CAAe8I,KAAf;AACH;;AAEDA,cAAAA,KAAK,CAACE,YAAN,CAAmBhJ,IAAnB,CAAwBmG,QAAxB;;AAEA,mBAAK,IAAIhG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgG,QAAQ,CAACvG,UAAT,CAAoBmB,MAAxC,EAAgD,EAAEZ,CAAlD,EAAqD;AACjD,oBAAIJ,MAAM,GAAG+I,KAAK,CAAClJ,UAAN,CAAiBO,CAAjB,CAAb;AACAJ,gBAAAA,MAAM,CAACuH,KAAP,GAAe,CAACvH,MAAM,CAACuH,KAAP,IAAgBwB,KAAK,CAACE,YAAN,CAAmBjI,MAAnB,GAA4B,CAA5C,IAAiDoF,QAAQ,CAACvG,UAAT,CAAoBO,CAApB,EAAuBmH,KAAzE,IAAkFwB,KAAK,CAACE,YAAN,CAAmBjI,MAApH;AACH;AACJ,aAdD;AAeH;;;0DAE+BL,S,EAAWmI,c,EAAgB1C,Q,EAAU;AAAA;;AACjE,gBAAI2C,KAAK,GAAG/N,CAAC,CAAC6I,IAAF,CAAOlD,SAAP,EAAkB,UAACgH,MAAD,EAAY;AACtC,mBAAK,IAAIvH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgG,QAAQ,CAACvG,UAAT,CAAoBmB,MAAxC,EAAgD,EAAEZ,CAAlD,EAAqD;AACjD,oBAAIJ,MAAM,GAAG2H,MAAM,CAAC9H,UAAP,CAAkBO,CAAlB,CAAb;AACA,oBAAImB,GAAG,GAAGvB,MAAM,CAACuH,KAAP,IAAgB,IAAIuB,cAApB,CAAV;AACA,oBAAItH,GAAG,GAAGxB,MAAM,CAACuH,KAAP,IAAgB,IAAIuB,cAApB,CAAV;;AAEA,oBAAI,CAAC,OAAI,CAACX,SAAL,CAAe/B,QAAQ,CAACvG,UAAT,CAAoBO,CAApB,EAAuBmH,KAAtC,EAA6ChG,GAA7C,EAAkDC,GAAlD,CAAL,EAA6D;AACzD,yBAAO,KAAP;AACH;AACJ;;AAED,qBAAO,IAAP;AACH,aAZW,CAAZ;;AAcA,mBAAOuH,KAAP;AACH;;;2DAEgC3C,Q,EAAU;AACvC,gBAAI2C,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAAClJ,UAAN,GAAmB,EAAnB;AACAkJ,YAAAA,KAAK,CAACE,YAAN,GAAqB,EAArB;AACAF,YAAAA,KAAK,CAACG,OAAN,GAAgB,CAAhB;AAEA9C,YAAAA,QAAQ,CAACvG,UAAT,CAAoBE,OAApB,CAA4B,UAAC0J,cAAD,EAAoB;AAC5C,kBAAIC,WAAW,GAAG,EAAlB;AACAA,cAAAA,WAAW,CAACnC,KAAZ,GAAoBkC,cAAc,CAAClC,KAAnC;AACAwB,cAAAA,KAAK,CAAClJ,UAAN,CAAiBI,IAAjB,CAAsByJ,WAAtB;AACH,aAJD;AAMA,mBAAOX,KAAP;AACH;;;gEAEqC;AAAA;;AAClC,iBAAKxI,aAAL,CAAmBqI,qBAAnB,CAAyC7I,OAAzC,CAAiD,UAACY,SAAD,EAAe;AAC5D,kBAAIR,eAAe,GAAG,CAAC,OAAI,CAAC3D,MAAL,CAAYO,iBAAZ,GAAgC,OAAI,CAACP,MAAL,CAAYQ,eAA7C,IAAgE2D,SAAS,CAACK,MAAhG;AAEAL,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,oBAAIO,SAAS,GAAGtI,IAAI,CAACC,KAAL,CAAW,OAAI,CAAC9E,MAAL,CAAYO,iBAAZ,GAAgCoD,eAAe,GAAGiJ,UAA7D,CAAhB;AACAL,gBAAAA,KAAK,CAAC5K,KAAN,GAAc,UAAUwL,SAAV,GAAsB,IAAtB,GAA6BA,SAA7B,GAAyC,IAAzC,GAAgDA,SAAhD,GAA4D,MAA1E;AACH,eAHD;AAIH,aAPD;AAQH;;;4DAEiC;AAAA;;AAC9B,iBAAKpJ,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAAC6J,cAAD,EAAiBpC,WAAjB,EAAiC;AACnEoC,cAAAA,cAAc,CAACC,uBAAf,GAAyC,CAAC,CAAD,CAAzC;;AAEA,cAAA,OAAI,CAACtJ,aAAL,CAAmB0D,IAAnB,CAAwBlE,OAAxB,CAAgC,UAACqG,QAAD,EAAc;AAC1C,gBAAA,OAAI,CAAC0D,yCAAL,CAA+C1D,QAA/C,EAAyDwD,cAAzD,EAAyEpC,WAAzE;AACH,eAFD;;AAIA,cAAA,OAAI,CAACjH,aAAL,CAAmB0D,IAAnB,CAAwBlE,OAAxB,CAAgC,UAACqG,QAAD,EAAc;AAC1C,oBAAIqD,cAAc,GAAGrD,QAAQ,CAACvG,UAAT,CAAoB2H,WAApB,CAArB;AAEAiC,gBAAAA,cAAc,CAACM,wBAAf,CAAwChK,OAAxC,CAAgD,UAACiK,KAAD,EAAW;AACvD,sBAAI,CAACJ,cAAc,CAACC,uBAAf,CAAuCjE,QAAvC,CAAgDoE,KAAK,CAAC1B,GAAtD,CAAL,EAAiE;AAC7DsB,oBAAAA,cAAc,CAACC,uBAAf,CAAuC5J,IAAvC,CAA4C+J,KAAK,CAAC1B,GAAlD;AACH;AACJ,iBAJD;AAKH,eARD;;AAUAsB,cAAAA,cAAc,CAACC,uBAAf,CAAuCzC,IAAvC,CAA4C,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC3D,uBAAOD,KAAK,GAAGC,MAAf;AACH,eAFD;AAGH,aApBD;AAqBH;;;oEAEyClB,Q,EAAUwD,c,EAAgBpC,W,EAAa;AAAA;;AAC7E,gBAAIiC,cAAc,GAAGrD,QAAQ,CAACvG,UAAT,CAAoB2H,WAApB,CAArB;AACAiC,YAAAA,cAAc,CAACM,wBAAf,GAA0C,EAA1C;AACA,gBAAIE,cAAJ;AAEAR,YAAAA,cAAc,CAACxF,IAAf,CAAoBlE,OAApB,CAA4B,UAACyG,KAAD,EAAQ0D,UAAR,EAAuB;AAC/C,kBAAIC,gBAAgB,GAAG,OAAI,CAAClC,mBAAL,CAAyBzB,KAAK,CAACF,KAA/B,EAAsCsD,cAAc,CAACjD,QAArD,CAAvB;;AAEA,kBAAIuD,UAAU,IAAI,CAAlB,EAAqB;AACjBD,gBAAAA,cAAc,GAAG,OAAI,CAACG,gCAAL,CAAsCX,cAAtC,EAAsDU,gBAAtD,CAAjB;AACH,eAFD,MAEO;AACH,oBAAIA,gBAAgB,IAAIF,cAAc,CAAC3D,KAAnC,IAA4C4D,UAAU,IAAIT,cAAc,CAACxF,IAAf,CAAoBjD,MAApB,GAA6B,CAA3F,EAA8F;AAC1FiJ,kBAAAA,cAAc,CAAC3B,GAAf,GAAqB4B,UAArB;;AAEA,sBAAIC,gBAAgB,IAAIF,cAAc,CAAC3D,KAAvC,EAA8C;AAC1C2D,oBAAAA,cAAc,GAAG,OAAI,CAACG,gCAAL,CAAsCX,cAAtC,EAAsDU,gBAAtD,CAAjB;AACH;AACJ;AACJ;AACJ,aAdD;AAeH;;;2DAEgCV,c,EAAgBU,gB,EAAkB;AAC/D,gBAAIH,KAAK,GAAG,EAAZ;AACAP,YAAAA,cAAc,CAACM,wBAAf,CAAwC9J,IAAxC,CAA6C+J,KAA7C;AACAA,YAAAA,KAAK,CAAC1D,KAAN,GAAc6D,gBAAd;AACAH,YAAAA,KAAK,CAAC1B,GAAN,GAAY,CAAZ;AACA,mBAAO0B,KAAP;AACH;;;2CAEgB;AACb,gBAAI,KAAKzJ,aAAL,CAAmB0D,IAAnB,CAAwBjD,MAAxB,GAAiC,CAArC,EAAwC;AACpC,mBAAKqJ,cAAL;AACA,mBAAKC,YAAL;AACH;AACJ;;;2CAEgB;AACb,iBAAKC,QAAL,GAAgB,KAAhB;AACA,iBAAKnH,gBAAL,CAAsBoH,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,KAAKrH,eAAL,CAAqBsH,KAA3D,EAAkE,KAAKtH,eAAL,CAAqBuH,MAAvF;AACH;;;yCAEc;AAAA;;AACX,iBAAKtP,QAAL,CAAc,YAAM;AAChB,cAAA,OAAI,CAAC6H,eAAL,CAAqBuH,SAArB,CAA+B,CAA/B,EAAkC,CAAlC,EAAqC,OAAI,CAACzH,cAAL,CAAoB0H,KAAzD,EAAgE,OAAI,CAAC1H,cAAL,CAAoB2H,MAApF;;AACA,cAAA,OAAI,CAACC,qBAAL;;AACA,cAAA,OAAI,CAACC,mBAAL,GAA2B,OAAI,CAACC,oBAAL,GAA4B,OAAI,CAACrO,MAAL,CAAYK,6BAAnE;;AACA,cAAA,OAAI,CAACmF,KAAL,CAAWoC,MAAX;;AACA,cAAA,OAAI,CAAC0G,gBAAL;AACH,aAND;AAOH;;;kDAEuB;AACpB,iBAAKC,2BAAL;AACA,iBAAKxK,aAAL,CAAmByK,eAAnB,GAAqC,KAAK/H,eAAL,CAAqBgI,WAArB,CAAiC,GAAjC,EAAsCR,KAA3E;AACA,iBAAKlK,aAAL,CAAmB2K,cAAnB,GAAoC,KAAK3K,aAAL,CAAmByK,eAAnB,GAAqC,KAAKxO,MAAL,CAAYU,QAAZ,CAAqBI,8BAA9F;AACA,iBAAK6N,gBAAL;AACA,iBAAKC,iBAAL;AACH;;;6CAEkB;AAAA;;AACf,iBAAKC,0BAAL;AACA,gBAAIhM,oBAAoB,GAAG,KAAKiM,uBAAL,EAA3B;AAEA,iBAAK/K,aAAL,CAAmBgL,aAAnB,GAAmC,KAAK/O,MAAL,CAAYU,QAAZ,CAAqBc,2BAArB,GAAmD,KAAKuC,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAjF,GAC/B3B,oBAAoB,IAAI,KAAKkB,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,CAA3C,CADxB,CAJe,CAOf;;AACA,gBAAI,KAAKwK,YAAT,EAAuB;AACnB,mBAAKjL,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,gBAAA,OAAI,CAACO,aAAL,CAAmBgL,aAAnB,IAAoCvL,MAAM,CAAC6J,uBAAP,CAA+B7I,MAA/B,GAAwC,OAAI,CAACxE,MAAL,CAAYU,QAAZ,CAAqBK,UAAjG;AACH,eAFD;AAGH,aAJD,MAIO;AACH,mBAAKgD,aAAL,CAAmBgL,aAAnB,IAAoC,KAAKE,kBAAL,KAA4B,KAAKlL,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA1D,GAAmE,KAAKxE,MAAL,CAAYU,QAAZ,CAAqBK,UAA5H;AACH;;AAED,iBAAKmO,mBAAL,GAA2B,KAAKnL,aAAL,CAAmBgL,aAA9C;AACA,iBAAKhL,aAAL,CAAmBoE,MAAnB,GAA4B,KAAKgH,mBAAL,CAAyB,KAAKhH,MAAL,GAAc,IAAvC,CAA5B;AACA,iBAAKpE,aAAL,CAAmBqL,WAAnB,GAAiC,KAAK3I,eAAL,CAAqBgI,WAArB,CAAiC,KAAK1K,aAAL,CAAmBoE,MAApD,EAA4D8F,KAA7F;;AAEA,gBAAI,KAAK3H,SAAT,EAAoB;AAChB,mBAAK+I,6BAAL;AACH,aAFD,MAEO;AACH,mBAAKH,mBAAL,IAA4B,KAAKnL,aAAL,CAAmBqL,WAAnB,GAAiC,CAA7D;AACH;AACJ;;;oDAEyB;AACtB,gBAAIvM,oBAAJ;;AAEA,gBAAI,KAAKyD,SAAT,EAAoB;AAChB,kBAAI,KAAKT,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxDjD,gBAAAA,oBAAoB,GAAG,KAAK7C,MAAL,CAAYU,QAAZ,CAAqBS,gCAA5C;AACH,eAFD,MAEO;AACH0B,gBAAAA,oBAAoB,GAAG,KAAK7C,MAAL,CAAYU,QAAZ,CAAqBQ,8BAA5C;AACH;AACJ,aAND,MAMO,IAAI,KAAK8N,YAAT,EAAuB;AAC1BnM,cAAAA,oBAAoB,GAAG,KAAK7C,MAAL,CAAYU,QAAZ,CAAqBQ,8BAA5C;AACH,aAFM,MAEA;AACH2B,cAAAA,oBAAoB,GAAG,KAAK7C,MAAL,CAAYU,QAAZ,CAAqBS,gCAA5C;AACH;;AAED,mBAAO0B,oBAAP;AACH;;;+CAEoB;AACjB,gBAAI2B,MAAM,GAAG,CAAb;AAEA,iBAAKT,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,kBAAI8L,sBAAsB,GAAG9Q,CAAC,CAAC+Q,KAAF,CAAQ/L,MAAM,CAACiE,IAAf,EAAqB,UAACuC,KAAD,EAAW;AACzD,uBAAOA,KAAK,CAACH,MAAN,CAAarF,MAApB;AACH,eAF4B,CAA7B;;AAIAA,cAAAA,MAAM,GAAG8K,sBAAsB,CAACzF,MAAvB,CAA8BrF,MAAvC;AACH,aAND;AAQA,mBAAOA,MAAP;AACH;;;0DAE+B;AAAA;;AAC5B,iBAAK0K,mBAAL,IAA4B,KAAKlP,MAAL,CAAYU,QAAZ,CAAqBc,2BAArB,GAAmD,KAAKuC,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA7G;;AAEA,gBAAI,KAAKqB,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKoJ,mBAAL,IAA4B,KAAKlP,MAAL,CAAYU,QAAZ,CAAqBe,+BAArB,GAAuD,KAAKsC,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAjH;AAEA,mBAAKT,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,gBAAA,OAAI,CAAC0L,mBAAL,IAA4B,OAAI,CAACM,wBAAL,CAA8BhM,MAA9B,IAAwC,OAAI,CAACxD,MAAL,CAAYU,QAAZ,CAAqBY,6BAAzF;AACH,eAFD;AAGH,aAND,MAMO;AACH,mBAAK4N,mBAAL,IAA4B,KAAKlP,MAAL,CAAYU,QAAZ,CAAqBe,+BAArB,GACxB,KAAKgO,6BAAL,KAAuC,KAAKzP,MAAL,CAAYU,QAAZ,CAAqBa,+BADhE;AAEH;AACJ;;;mDAEwBiC,M,EAAQ;AAC7B,gBAAIW,SAAS,GAAG,KAAKuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AAEA,gBAAImM,YAAY,GAAGnR,CAAC,CAAC+Q,KAAF,CAAQpL,SAAR,EAAmB,UAACoI,KAAD,EAAW;AAC7C,qBAAOA,KAAK,CAACE,YAAN,CAAmBjI,MAA1B;AACH,aAFkB,CAAnB;;AAIA,mBAAOmL,YAAY,CAAClD,YAAb,CAA0BjI,MAA1B,GAAmC,KAAKxE,MAAL,CAAYU,QAAZ,CAAqBY,6BAA/D;AACH;;;6DAEkCkC,M,EAAQ;AACvC,mBAAOA,MAAM,CAAC4I,qBAAP,CAA6Bb,GAA7B,CAAiC,KAAKpF,iBAAtC,CAAP;AACH;;;0DAE+B;AAC5B,gBAAI4C,MAAM,GAAG,CAAb;AACA,gBAAI5E,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;AAEAzL,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB,kBAAIA,KAAK,CAACE,YAAN,CAAmBjI,MAAnB,GAA4BuE,MAAhC,EAAwC;AACpCA,gBAAAA,MAAM,GAAGwD,KAAK,CAACE,YAAN,CAAmBjI,MAA5B;AACH;AACJ,aAJD;AAMA,mBAAOuE,MAAP;AACH;;;8DAEmC;AAChC,mBAAO,KAAKhF,aAAL,CAAmBqI,qBAAnB,CAAyCb,GAAzC,CAA6C,KAAKpF,iBAAlD,CAAP;AACH;;;8CAEmB;AAChB;AACA,gBAAI,KAAKG,SAAT,EAAoB;AAChB,kBAAIuJ,UAAU,GAAG,KAAKC,gBAAL,EAAjB;AACA,mBAAK/L,aAAL,CAAmBgM,cAAnB,GAAoCF,UAAU,IAAI,KAAK7P,MAAL,CAAYU,QAAZ,CAAqBO,kBAArB,GAA0C,KAAKjB,MAAL,CAAYU,QAAZ,CAAqBU,mBAAnE,CAA9C;AACH,aAHD,MAGO;AACH,mBAAK2C,aAAL,CAAmBgM,cAAnB,GAAoC,KAAKhM,aAAL,CAAmB0D,IAAnB,CAAwBjD,MAAxB,GAAiC,KAAKxE,MAAL,CAAYU,QAAZ,CAAqBM,oBAA1F;AACH,aAPe,CAShB;;;AACA,iBAAKqN,oBAAL,GAA4B,KAAKtK,aAAL,CAAmBgM,cAAnB,GACxB,CAAC,KAAKhM,aAAL,CAAmByK,eAAnB,GAAqC,KAAKxO,MAAL,CAAYU,QAAZ,CAAqBI,8BAA3D,IAA6F,CADjG;AAEH;;;6CAEkB;AAAA;;AACf,gBAAI+O,UAAU,GAAG,CAAjB;;AAEA,gBAAI,KAAKhK,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,oBAAIW,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AACA,oBAAIgB,MAAM,GAAGL,SAAS,CAACK,MAAvB;;AAEA,oBAAIA,MAAM,GAAGqL,UAAb,EAAyB;AACrBA,kBAAAA,UAAU,GAAGrL,MAAb;AACH;AACJ,eAPD;AAQH,aATD,MASO;AACH,kBAAIL,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;AACAC,cAAAA,UAAU,GAAG1L,SAAS,CAACK,MAAvB;AACH;;AAED,mBAAOqL,UAAP;AACH;;;wDAE6B;AAC1B,iBAAKpJ,eAAL,CAAqBuJ,IAArB,GAA4B,UAAU,KAAKhQ,MAAL,CAAYU,QAAZ,CAAqBE,cAA/B,GAAgD,UAA5E;AACH;;;6CAEkB;AACf,iBAAKmD,aAAL,CAAmBkM,YAAnB,GAAkC,CAAlC;AACA,iBAAKC,8BAAL;;AAEA,gBAAI,KAAK5J,SAAT,EAAoB;AAChB,mBAAK6J,mBAAL;AACH,aAFD,MAEO;AACH,mBAAKC,qBAAL;AACH;;AAED,iBAAKC,gBAAL;AACA,iBAAKC,eAAL;AACH;;;2DAEgC;AAAA;;AAC7B,gBAAIzN,oBAAoB,GAAG,KAAKiM,uBAAL,EAA3B;AAEA,iBAAK/K,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASwH,WAAT,EAAyB;AAC3D,cAAA,OAAI,CAACuF,uBAAL,CAA6B/M,MAA7B,EAAqCwH,WAArC,EAAkDnI,oBAAlD;;AAEA,kBAAI,OAAI,CAACmM,YAAT,EAAuB;AACnBxL,gBAAAA,MAAM,CAACgN,IAAP,GAAchN,MAAM,CAACiN,MAAP,GAAgBjN,MAAM,CAAC6J,uBAAP,CAA+B7I,MAA/B,GAAwC,OAAI,CAACxE,MAAL,CAAYU,QAAZ,CAAqBK,UAA3F;AACH,eAFD,MAEO;AACHyC,gBAAAA,MAAM,CAACgN,IAAP,GAAchN,MAAM,CAACiN,MAAP,GAAgB,OAAI,CAACxB,kBAAL,KAA4B,OAAI,CAACjP,MAAL,CAAYU,QAAZ,CAAqBK,UAA/E;AACH;AACJ,aARD;AASH;;;kDAEuByC,M,EAAQwH,W,EAAanI,oB,EAAsB;AAC/D,gBAAImI,WAAW,GAAG,CAAlB,EAAqB;AACjB,kBAAI0F,cAAc,GAAG,KAAK3M,aAAL,CAAmBV,UAAnB,CAA8B2H,WAAW,GAAG,CAA5C,CAArB;AACAxH,cAAAA,MAAM,CAACiN,MAAP,GAAgBC,cAAc,CAACF,IAAf,GAAsB3N,oBAAtC;;AAEA,kBAAI,KAAKyD,SAAT,EAAoB;AAChB9C,gBAAAA,MAAM,CAACiN,MAAP,IAAiB,KAAKzQ,MAAL,CAAYU,QAAZ,CAAqBc,2BAAtC;;AAEA,oBAAI,KAAKqE,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,sBAAI6K,qBAAqB,GAAG,KAAKnB,wBAAL,CAA8BkB,cAA9B,CAA5B;AACAlN,kBAAAA,MAAM,CAACiN,MAAP,IAAiBE,qBAAqB,GAAG,KAAK3Q,MAAL,CAAYU,QAAZ,CAAqBe,+BAA9D;AACH;AACJ;AACJ,aAZD,MAYO;AACH+B,cAAAA,MAAM,CAACiN,MAAP,GAAgB,KAAKzQ,MAAL,CAAYU,QAAZ,CAAqBc,2BAArC;AACH;AACJ;;;gDAEqB;AAClB,iBAAKuC,aAAL,CAAmB6M,sBAAnB,GAA4C,KAAK5Q,MAAL,CAAYU,QAAZ,CAAqBO,kBAAjE;;AAEA,gBAAI,KAAK4E,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK+K,iCAAL;AACH,aAFD,MAEO;AACH,mBAAKC,iCAAL;AACH;;AAED,iBAAKC,aAAL;AACH;;;8DAEmC;AAAA;;AAChC,iBAAKhN,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASwH,WAAT,EAAyB;AAC3D,kBAAI7G,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AAEAW,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,gBAAA,OAAI,CAACoE,wBAAL,CAA8BzE,KAA9B,EAAqCK,UAArC,EAAiD,CAAC5B,WAAD,CAAjD;AACH,eAFD;;AAIA,cAAA,OAAI,CAACiG,mBAAL,CAAyBzN,MAAzB;AACH,aARD;AASH;;;mDAEwB+I,K,EAAOK,U,EAAYsE,e,EAAiB;AACzD,gBAAItH,QAAQ,GAAG2C,KAAK,CAACE,YAAN,CAAmB,CAAnB,CAAf;AACA,iBAAK0E,oBAAL,CAA0BvH,QAA1B,EAAoCgD,UAApC,EAAgD,KAAK5M,MAAL,CAAYU,QAAZ,CAAqBO,kBAArE,EAAyF,KAAKjB,MAAL,CAAYU,QAAZ,CAAqBU,mBAA9G,EAAmI8P,eAAnI;AACA3E,YAAAA,KAAK,CAAC6E,CAAN,GAAUxH,QAAQ,CAACwH,CAAnB;AACH;;;+CAEoBxH,Q,EAAUyH,a,EAAeC,W,EAAaC,sB,EAAwBL,e,EAAiB;AAAA;;AAChGtH,YAAAA,QAAQ,CAACwH,CAAT,GAAa,KAAKrN,aAAL,CAAmB2K,cAAnB,GAAoC2C,aAAa,IAAIC,WAAW,GAAGC,sBAAlB,CAA9D;AACA,gBAAIC,IAAI,GAAG5H,QAAQ,CAACwH,CAAT,GAAaE,WAAxB;;AAEA,gBAAIE,IAAI,GAAG,KAAKzN,aAAL,CAAmBkM,YAA9B,EAA4C;AACxC,mBAAKlM,aAAL,CAAmBkM,YAAnB,GAAkCuB,IAAlC;AACH;;AAEDN,YAAAA,eAAe,CAAC3N,OAAhB,CAAwB,UAACyH,WAAD,EAAiB;AACrC,cAAA,OAAI,CAACyG,0BAAL,CAAgC7H,QAAhC,EAA0CoB,WAA1C,EAAuDsG,WAAvD;AACH,aAFD;AAGH;;;qDAE0B1H,Q,EAAUoB,W,EAAasG,W,EAAa;AAAA;;AAC3D,gBAAIlE,cAAc,GAAG,KAAKrJ,aAAL,CAAmBV,UAAnB,CAA8B2H,WAA9B,CAArB;AACA,gBAAIiC,cAAc,GAAGrD,QAAQ,CAACvG,UAAT,CAAoB2H,WAApB,CAArB;;AAEA,gBAAI,KAAKgE,YAAT,EAAuB;AACnB5B,cAAAA,cAAc,CAACC,uBAAf,CAAuC9J,OAAvC,CAA+C,UAACmK,UAAD,EAAagE,UAAb,EAA4B;AACvE,oBAAI1H,KAAK,GAAGiD,cAAc,CAACxF,IAAf,CAAoBiG,UAApB,CAAZ;;AAEA,oBAAI1D,KAAJ,EAAW;AACP,kBAAA,OAAI,CAAC2H,yBAAL,CAA+B/H,QAA/B,EAAyCoB,WAAzC,EAAsDoC,cAAtD,EAAsEpD,KAAtE,EAA6E0H,UAA7E,EACI,OAAI,CAAC1R,MAAL,CAAYU,QAAZ,CAAqBK,UADzB,EACqCuQ,WADrC;AAEH;AACJ,eAPD;AAQH,aATD,MASO;AACHrE,cAAAA,cAAc,CAACxF,IAAf,CAAoBlE,OAApB,CAA4B,UAACyG,KAAD,EAAQ0D,UAAR,EAAuB;AAC/C,gBAAA,OAAI,CAACiE,yBAAL,CAA+B/H,QAA/B,EAAyCoB,WAAzC,EAAsDoC,cAAtD,EAAsEpD,KAAtE,EAA6E0D,UAA7E,EAAyF,OAAI,CAAC1N,MAAL,CAAYU,QAAZ,CAAqBK,UAA9G,EAA0HuQ,WAA1H;AACH,eAFD;AAGH;AACJ;;;oDAEyB1H,Q,EAAUoB,W,EAAaoC,c,EAAgBpD,K,EAAO0D,U,EAAY3M,U,EAAYuQ,W,EAAa;AACzGtH,YAAAA,KAAK,CAAC4H,CAAN,GAAUxE,cAAc,CAACqD,MAAf,GAAwB/C,UAAU,GAAG3M,UAA/C;AACAiJ,YAAAA,KAAK,CAACrI,KAAN,GAAc,KAAKkQ,eAAL,CAAqB7H,KAAK,CAACF,KAA3B,EAAkC,KAAK/F,aAAL,CAAmBV,UAAnB,CAA8B2H,WAA9B,EAA2Cb,QAA7E,CAAd;AACA,iBAAK1D,eAAL,CAAqBqL,SAArB,GAAiC9H,KAAK,CAACrI,KAAvC;AACA,iBAAK8E,eAAL,CAAqBsL,QAArB,CAA8B/H,KAAK,CAAC4H,CAApC,EAAuChI,QAAQ,CAACwH,CAAhD,EAAmDrQ,UAAnD,EAA+DuQ,WAA/D;AACH;;;0CAEexH,K,EAAO4B,G,EAAK;AAAA;;AACxB,gBAAI3C,MAAM,GAAG,IAAb;AAEA2C,YAAAA,GAAG,CAACnI,OAAJ,CAAY,UAAC5B,KAAD,EAAQ2I,SAAR,EAAsB;AAC9B,kBAAI,CAACvB,MAAD,IAAW,OAAI,CAAC4C,SAAL,CAAe7B,KAAf,EAAsBQ,SAAS,CAACvF,GAAhC,EAAqCuF,SAAS,CAACtF,GAA/C,CAAf,EAAoE;AAChE+D,gBAAAA,MAAM,GAAGpH,KAAT;AACH;AACJ,aAJD;AAMA,mBAAOoH,MAAP;AACH;;;8DAEmC;AAAA;;AAChC,gBAAI5E,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;AAEAzL,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,kBAAIsE,eAAe,GAAG,OAAI,CAACc,qBAAL,EAAtB;;AACA,cAAA,OAAI,CAAChB,wBAAL,CAA8BzE,KAA9B,EAAqCK,UAArC,EAAiDsE,eAAjD;AACH,aAHD;AAKA,iBAAKD,mBAAL,CAAyB,KAAKlN,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,CAArE,CAAzB;AACH;;;kDAEuB;AACpB,mBAAOyN,KAAK,CAAChK,IAAN,CAAWgK,KAAK,CAAC,KAAKlO,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA/B,CAAL,CAA4C0N,IAA5C,EAAX,CAAP;AACH;;;0CAEe;AACZ,iBAAK3D,2BAAL;AACA,gBAAI4D,KAAK,GAAG,aAAZ;AACA,gBAAIC,UAAU,GAAG,KAAK3L,eAAL,CAAqBgI,WAArB,CAAiC0D,KAAjC,EAAwClE,KAAzD;;AAEA,gBAAI,KAAKpI,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKuM,4BAAL,CAAkCD,UAAlC;AACH,aAFD,MAEO;AACH,mBAAKE,8BAAL,CAAoCF,UAApC;AACH;AACJ;;;uDAE4BA,U,EAAY;AAAA;;AACrC,iBAAKrO,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,kBAAIiN,MAAM,GAAGjN,MAAM,CAACgN,IAAP,GAAc,OAAI,CAACxQ,MAAL,CAAYU,QAAZ,CAAqBe,+BAAhD;;AACA,kBAAIkP,qBAAqB,GAAG,OAAI,CAACnB,wBAAL,CAA8BhM,MAA9B,CAA5B;;AACA,kBAAIW,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AAEAW,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,gBAAA,OAAI,CAAC2F,oBAAL,CAA0B9B,MAA1B,EAAkClE,KAAlC,EAAyCK,UAAzC,EAAqD,OAAI,CAAC5M,MAAL,CAAYU,QAAZ,CAAqBY,6BAA1E;AACH,eAFD;;AAIA,cAAA,OAAI,CAACkR,kBAAL,CAAwB,CAAC/B,MAAM,GAAG,CAAT,GAAaE,qBAAb,GAAqCyB,UAAtC,IAAoD,CAA5E;AACH,aAVD;AAWH;;;6CAEkBR,C,EAAG;AAClB,iBAAKnL,eAAL,CAAqBqL,SAArB,GAAiC,OAAjC;AACA,iBAAKrL,eAAL,CAAqBgM,QAArB,CAA8B,aAA9B,EAA6Cb,CAA7C,EAAgD,KAAK7N,aAAL,CAAmByK,eAAnE;AACH;;;+CAEoBiC,M,EAAQlE,K,EAAOK,U,EAAY8F,c,EAAgB;AAC5D,gBAAIlC,IAAI,GAAGC,MAAM,GAAGlE,KAAK,CAACE,YAAN,CAAmBjI,MAAnB,GAA4BkO,cAAhD;AACA,gBAAIC,MAAM,GAAG,KAAK5O,aAAL,CAAmB2K,cAAnB,GACT9B,UAAU,IAAI,KAAK5M,MAAL,CAAYU,QAAZ,CAAqBO,kBAArB,GAA0C,KAAKjB,MAAL,CAAYU,QAAZ,CAAqBU,mBAAnE,CADd;AAEA,gBAAIoQ,IAAI,GAAGmB,MAAM,GAAG,KAAK3S,MAAL,CAAYU,QAAZ,CAAqBO,kBAAzC;AACA,iBAAKwF,eAAL,CAAqBmM,SAArB;AACA,iBAAKnM,eAAL,CAAqBoM,MAArB,CAA4BpC,MAA5B,EAAoCkC,MAApC;AACA,iBAAKlM,eAAL,CAAqBqM,MAArB,CAA4BtC,IAA5B,EAAkCmC,MAAlC;AACA,iBAAKlM,eAAL,CAAqBqM,MAArB,CAA4BtC,IAA5B,EAAkCgB,IAAlC;AACA,iBAAK/K,eAAL,CAAqBqM,MAArB,CAA4BrC,MAA5B,EAAoCe,IAApC;AACA,iBAAK/K,eAAL,CAAqBsM,SAArB;AACA,iBAAKtM,eAAL,CAAqBqL,SAArB,GAAiC,OAAjC;AACA,iBAAKrL,eAAL,CAAqBuM,IAArB;AACA,mBAAOxC,IAAP;AACH;;;yDAE8B4B,U,EAAY;AAAA;;AACvC,gBAAI3B,MAAM,GAAG,KAAK1M,aAAL,CAAmBgL,aAAnB,GAAmC,KAAK/O,MAAL,CAAYU,QAAZ,CAAqBe,+BAAxD,GAA0F2Q,UAAU,GAAG,CAApH;AACA,gBAAIa,OAAO,GAAG,CAAd;AACA,gBAAI9O,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;AAEAzL,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,kBAAI4D,IAAI,GAAG,OAAI,CAAC+B,oBAAL,CAA0B9B,MAA1B,EAAkClE,KAAlC,EAAyCK,UAAzC,EAAqD,OAAI,CAAC5M,MAAL,CAAYU,QAAZ,CAAqBa,+BAA1E,CAAX;;AAEA,kBAAIiP,IAAI,GAAGyC,OAAX,EAAoB;AAChBA,gBAAAA,OAAO,GAAGzC,IAAV;AACH;AACJ,aAND;AAQA,iBAAKgC,kBAAL,CAAwB,CAAC/B,MAAM,GAAGwC,OAAT,GAAmBb,UAApB,IAAkC,CAA1D;AACH;;;8CAEmB5O,M,EAAQ;AACxB,iBAAKiD,eAAL,CAAqByM,WAArB,GAAmC,MAAnC;AACA,gBAAItB,CAAC,GAAGpO,MAAM,CAACgN,IAAP,GAAc,KAAKxQ,MAAL,CAAYU,QAAZ,CAAqBS,gCAArB,GAAwD,CAA9E;;AAEA,gBAAI,KAAK0E,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,kBAAI6K,qBAAqB,GAAG,KAAKnB,wBAAL,CAA8BhM,MAA9B,CAA5B;AACAoO,cAAAA,CAAC,IAAI,KAAK5R,MAAL,CAAYU,QAAZ,CAAqBe,+BAArB,GAAuDkP,qBAA5D;AACH;;AAED,iBAAKlK,eAAL,CAAqBmM,SAArB;AACA,iBAAKnM,eAAL,CAAqBoM,MAArB,CAA4BjB,CAA5B,EAA+B,KAAK7N,aAAL,CAAmB2K,cAAlD;AACA,iBAAKjI,eAAL,CAAqBqM,MAArB,CAA4BlB,CAA5B,EAA+B,KAAK7N,aAAL,CAAmB2K,cAAnB,GAAoC,KAAK3K,aAAL,CAAmBgM,cAAtF;AACA,iBAAKtJ,eAAL,CAAqB0M,MAArB;AACA,iBAAK1M,eAAL,CAAqBsM,SAArB;AACH;;;kDAEuB;AAAA;;AACpB,iBAAKhP,aAAL,CAAmB6M,sBAAnB,GAA4C,KAAK5Q,MAAL,CAAYU,QAAZ,CAAqBM,oBAAjE;AAEA,iBAAK+C,aAAL,CAAmB0D,IAAnB,CAAwBlE,OAAxB,CAAgC,UAACqG,QAAD,EAAWyH,aAAX,EAA6B;AACzD,kBAAIH,eAAe,GAAG,OAAI,CAACc,qBAAL,EAAtB;;AACA,cAAA,OAAI,CAACb,oBAAL,CAA0BvH,QAA1B,EAAoCyH,aAApC,EAAmD,OAAI,CAACrR,MAAL,CAAYU,QAAZ,CAAqBM,oBAAxE,EAA8F,CAA9F,EAAiGkQ,eAAjG;AACH,aAHD;;AAKA,gBAAI,CAAC,KAAKlC,YAAV,EAAwB,CACpB;AACH;AACJ;;;0CAEe;AACZ,iBAAK,IAAIpL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAIgO,CAAC,GAAG,KAAK7N,aAAL,CAAmBV,UAAnB,CAA8BO,CAA9B,EAAiC6M,MAAjC,GAA0C,KAAKzQ,MAAL,CAAYU,QAAZ,CAAqBS,gCAArB,GAAwD,CAAlG,GACJ0D,IAAI,CAACuO,KAAL,CAAW,KAAKpT,MAAL,CAAYU,QAAZ,CAAqBW,aAArB,GAAqC,CAAhD,CADJ;AAEA,mBAAKgS,sBAAL,CAA4BzB,CAA5B;AACH;AACJ;;;iDAEsBA,C,EAAG;AAAA;;AACtB,gBAAIR,CAAC,GAAG,KAAKrN,aAAL,CAAmB2K,cAA3B;AAEA,iBAAK3K,aAAL,CAAmBqI,qBAAnB,CAAyC7I,OAAzC,CAAiD,UAACgJ,KAAD,EAAW;AACxD,cAAA,OAAI,CAAC9F,eAAL,CAAqBqL,SAArB,GAAiCvF,KAAK,CAAC5K,KAAvC;AACA,kBAAIuM,MAAM,GAAG3B,KAAK,CAACE,YAAN,CAAmBjI,MAAnB,GAA4B,OAAI,CAACxE,MAAL,CAAYU,QAAZ,CAAqBM,oBAA9D;;AACA,cAAA,OAAI,CAACyF,eAAL,CAAqBsL,QAArB,CAA8BH,CAA9B,EAAiCR,CAAjC,EAAoC,OAAI,CAACpR,MAAL,CAAYU,QAAZ,CAAqBW,aAAzD,EAAwE6M,MAAxE;;AACAkD,cAAAA,CAAC,IAAIlD,MAAL;AACH,aALD;AAMH;;;6CAEkB;AACf,iBAAKK,2BAAL;;AAEA,iBAAK,IAAIvD,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,KAAKjH,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAtE,EAA8E,EAAEwG,WAAhF,EAA6F;AACzF,kBAAIxH,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B2H,WAA9B,CAAb;AACA,kBAAImH,KAAK,GAAG,KAAK/O,KAAL,CAAWC,UAAX,CAAsB2H,WAAtB,EAAmChI,IAA/C;AACA,kBAAIiL,KAAK,GAAG,KAAKxH,eAAL,CAAqBgI,WAArB,CAAiC0D,KAAjC,EAAwClE,KAApD;AACA,mBAAKxH,eAAL,CAAqBqL,SAArB,GAAiC,KAAKwB,qBAAL,CAA2B,KAAKlQ,KAAL,CAAWC,UAAX,CAAsB2H,WAAtB,CAA3B,CAAjC;AACA,mBAAKvE,eAAL,CAAqBgM,QAArB,CAA8BN,KAA9B,EAAqC,CAAC3O,MAAM,CAACiN,MAAP,GAAgBjN,MAAM,CAACgN,IAAvB,GAA8BvC,KAA/B,IAAwC,CAA7E,EAAgF,KAAKlK,aAAL,CAAmByK,eAAnG;AACH;AACJ;;;gDAEqBhL,M,EAAQ;AAC1B,gBAAIE,SAAS,GAAGF,MAAM,CAACE,SAAvB;AACA,mBAAOA,SAAS,CAACA,SAAS,CAACc,MAAV,GAAmB,CAApB,CAAhB;AACH;;;4CAEiB;AACd,iBAAKqK,0BAAL;AACA,gBAAIuC,CAAC,GAAG,KAAKrN,aAAL,CAAmB2K,cAAnB,GAAoC,KAAK3K,aAAL,CAAmBgM,cAAvD,GAAwE,KAAK/P,MAAL,CAAYU,QAAZ,CAAqBI,8BAArG;AACA,gBAAI0C,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,CAArE,CAAb;AACA,iBAAKiC,eAAL,CAAqBqL,SAArB,GAAiC,OAAjC;AACA,iBAAKrL,eAAL,CAAqBgM,QAArB,CAA8B,KAAK1O,aAAL,CAAmBoE,MAAjD,EAAyD3E,MAAM,CAACgN,IAAP,GAAc,KAAKzM,aAAL,CAAmBqL,WAAnB,GAAiC,CAAxG,EAA2GgC,CAA3G;AACH;;;uDAE4B;AACzB,iBAAK3K,eAAL,CAAqBuJ,IAArB,GAA4B,YAAY,KAAKhQ,MAAL,CAAYU,QAAZ,CAAqBG,YAAjC,GAAgD,UAA5E;AACH;;;8CAEmB0H,I,EAAM;AACtB,mBAAOhK,MAAM,CAACgK,IAAD,CAAN,CAAagL,MAAb,CAAoB,KAAKvT,MAAL,CAAYE,UAAhC,CAAP;AACH;;;2CAEgB;AAAA;;AACb,iBAAKsT,aAAL,GAAqB,KAArB;;AAEA,gBAAI,KAAKC,qBAAT,EAAgC;AAC5B,mBAAKA,qBAAL,GAA6B,KAA7B;AACA,mBAAK3F,YAAL;;AAEA,kBAAI,KAAKxH,SAAT,EAAoB;AAChB,oBAAIoN,IAAI,GAAG,KAAKxP,UAAL,CAAgBC,SAA3B;AACA,qBAAKD,UAAL,CAAgBC,SAAhB,GAA4B,EAA5B;AAEAuP,gBAAAA,IAAI,CAACnQ,OAAL,CAAa,UAACgJ,KAAD,EAAW;AACpB,kBAAA,OAAI,CAACoH,uBAAL,CAA6BpH,KAAK,CAACqH,aAAnC,EAAkD,IAAlD;AACH,iBAFD;AAIA,qBAAKC,cAAL;AACH,eATD,MASO;AACH,qBAAKA,cAAL;AACH;AACJ;AACJ;;;kDAEuBtH,K,EAAOuH,c,EAAgB;AAC3C,gBAAIC,UAAU,GAAGvV,CAAC,CAAC6I,IAAF,CAAO,KAAKnD,UAAL,CAAgBC,SAAvB,EAAkC,UAACgH,MAAD,EAAY;AAC3D,qBAAOA,MAAM,CAACyI,aAAP,IAAwBrH,KAA/B;AACH,aAFgB,CAAjB;;AAIA,gBAAIwH,UAAJ,EAAgB;AACZ,kBAAID,cAAJ,EAAoB;AAChBvH,gBAAAA,KAAK,CAACyH,UAAN,GAAmB,KAAnB;;AAEAxV,gBAAAA,CAAC,CAACyV,MAAF,CAAS,KAAK/P,UAAL,CAAgBC,SAAzB,EAAoC,UAACgH,MAAD,EAAY;AAC5C,yBAAOA,MAAM,CAACyI,aAAP,IAAwBrH,KAA/B;AACH,iBAFD;AAGH;AACJ,aARD,MAQO;AACHA,cAAAA,KAAK,CAACyH,UAAN,GAAmB,IAAnB;AACA,mBAAKE,eAAL,CAAqB3H,KAArB;AACH;;AAED,iBAAK4H,wBAAL;AACH;;;qDAE0B;AAAA;;AACvB,iBAAKC,uBAAL,GAA+B,KAA/B;;AAEA,gBAAI,KAAKvO,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,oBAAIW,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AACA,gBAAA,OAAI,CAAC6Q,+BAAL,CAAqClQ,SAArC;AACH,eAHD;AAIH,aALD,MAKO;AACH,kBAAIA,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;AACA,mBAAKyE,+BAAL,CAAqClQ,SAArC;AACH;AACJ;;;0DAE+BA,S,EAAW;AACvC,gBAAImQ,kBAAkB,GAAG,CAAzB;;AAEA,iBAAK,IAAI1Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,SAAS,CAACK,MAA9B,EAAsC,EAAEZ,CAAxC,EAA2C;AACvC,kBAAI2I,KAAK,GAAGpI,SAAS,CAACP,CAAD,CAArB;;AAEA,kBAAI2I,KAAK,CAACyH,UAAV,EAAsB;AAClB,kBAAEM,kBAAF;AACH;;AAED,kBAAIA,kBAAkB,IAAI,CAA1B,EAA6B;AACzB,qBAAKF,uBAAL,GAA+B,IAA/B;AACA;AACH;AACJ;;AAAA;AACJ;;;sDAE2B;AAAA;;AACxB,iBAAKxV,QAAL,CAAc,YAAM;AAChB,cAAA,OAAI,CAACiP,cAAL;;AACA,cAAA,OAAI,CAAC9J,aAAL,CAAmBE,eAAnB,GAAqC,EAArC;;AAEA,kBAAI,OAAI,CAAC4B,YAAL,IAAqB,OAAI,CAACD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,gBAAA,OAAI,CAAC/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,sBAAIW,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AAEAW,kBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB,oBAAA,OAAI,CAACgI,uBAAL,CAA6BhI,KAA7B,EAAoC,CAAC/I,MAAD,CAApC;AACH,mBAFD;AAGH,iBAND;AAOH,eARD,MAQO;AACH,oBAAIW,SAAS,GAAG,OAAI,CAACyL,iCAAL,EAAhB;;AAEAzL,gBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB,kBAAA,OAAI,CAACgI,uBAAL,CAA6BhI,KAA7B,EAAoC,OAAI,CAACxI,aAAL,CAAmBV,UAAvD;AACH,iBAFD;AAGH;AACJ,aAnBD;AAoBH;;;kDAEuBkJ,K,EAAOlJ,U,EAAY;AAAA;;AACvC,gBAAIkJ,KAAK,CAACyH,UAAV,EAAsB;AAClB3Q,cAAAA,UAAU,CAACE,OAAX,CAAmB,UAACC,MAAD,EAAY;AAC3B,oBAAIgR,MAAM,GAAG,EAAb;AACAA,gBAAAA,MAAM,CAACjI,KAAP,GAAeA,KAAf;AACAiI,gBAAAA,MAAM,CAAC/D,MAAP,GAAgBjN,MAAM,CAACiN,MAAP,GAAgB,OAAI,CAACzQ,MAAL,CAAYU,QAAZ,CAAqBc,2BAArC,GAAmE+K,KAAK,CAACG,OAAzF;AACA8H,gBAAAA,MAAM,CAAChE,IAAP,GAAcgE,MAAM,CAAC/D,MAAP,GAAgB,OAAI,CAACzQ,MAAL,CAAYU,QAAZ,CAAqBO,kBAAnD;AACAuT,gBAAAA,MAAM,CAAC7B,MAAP,GAAgBpG,KAAK,CAAC6E,CAAtB;AACAoD,gBAAAA,MAAM,CAAChD,IAAP,GAAcgD,MAAM,CAAC7B,MAAP,GAAgB,OAAI,CAAC3S,MAAL,CAAYU,QAAZ,CAAqBO,kBAAnD;AACA,gBAAA,OAAI,CAAC2F,gBAAL,CAAsBkL,SAAtB,GAAkCvF,KAAK,CAAC5K,KAAxC;;AACA,gBAAA,OAAI,CAACiF,gBAAL,CAAsBmL,QAAtB,CAA+ByC,MAAM,CAAC/D,MAAtC,EAA8C+D,MAAM,CAAC7B,MAArD,EAA6D,OAAI,CAAC3S,MAAL,CAAYU,QAAZ,CAAqBO,kBAAlF,EAAsG,OAAI,CAACjB,MAAL,CAAYU,QAAZ,CAAqBO,kBAA3H;;AACA,gBAAA,OAAI,CAAC8C,aAAL,CAAmBE,eAAnB,CAAmCR,IAAnC,CAAwC+Q,MAAxC;AACH,eAVD;AAWH;AACJ;;;2CAEgB;AAAA;;AACb,gBAAI,CAAC,KAAKlO,SAAV,EAAqB;AACjB,mBAAKmO,wBAAL;AACH;;AAED,gBAAK,KAAKnO,SAAL,IAAkB,KAAKpC,UAAL,CAAgBC,SAAhB,CAA0BK,MAA1B,GAAmC,CAAtD,IACC,CAAC,KAAK8B,SAAN,IAAmB,KAAKpC,UAAL,CAAgBuD,IAAhB,CAAqBjD,MAArB,GAA8B,CADtD,EAC0D;AACtD,mBAAKkQ,SAAL,GAAiB,IAAjB;AAEA,mBAAK9V,QAAL,CAAc,YAAM;AAChB,gBAAA,OAAI,CAACsI,gBAAL,GAAwB,OAAI,CAACnD,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,OAAI,CAACxE,MAAL,CAAYuC,UAAZ,CAAuBK,eAA9D,GACpB,CAAC,OAAI,CAACmB,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,CAAxC,IAA6C,OAAI,CAACxE,MAAL,CAAYuC,UAAZ,CAAuBM,oBADxE;AAEA,gBAAA,OAAI,CAACoE,eAAL,GAAuB,CAAC,OAAI,CAAC/C,UAAL,CAAgByQ,gBAAhB,CAAiCnQ,MAAjC,GAA0C,CAA3C,IAAgD,OAAI,CAACoQ,uBAAL,EAAvE;;AACA,gBAAA,OAAI,CAACpP,KAAL,CAAWoC,MAAX;;AAEA,oBAAIiN,aAAa,GAAG,OAAI,CAACrO,cAAL,CAAoB,eAApB,CAApB;;AAEA,oBAAIqO,aAAJ,EAAmB;AACf,kBAAA,OAAI,CAAC3Q,UAAL,CAAgB4Q,cAAhB,GAAiCD,aAAa,CAACE,YAA/C;;AACA,kBAAA,OAAI,CAACC,qBAAL;;AACA,kBAAA,OAAI,CAACC,0BAAL;;AACA,kBAAA,OAAI,CAACC,kBAAL;;AACA,kBAAA,OAAI,CAACC,mBAAL;AACH;AACJ,eAfD;AAgBH,aApBD,MAoBO;AACH,mBAAKT,SAAL,GAAiB,KAAjB;AACH;AACJ;;;+CAEoBU,G,EAAK;AACtB,iBAAKpR,cAAL,CAAoBqR,aAApB,GAAoC,KAAKC,WAAL,CAAiBF,GAAjB,EAAsB,KAAKvO,eAA3B,CAApC;;AAEA,gBAAI,KAAK7C,cAAL,CAAoBuR,cAAxB,EAAwC;AACpC,mBAAKC,oBAAL;AACH,aAFD,MAEO;AACH,mBAAKC,wCAAL;AACH;AACJ;;;iDAEsB;AAAA;;AACnB,iBAAKhC,qBAAL,GAA6B,IAA7B,CADmB,CAEnB;;AACA,gBAAIiC,WAAW,GAAG7Q,IAAI,CAACC,KAAL,CAAW,KAAK9E,MAAL,CAAY+B,SAAZ,CAAsBO,oBAAtB,GAA6C,KAAKtC,MAAL,CAAY+B,SAAZ,CAAsBG,QAA9E,CAAlB;AACA,gBAAI4H,KAAK,GAAGjF,IAAI,CAACC,KAAL,CAAW,CAAC,KAAKd,cAAL,CAAoBqR,aAApB,CAAkCzD,CAAlC,GAAsC,KAAK5N,cAAL,CAAoB2R,oBAA3D,IAAmF,KAAK3V,MAAL,CAAY+B,SAAZ,CAAsBG,QAApH,CAAZ;AACA4H,YAAAA,KAAK,GAAGjF,IAAI,CAACG,GAAL,CAAS8E,KAAT,EAAgB,IAAI4L,WAApB,CAAR;AACA5L,YAAAA,KAAK,GAAGjF,IAAI,CAACE,GAAL,CAAS+E,KAAT,EAAgB,KAAK9F,cAAL,CAAoBR,MAApB,CAA2BwB,GAA3B,GAAiC0Q,WAAjD,CAAR;AAEA,iBAAK1R,cAAL,CAAoBR,MAApB,CAA2B2G,QAA3B,CAAoC5G,OAApC,CAA4C,UAAC5B,KAAD,EAAQ2I,SAAR,EAAsB;AAC9D,kBAAIA,SAAS,IAAI,OAAI,CAACtG,cAAL,CAAoB4R,WAApB,CAAgCtL,SAAjD,EAA4D;AACxD,oBAAIR,KAAK,IAAI,OAAI,CAAC9F,cAAL,CAAoB4R,WAApB,CAAgCtL,SAAhC,CAA0CtF,GAAvD,EAA4D;AACxD;AACA,sBAAIsF,SAAS,CAACvF,GAAV,IAAiB,OAAI,CAACf,cAAL,CAAoB4R,WAApB,CAAgCtL,SAAhC,CAA0CtF,GAA/D,EAAoE;AAChE8E,oBAAAA,KAAK,GAAGjF,IAAI,CAACE,GAAL,CAAS+E,KAAT,EAAgBQ,SAAS,CAACtF,GAAV,GAAgB0Q,WAAhC,CAAR;AACApL,oBAAAA,SAAS,CAACvF,GAAV,GAAgB+E,KAAhB;AACH;AACJ,iBAND,MAMO;AACH;AACA,sBAAI,OAAI,CAAC9F,cAAL,CAAoB4R,WAApB,CAAgCtL,SAAhC,CAA0CvF,GAA1C,IAAiD,CAArD,EAAwD;AACpD;AACA,wBAAIuF,SAAS,CAACvF,GAAV,IAAiB,OAAI,CAACf,cAAL,CAAoB4R,WAApB,CAAgCtL,SAAhC,CAA0CtF,GAA/D,EAAoE;AAChEsF,sBAAAA,SAAS,CAACvF,GAAV,GAAgB+E,KAAhB;AACH;AACJ,mBALD,MAKO;AACH;AACA,wBAAIQ,SAAS,CAACtF,GAAV,IAAiB,OAAI,CAAChB,cAAL,CAAoB4R,WAApB,CAAgCtL,SAAhC,CAA0CvF,GAA/D,EAAoE;AAChE+E,sBAAAA,KAAK,GAAGjF,IAAI,CAACG,GAAL,CAAS8E,KAAT,EAAgBQ,SAAS,CAACtF,GAAV,GAAgB0Q,WAAhC,CAAR;AACH,qBAJE,CAMH;;;AACA,wBAAIpL,SAAS,CAACvF,GAAV,IAAiB,OAAI,CAACf,cAAL,CAAoB4R,WAApB,CAAgCtL,SAAhC,CAA0CtF,GAA/D,EAAoE;AAChEsF,sBAAAA,SAAS,CAACvF,GAAV,GAAgB+E,KAAhB;AACH;AACJ;AACJ;AACJ;AACJ,aA5BD;AA8BA,iBAAK9F,cAAL,CAAoB4R,WAApB,CAAgCtL,SAAhC,CAA0CtF,GAA1C,GAAgD8E,KAAhD;AACA,iBAAK+L,aAAL;AACH;;;qEAE0C;AACvC,iBAAKC,eAAL,GAAuB,SAAvB;AACA,iBAAK9R,cAAL,CAAoB4R,WAApB,GAAkC,IAAlC;AACA,gBAAIG,IAAI,GAAG,KAAK/R,cAAL,CAAoBgS,OAApB,GAA8B,KAAKhW,MAAL,CAAY+B,SAAZ,CAAsBM,kBAAtB,GAA2C,CAApF;AACA,gBAAI4T,OAAO,GAAG,KAAKjS,cAAL,CAAoBgS,OAApB,GAA8B,KAAKhW,MAAL,CAAY+B,SAAZ,CAAsBM,kBAAtB,GAA2C,CAAvF;;AAEA,gBAAI,KAAKsJ,SAAL,CAAe,KAAK3H,cAAL,CAAoBqR,aAApB,CAAkCjE,CAAjD,EAAoD2E,IAApD,EAA0DE,OAA1D,CAAJ,EAAwE;AACpE,mBAAK,IAAIrS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKI,cAAL,CAAoBkS,gBAApB,CAAqC1R,MAAzD,EAAiE,EAAEZ,CAAnE,EAAsE;AAClE,oBAAIuS,GAAG,GAAG,KAAKnS,cAAL,CAAoBkS,gBAApB,CAAqCtS,CAArC,CAAV;AACA,oBAAIwS,KAAK,GAAGD,GAAG,CAACvE,CAAJ,GAAQ,KAAK5R,MAAL,CAAY+B,SAAZ,CAAsBO,oBAA1C;AACA,oBAAI+T,MAAM,GAAGF,GAAG,CAACvE,CAAJ,GAAQ,KAAK5R,MAAL,CAAY+B,SAAZ,CAAsBO,oBAA3C;;AAEA,oBAAI,KAAKqJ,SAAL,CAAe,KAAK3H,cAAL,CAAoBqR,aAApB,CAAkCzD,CAAjD,EAAoDwE,KAApD,EAA2DC,MAA3D,CAAJ,EAAwE;AACpE,uBAAKP,eAAL,GAAuB,SAAvB;AACA,uBAAK9R,cAAL,CAAoB4R,WAApB,GAAkCO,GAAlC;AACA;AACH;AACJ;AACJ;AACJ;;;iDAEsB;AACnB,gBAAI,KAAKnS,cAAL,CAAoB4R,WAAxB,EAAqC;AACjC,mBAAK5R,cAAL,CAAoBuR,cAApB,GAAqC,IAArC;AACH;AACJ;;;+CAEoB;AACjB,iBAAKvR,cAAL,CAAoBuR,cAApB,GAAqC,KAArC;AACA,iBAAKvR,cAAL,CAAoB4R,WAApB,GAAkC,IAAlC;AACA,iBAAKE,eAAL,GAAuB,SAAvB;AACH;;;+CAEoB;AACjB,iBAAKQ,uBAAL;AACH;;;oDAEyB;AACtB,iBAAKxI,YAAL;AACA,iBAAKD,cAAL;AACA,iBAAK0I,kBAAL;AACA,iBAAKC,iBAAL;AACA,iBAAK9B,SAAL,GAAiB,KAAjB;AACA,iBAAKN,uBAAL,GAA+B,KAA/B;AACH;;;8CAEmB;AAChB,iBAAKlQ,UAAL,CAAgBC,SAAhB,GAA4B,EAA5B;AACA,iBAAKsS,6BAAL;AACA,iBAAKC,4BAAL;AACH;;;0DAE+B;AAAA;;AAC5B,iBAAK3S,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,kBAAIA,MAAM,CAACmT,iBAAX,EAA8B;AAC1BnT,gBAAAA,MAAM,CAAC4I,qBAAP,CAA6B5B,GAA7B,CAAiC,OAAI,CAACoM,sBAAtC,EAA8DpT,MAAM,CAACmT,iBAArE;AACAnT,gBAAAA,MAAM,CAACmT,iBAAP,GAA2B,IAA3B;AACH;;AAED,kBAAIxS,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AAEA,kBAAIW,SAAJ,EAAe;AACXA,gBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzBA,kBAAAA,KAAK,CAACyH,UAAN,GAAmB,KAAnB;AACAzH,kBAAAA,KAAK,CAACsK,kBAAN,GAA2B,IAA3B;AACH,iBAHD;AAIH;AACJ,aAdD;AAeH;;;yDAE8B;AAC3B,gBAAI,KAAK9S,aAAL,CAAmB4S,iBAAvB,EAA0C;AACtC,mBAAK5S,aAAL,CAAmBqI,qBAAnB,CAAyC5B,GAAzC,CAA6C,KAAKoM,sBAAlD,EAA0E,KAAK7S,aAAL,CAAmB4S,iBAA7F;AACA,mBAAK5S,aAAL,CAAmB4S,iBAAnB,GAAuC,IAAvC;AACH;;AAED,gBAAIxS,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;AAEAzL,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzBA,cAAAA,KAAK,CAACyH,UAAN,GAAmB,KAAnB;AACAzH,cAAAA,KAAK,CAACsK,kBAAN,GAA2B,IAA3B;AACH,aAHD;AAIH;;;oDAEyB;AACtB,iBAAKP,uBAAL;AACH;;;yCAEc;AACX,iBAAKhQ,SAAL,GAAiB,CAAC,KAAKA,SAAvB;AACA,iBAAKgQ,uBAAL;AACH;;;gDAEqB;AAClB,iBAAKM,sBAAL,GAA8B,KAAKzQ,iBAAnC;;AAEA,gBAAI,KAAKN,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKgR,0BAAL;AACH,aAFD,MAEO;AACH,mBAAKC,4BAAL;AACH;;AAED,iBAAKC,mBAAL;AACA,iBAAK5C,uBAAL,GAA+B,KAA/B;AACA,iBAAKtG,YAAL;AACA,iBAAKmJ,yBAAL;AACA,iBAAKpD,cAAL;AACH;;;uDAE4B;AAAA;;AACzB,iBAAK9P,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,kBAAIW,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AAEA,kBAAI,CAACA,MAAM,CAACmT,iBAAZ,EAA+B;AAC3BnT,gBAAAA,MAAM,CAACmT,iBAAP,GAA2B,EAA3B;AAEAxS,gBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB/I,kBAAAA,MAAM,CAACmT,iBAAP,CAAyBlT,IAAzB,CAA8B8I,KAA9B;AACH,iBAFD;AAGH;;AAED,cAAA,OAAI,CAAC2K,0BAAL,CAAgC/S,SAAhC;AACH,aAZD;AAaH;;;qDAE0BA,S,EAAW;AAClC,gBAAIgT,gBAAgB,GAAG,EAAvB;AAEAhT,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB4K,cAAAA,gBAAgB,CAAC1T,IAAjB,CAAsB8I,KAAtB;AACH,aAFD;AAIApI,YAAAA,SAAS,CAACK,MAAV,GAAmB,CAAnB;AACA,iBAAK4S,uBAAL,CAA6BD,gBAA7B,EAA+ChT,SAA/C;AACH;;;kDAEuBgT,gB,EAAkBhT,S,EAAW;AACjD,gBAAIkT,WAAJ;AAEAF,YAAAA,gBAAgB,CAAC5T,OAAjB,CAAyB,UAACgJ,KAAD,EAAW;AAChC,kBAAIA,KAAK,CAACyH,UAAV,EAAsB;AAClB,oBAAIqD,WAAJ,EAAiB;AACb9K,kBAAAA,KAAK,CAACE,YAAN,CAAmBlJ,OAAnB,CAA2B,UAACqG,QAAD,EAAc;AACrCyN,oBAAAA,WAAW,CAAC5K,YAAZ,CAAyBhJ,IAAzB,CAA8BmG,QAA9B;AACH,mBAFD;AAGH,iBAJD,MAIO;AACHyN,kBAAAA,WAAW,GAAGhS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAegH,KAAf,CAAX,CAAd;AACApI,kBAAAA,SAAS,CAACV,IAAV,CAAe4T,WAAf;AACH;AACJ,eATD,MASO;AACHlT,gBAAAA,SAAS,CAACV,IAAV,CAAe8I,KAAf;AACH;AACJ,aAbD;AAcH;;;gDAEqB;AAAA;;AAClB,iBAAKrI,UAAL,CAAgBC,SAAhB,GAA4B,EAA5B;;AAEA,gBAAI,KAAK0B,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,oBAAIW,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AACA,gBAAA,OAAI,CAAC8T,0BAAL,CAAgCnT,SAAhC;AACH,eAHD;AAIH,aALD,MAKO;AACH,mBAAKmT,0BAAL,CAAgC,KAAK1H,iCAAL,EAAhC;AACH;AACJ;;;qDAE0BzL,S,EAAW;AAAA;;AAClCA,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB,kBAAIA,KAAK,CAACyH,UAAV,EAAsB;AAClB,gBAAA,OAAI,CAACE,eAAL,CAAqB3H,KAArB;AACH;AACJ,aAJD;AAKH;;;0CAEeA,K,EAAO;AAAA;;AACnB,gBAAIwH,UAAU,GAAG,EAAjB;AACAA,YAAAA,UAAU,CAACtH,YAAX,GAA0B,EAA1B;AACAsH,YAAAA,UAAU,CAACH,aAAX,GAA2BrH,KAA3B;AAEAA,YAAAA,KAAK,CAACE,YAAN,CAAmBlJ,OAAnB,CAA2B,UAACgU,gBAAD,EAAsB;AAC7C,kBAAIC,kBAAkB,GAAGhZ,CAAC,CAAC+Q,KAAF,CAAQgI,gBAAgB,CAAClU,UAAzB,EAAqC,UAACG,MAAD,EAAY;AACtE,uBAAOA,MAAM,CAACiE,IAAP,CAAYjD,MAAnB;AACH,eAFwB,CAAzB;;AAIA,cAAA,OAAI,CAACN,UAAL,CAAgByQ,gBAAhB,GAAmC1C,KAAK,CAAChK,IAAN,CAAWgK,KAAK,CAACuF,kBAAkB,CAAC/P,IAAnB,CAAwBjD,MAAzB,CAAL,CAAsC0N,IAAtC,EAAX,CAAnC;;AACA,kBAAIuF,aAAa,GAAG,OAAI,CAACC,gBAAL,CAAsBH,gBAAtB,EAAwC,OAAI,CAACrT,UAAL,CAAgByQ,gBAAxD,CAApB;;AACAZ,cAAAA,UAAU,CAACtH,YAAX,CAAwBhJ,IAAxB,CAA6BgU,aAA7B;AACH,aARD;AAUA,iBAAKvT,UAAL,CAAgBC,SAAhB,CAA0BV,IAA1B,CAA+BsQ,UAA/B;AACH;;;yDAE8B;AAAA;;AAC3B,gBAAI5P,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;;AAEA,gBAAI,CAAC,KAAK7L,aAAL,CAAmB4S,iBAAxB,EAA2C;AACvC,mBAAK5S,aAAL,CAAmB4S,iBAAnB,GAAuC,EAAvC;AAEAxS,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB,gBAAA,OAAI,CAACxI,aAAL,CAAmB4S,iBAAnB,CAAqClT,IAArC,CAA0C8I,KAA1C;AACH,eAFD;AAGH;;AAED,iBAAK2K,0BAAL,CAAgC/S,SAAhC;AACH;;;+CAEoB;AACjB,iBAAK6K,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACA,iBAAKsH,uBAAL;AACH;;;oDAEyB;AACtB,iBAAKC,kBAAL;;AAEA,gBAAI,KAAKxS,aAAL,CAAmBqI,qBAAvB,EAA8C;AAC1C,mBAAKrI,aAAL,CAAmBqI,qBAAnB,CAAyC7I,OAAzC,CAAiD,UAACgJ,KAAD,EAAW;AACxDA,gBAAAA,KAAK,CAACsK,kBAAN,GAA2B,EAA3B;AACH,eAFD;AAGH;;AAED,gBAAI,KAAK9S,aAAL,CAAmBV,UAAvB,EAAmC;AAC/B,mBAAKU,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9CA,gBAAAA,MAAM,CAAC4I,qBAAP,CAA6B7I,OAA7B,CAAqC,UAACgJ,KAAD,EAAW;AAC5CA,kBAAAA,KAAK,CAACsK,kBAAN,GAA2B,EAA3B;AACH,iBAFD;AAGH,eAJD;AAKH;AACJ;;;+CAEoB;AACjB,iBAAK7P,4BAAL,CAAkCgH,SAAlC,CAA4C,CAA5C,EAA+C,CAA/C,EAAkD,KAAKjH,2BAAL,CAAiCkH,KAAnF,EAA0F,KAAKlH,2BAAL,CAAiCmH,MAA3H;AACH;;;8CAEmBkH,G,EAAK;AACrB,gBAAI,KAAKuC,sBAAT,EAAiC;AAC7B,mBAAKnE,aAAL,GAAqB,IAArB;AACA,mBAAKqC,aAAL;AACH,aAHD,MAGO,IAAI,KAAKvP,SAAL,IAAkB,KAAKvC,aAAL,CAAmB6T,YAArC,IAAqD,KAAK5R,iBAAL,IAA0B,KAAKJ,QAAL,CAAcI,iBAAd,CAAgCE,KAAnH,EAA0H;AAC7H,mBAAKnC,aAAL,CAAmB8T,oBAAnB,GAA0C,IAA1C;AACA,mBAAK9T,aAAL,CAAmB+T,oBAAnB,GAA0C,KAAK/T,aAAL,CAAmBgU,oBAA7D;AACA,mBAAKhU,aAAL,CAAmBiU,cAAnB,GAAoC,KAAKjU,aAAL,CAAmB6T,YAAvD;AACH;AACJ;;;0CAEe;AACZ,iBAAK9Q,sBAAL,CAA4BkH,SAA5B,CAAsC,CAAtC,EAAyC,CAAzC,EAA4C,KAAKnH,eAAL,CAAqBoH,KAAjE,EAAwE,KAAKpH,eAAL,CAAqBqH,MAA7F;AACA,iBAAKlK,cAAL,CAAoBR,MAApB,GAA6B,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBkU,mBAAjD,CAA7B;AACA,iBAAKC,iBAAL;AACA,iBAAKC,iCAAL;AACA,iBAAKC,iBAAL;AACA,iBAAKC,4BAAL;AACH;;;8CAEmB;AAChB,iBAAKvR,sBAAL,CAA4BkJ,IAA5B,GAAmC,KAAKhQ,MAAL,CAAYU,QAAZ,CAAqBE,cAArB,GAAsC,UAAzE;AACA,iBAAKoD,cAAL,CAAoBsU,kBAApB,GAAyC,KAAKvU,aAAL,CAAmByK,eAAnB,GAAqC,KAAKxO,MAAL,CAAY+B,SAAZ,CAAsBC,2BAApG;AACA,iBAAK8E,sBAAL,CAA4ByR,SAA5B,GAAwC,CAAxC;AACA,iBAAKzR,sBAAL,CAA4BgL,SAA5B,GAAwC,OAAxC;AACA,iBAAKhL,sBAAL,CAA4BoM,WAA5B,GAA0C,MAA1C;AACA,iBAAKpM,sBAAL,CAA4BkJ,IAA5B,GAAmC,UAAU,KAAKhQ,MAAL,CAAYU,QAAZ,CAAqBE,cAA/B,GAAgD,UAAnF;AACA,iBAAK4X,yBAAL;AACA,iBAAKC,2BAAL;AACH;;;sDAE2B;AACxB,gBAAInN,UAAU,GAAG,YAAjB;AACA,gBAAIoN,iBAAiB,GAAG,KAAK5R,sBAAL,CAA4B2H,WAA5B,CAAwC,KAAKzK,cAAL,CAAoBR,MAApB,CAA2BzB,SAA3B,CAAqCiD,GAA7E,EAAkFiJ,KAA1G;AACA,gBAAI0K,kBAAkB,GAAG,KAAK7R,sBAAL,CAA4B2H,WAA5B,CAAwCnD,UAAxC,EAAoD2C,KAA7E;AACA,iBAAKjK,cAAL,CAAoB2R,oBAApB,GAA2C+C,iBAAiB,GAAG,KAAK1Y,MAAL,CAAY+B,SAAZ,CAAsBC,2BAA1C,GAAwE2W,kBAAkB,GAAG,CAAxI;AACA,iBAAK7R,sBAAL,CAA4B2L,QAA5B,CAAqCnH,UAArC,EAAiD,KAAKtH,cAAL,CAAoB2R,oBAApB,GAA2CgD,kBAAkB,GAAG,CAAjH,EAAoH,KAAK5U,aAAL,CAAmByK,eAAvI;AACA,iBAAKxK,cAAL,CAAoB4U,eAApB,GAAsC,KAAK5U,cAAL,CAAoBsU,kBAApB,GAAyC,KAAKtY,MAAL,CAAY+B,SAAZ,CAAsBE,kBAArG;AACA,iBAAK6E,sBAAL,CAA4B8L,SAA5B;AACA,iBAAK9L,sBAAL,CAA4B+L,MAA5B,CAAmC,KAAK7O,cAAL,CAAoB2R,oBAAvD,EAA6E,KAAK3R,cAAL,CAAoBsU,kBAAjG;AACA,iBAAKxR,sBAAL,CAA4BgM,MAA5B,CAAmC,KAAK9O,cAAL,CAAoB2R,oBAAvD,EAA6E,KAAK3R,cAAL,CAAoB4U,eAAjG;AACA,iBAAK9R,sBAAL,CAA4BqM,MAA5B;AACA,iBAAKrM,sBAAL,CAA4BiM,SAA5B;AACH;;;wDAE6B;AAC1B,iBAAK/O,cAAL,CAAoB6U,kBAApB,GAAyC,KAAK7U,cAAL,CAAoB2R,oBAApB,GACrC,KAAK3V,MAAL,CAAY+B,SAAZ,CAAsBG,QAAtB,IAAkC,KAAK8B,cAAL,CAAoBR,MAApB,CAA2BwB,GAA3B,GAAiC,CAAnE,CADJ;AAEA,gBAAI8T,MAAM,GAAG,KAAK9U,cAAL,CAAoB6U,kBAApB,GAAyC,KAAK7Y,MAAL,CAAY+B,SAAZ,CAAsBC,2BAA5E;AACA,gBAAI+W,MAAM,GAAG,KAAK/U,cAAL,CAAoB4U,eAApB,GAAsC,KAAK7U,aAAL,CAAmByK,eAAnB,GAAqC,CAAxF;AACA,gBAAIwK,WAAW,GAAG,KAAK5V,KAAL,CAAWC,UAAX,CAAsB,KAAKU,aAAL,CAAmBkU,mBAAzC,CAAlB;AACA,iBAAKnR,sBAAL,CAA4B2L,QAA5B,CAAqCuG,WAAW,CAAC/V,IAAjD,EAAuD6V,MAAvD,EAA+DC,MAA/D;AACA,iBAAKjS,sBAAL,CAA4B8L,SAA5B;AACA,iBAAK9L,sBAAL,CAA4B+L,MAA5B,CAAmC,KAAK7O,cAAL,CAAoB2R,oBAAvD,EAA6E,KAAK3R,cAAL,CAAoB4U,eAAjG;AACA,iBAAK9R,sBAAL,CAA4BgM,MAA5B,CAAmC,KAAK9O,cAAL,CAAoB6U,kBAAvD,EAA2E,KAAK7U,cAAL,CAAoB4U,eAA/F;AACA,iBAAK9R,sBAAL,CAA4BqM,MAA5B;AACA,iBAAKrM,sBAAL,CAA4BiM,SAA5B;AACH;;;8DAEmC;AAChC,iBAAKjM,sBAAL,CAA4BkJ,IAA5B,GAAmC,KAAKhQ,MAAL,CAAYU,QAAZ,CAAqBE,cAArB,GAAsC,UAAzE;AACA,gBAAIqY,eAAe,GAAG,KAAKjV,cAAL,CAAoBsU,kBAApB,GAAyC,KAAKvU,aAAL,CAAmByK,eAAnB,GAAqC,CAApG;AACA,iBAAK1H,sBAAL,CAA4B2L,QAA5B,CAAqC,KAAKzO,cAAL,CAAoBR,MAApB,CAA2BzB,SAA3B,CAAqCiD,GAA1E,EAA+E,CAA/E,EAAkFiU,eAAlF;AACA,gBAAIC,aAAa,GAAG,KAAKpS,sBAAL,CAA4B2H,WAA5B,CAAwC,KAAKzK,cAAL,CAAoBR,MAApB,CAA2BwB,GAAnE,EAAwEiJ,KAA5F;AACA,gBAAIkL,WAAW,GAAG,KAAKnV,cAAL,CAAoB4U,eAApB,GAAsC,KAAK5Y,MAAL,CAAY+B,SAAZ,CAAsBC,2BAA5D,GAA0F,KAAK+B,aAAL,CAAmByK,eAA/H;AACA,iBAAK1H,sBAAL,CAA4B2L,QAA5B,CAAqC,KAAKzO,cAAL,CAAoBR,MAApB,CAA2BwB,GAAhE,EAAqE,KAAKhB,cAAL,CAAoB6U,kBAApB,GAAyCK,aAAa,GAAG,CAA9H,EAAiIC,WAAjI;AACA,gBAAIC,OAAO,GAAG,KAAKpV,cAAL,CAAoB2R,oBAApB,GAA2C,KAAK5R,aAAL,CAAmByK,eAA9D,GAAgF,KAAKxO,MAAL,CAAY+B,SAAZ,CAAsBC,2BAApH;AACA,iBAAK8E,sBAAL,CAA4B2L,QAA5B,CAAqC,CAArC,EAAwC2G,OAAxC,EAAiDD,WAAjD;AACH;;;8CAEmB;AAAA;;AAChB,gBAAIE,aAAa,GAAG,KAAKrZ,MAAL,CAAY+B,SAAZ,CAAsBE,kBAAtB,GAA2C,KAAK+B,cAAL,CAAoBR,MAApB,CAA2BzB,SAA3B,CAAqCiD,GAApG;AAEA,iBAAKhB,cAAL,CAAoBR,MAApB,CAA2BzB,SAA3B,CAAqC0F,IAArC,CAA0ClE,OAA1C,CAAkD,UAAC+H,UAAD,EAAaxB,KAAb,EAAuB;AACrE,cAAA,OAAI,CAAChD,sBAAL,CAA4BgL,SAA5B,GAAwC,OAAI,CAACD,eAAL,CAAqB/H,KAArB,EAA4B,OAAI,CAAC9F,cAAL,CAAoBR,MAApB,CAA2B2G,QAAvD,CAAxC;AACA,kBAAIyH,CAAC,GAAG,OAAI,CAAC5N,cAAL,CAAoB2R,oBAApB,GAA2C,OAAI,CAAC3V,MAAL,CAAY+B,SAAZ,CAAsBG,QAAtB,GAAiC4H,KAApF;AACA,kBAAIsH,CAAC,GAAG,OAAI,CAACpN,cAAL,CAAoB4U,eAApB,GAAsCS,aAAa,GAAG/N,UAA9D;AACA,kBAAI4C,MAAM,GAAG,OAAI,CAAClK,cAAL,CAAoB4U,eAApB,GAAsCxH,CAAnD;AACA,kBAAIkI,SAAS,GAAG,OAAI,CAACtZ,MAAL,CAAY+B,SAAZ,CAAsBI,gBAAtC;;AAEA,kBAAI+L,MAAM,GAAGoL,SAAb,EAAwB;AACpBlI,gBAAAA,CAAC,GAAG,OAAI,CAACpN,cAAL,CAAoB4U,eAApB,GAAsCU,SAA1C;AACApL,gBAAAA,MAAM,GAAGoL,SAAT;AACH;;AAED,cAAA,OAAI,CAACxS,sBAAL,CAA4BiL,QAA5B,CAAqCH,CAArC,EAAwCR,CAAxC,EAA2C,OAAI,CAACpR,MAAL,CAAY+B,SAAZ,CAAsBG,QAAjE,EAA2EgM,MAA3E;AACH,aAbD;AAcH;;;yDAE8B;AAC3B,iBAAKpH,sBAAL,CAA4BoM,WAA5B,GAA0C,OAA1C;AACA,iBAAKqG,uBAAL;AACA,iBAAKC,0BAAL;AACH;;;oDAEyB;AACtB,iBAAKxV,cAAL,CAAoBgS,OAApB,GAA8B,KAAKhS,cAAL,CAAoB4U,eAApB,GAAsC,KAAK5Y,MAAL,CAAY+B,SAAZ,CAAsBK,2BAA1F;AACA,iBAAK0E,sBAAL,CAA4B8L,SAA5B;AACA,iBAAK9L,sBAAL,CAA4B+L,MAA5B,CAAmC,KAAK7O,cAAL,CAAoB2R,oBAAvD,EAA6E,KAAK3R,cAAL,CAAoBgS,OAAjG;AACA,iBAAKlP,sBAAL,CAA4BgM,MAA5B,CAAmC,KAAK9O,cAAL,CAAoB6U,kBAAvD,EAA2E,KAAK7U,cAAL,CAAoBgS,OAA/F;AACA,iBAAKlP,sBAAL,CAA4BqM,MAA5B;AACA,iBAAKrM,sBAAL,CAA4BiM,SAA5B;AACH;;;uDAE4B;AAAA;;AACzB,gBAAI0G,aAAa,GAAG,KAAKzV,cAAL,CAAoBgS,OAApB,GAA8B,KAAKhW,MAAL,CAAY+B,SAAZ,CAAsBM,kBAAtB,GAA2C,CAA7F;AACA,iBAAK2B,cAAL,CAAoBkS,gBAApB,GAAuC,EAAvC;AACA,gBAAItS,CAAC,GAAG,CAAR;AAEA,iBAAKI,cAAL,CAAoBR,MAApB,CAA2B2G,QAA3B,CAAoC5G,OAApC,CAA4C,UAAC5B,KAAD,EAAQ2I,SAAR,EAAsB;AAC9D,kBAAI6L,GAAG,GAAG,EAAV;AACAA,cAAAA,GAAG,CAAC7L,SAAJ,GAAgBA,SAAhB;AACA6L,cAAAA,GAAG,CAACvE,CAAJ,GAAQ,OAAI,CAAC5N,cAAL,CAAoB2R,oBAApB,GAA2C,OAAI,CAAC3V,MAAL,CAAY+B,SAAZ,CAAsBG,QAAtB,GAAiCoI,SAAS,CAACtF,GAA9F,CAH8D,CAK9D;;AACA,kBAAIpB,CAAC,GAAG,OAAI,CAACI,cAAL,CAAoBR,MAApB,CAA2B2G,QAA3B,CAAoCuP,IAApC,GAA2C,CAAnD,EAAsD;AAClD,gBAAA,OAAI,CAAC5S,sBAAL,CAA4B8L,SAA5B;;AACA,gBAAA,OAAI,CAAC9L,sBAAL,CAA4B+L,MAA5B,CAAmCsD,GAAG,CAACvE,CAAvC,EAA0C6H,aAA1C;;AACA,gBAAA,OAAI,CAAC3S,sBAAL,CAA4BgM,MAA5B,CAAmCqD,GAAG,CAACvE,CAAvC,EAA0C6H,aAAa,GAAG,OAAI,CAACzZ,MAAL,CAAY+B,SAAZ,CAAsBM,kBAAhF;;AACA,gBAAA,OAAI,CAACyE,sBAAL,CAA4BqM,MAA5B;;AACA,gBAAA,OAAI,CAACrM,sBAAL,CAA4BiM,SAA5B;;AACA,kBAAEnP,CAAF;AACH;;AAED,cAAA,OAAI,CAACI,cAAL,CAAoBkS,gBAApB,CAAqCzS,IAArC,CAA0C0S,GAA1C;AACH,aAhBD;AAiBH;;;8CAEmBf,G,EAAK;AACrB,gBAAI,KAAKrR,aAAL,CAAmBV,UAAvB,EAAmC;AAC/B,mBAAKsW,wBAAL,CAA8BvE,GAA9B;AACA,mBAAKwE,sBAAL;;AAEA,kBAAI,KAAK7V,aAAL,CAAmBkU,mBAAnB,IAA0C,CAA9C,EAAiD;AAC7C,oBAAI,KAAKtM,SAAL,CAAe,KAAK5H,aAAL,CAAmBsR,aAAnB,CAAiCjE,CAAhD,EAAmD,CAAnD,EAAsD,KAAKrN,aAAL,CAAmB2K,cAAzE,CAAJ,EAA8F;AAC1F,uBAAKiJ,sBAAL,GAA8B,IAA9B;AACA,uBAAKkC,0BAAL;AACH,iBAHD,MAGO;AACH,uBAAKC,mBAAL;AACH;AACJ,eAPD,MAOO;AACH,qBAAKA,mBAAL;AACH;;AAED,kBAAI,KAAKxT,SAAT,EAAoB;AAChB,qBAAKyT,gCAAL;AACH,eAFD,MAEO,IAAI,CAAC,KAAK/K,YAAN,IAAsB,CAAC,KAAKgL,gBAAhC,EAAkD;AACrD,qBAAKC,SAAL,CAAe7E,GAAf;AACH;AACJ,aApBD,MAoBO;AACH,mBAAK0E,mBAAL;AACH;AACJ;;;mDAEwB1E,G,EAAK;AAC1B,iBAAKrR,aAAL,CAAmBsR,aAAnB,GAAmC,KAAKC,WAAL,CAAiBF,GAAjB,EAAsB,KAAKzO,eAA3B,CAAnC;AACH;;;sCAEWyO,G,EAAK9N,M,EAAQ;AACrB,gBAAI4S,IAAI,GAAG5S,MAAM,CAAC6S,qBAAP,EAAX;AAEA,mBAAO;AACHvI,cAAAA,CAAC,EAAEwD,GAAG,CAACgF,OAAJ,GAAcF,IAAI,CAACG,IADnB;AAEHjJ,cAAAA,CAAC,EAAEgE,GAAG,CAACkF,OAAJ,GAAcJ,IAAI,CAACK;AAFnB,aAAP;AAIH;;;mDAEwB;AACrB,iBAAKxW,aAAL,CAAmBkU,mBAAnB,GAAyC,CAAC,CAA1C;;AAEA,iBAAK,IAAIjN,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,KAAKjH,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAtE,EAA8E,EAAEwG,WAAhF,EAA6F;AACzF,kBAAIxH,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B2H,WAA9B,CAAb;;AAEA,kBAAIxH,MAAJ,EAAY;AACR;AACA,oBAAI,KAAKgX,oBAAL,CAA0BhX,MAA1B,CAAJ,EAAuC;AACnC,uBAAKO,aAAL,CAAmBkU,mBAAnB,GAAyCjN,WAAzC;AACA,uBAAKjH,aAAL,CAAmBgU,oBAAnB,GAA0C,KAAKhU,aAAL,CAAmBsR,aAAnB,CAAiCzD,CAAjC,GAAqCpO,MAAM,CAACiN,MAAtF;AACA;AACH;AACJ;AACJ;AACJ;;;+CAEoBjN,M,EAAQ;AACzB,mBAAO,KAAKmI,SAAL,CAAe,KAAK5H,aAAL,CAAmBsR,aAAnB,CAAiCzD,CAAhD,EAAmDpO,MAAM,CAACiN,MAA1D,EAAkEjN,MAAM,CAACgN,IAAzE,CAAP;AACH;;;uDAE4B;AACzB,iBAAKnK,cAAL,GAAsB,SAAtB;AACH;;;gDAEqB;AAClB,iBAAKsR,sBAAL,GAA8B,KAA9B;AACA,iBAAKvR,8BAAL;AACH;;;6DAEkC;AAC/B,iBAAKrC,aAAL,CAAmB6T,YAAnB,GAAkC,IAAlC;AACA,iBAAK7T,aAAL,CAAmB0W,aAAnB,GAAmC,IAAnC;AACA,iBAAKC,iCAAL;;AAEA,gBAAI,KAAK3W,aAAL,CAAmBkU,mBAAnB,IAA0C,CAA9C,EAAiD;AAC7C,mBAAK0C,uBAAL;AACH;;AAED,gBAAI,KAAK3U,iBAAL,IAA0B,KAAKJ,QAAL,CAAcI,iBAAd,CAAgCC,KAA9D,EAAqE;AACjE,kBAAI,KAAKlC,aAAL,CAAmB6T,YAAvB,EAAqC;AACjC,oBAAI,KAAK5I,YAAL,IAAqB,KAAKnJ,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BE,QAAzE,EAAmF;AAC/E,uBAAK6U,oBAAL;AACH;;AAED,qBAAKC,kBAAL;AACH,eAND,MAMO;AACH,qBAAKtE,kBAAL;AACH;AACJ,aAVD,MAUO,IAAI,KAAKxS,aAAL,CAAmB8T,oBAAvB,EAA6C;AAChD,mBAAKiD,yCAAL;AACA,mBAAKC,sBAAL;AACH;AACJ;;;8DAEmC;AAChC,iBAAK,IAAIC,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,KAAKjX,aAAL,CAAmBE,eAAnB,CAAmCO,MAA3E,EAAmF,EAAEwW,WAArF,EAAkG;AAC9F,kBAAIxG,MAAM,GAAG,KAAKzQ,aAAL,CAAmBE,eAAnB,CAAmC+W,WAAnC,CAAb;;AAEA,kBAAI,KAAKrP,SAAL,CAAe,KAAK5H,aAAL,CAAmBsR,aAAnB,CAAiCzD,CAAhD,EAAmD4C,MAAM,CAAC/D,MAA1D,EAAkE+D,MAAM,CAAChE,IAAzE,KACA,KAAK7E,SAAL,CAAe,KAAK5H,aAAL,CAAmBsR,aAAnB,CAAiCjE,CAAhD,EAAmDoD,MAAM,CAAC7B,MAA1D,EAAkE6B,MAAM,CAAChD,IAAzE,CADJ,EACoF;AAChF,qBAAKnL,cAAL,GAAsB,SAAtB;AACA,qBAAKtC,aAAL,CAAmB0W,aAAnB,GAAmCjG,MAAnC;AACA;AACH;AACJ;AACJ;;;oDAEyB;AACtB,gBAAIrQ,SAAJ;;AAEA,gBAAI,KAAK0B,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,kBAAItC,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBkU,mBAAjD,CAAb;AACA9T,cAAAA,SAAS,GAAG,KAAKuL,kCAAL,CAAwClM,MAAxC,CAAZ;AACH,aAHD,MAGO;AACHW,cAAAA,SAAS,GAAG,KAAKyL,iCAAL,EAAZ;AACH;;AAED,mBAAO,KAAKqL,kCAAL,CAAwC9W,SAAxC,CAAP;AACH;;;6DAEkCA,S,EAAW;AAC1C,iBAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,SAAS,CAACK,MAA9B,EAAsC,EAAEZ,CAAxC,EAA2C;AACvC,kBAAI2I,KAAK,GAAGpI,SAAS,CAACP,CAAD,CAArB;;AAEA,kBAAI,KAAKsX,mBAAL,CAAyB3O,KAAzB,CAAJ,EAAqC;AACjC,uBAAO,IAAP;AACH;AACJ;;AAED,mBAAO,KAAP;AACH;;;8CAEmBA,K,EAAO;AACvB,gBAAI,KAAKZ,SAAL,CAAe,KAAK5H,aAAL,CAAmBsR,aAAnB,CAAiCjE,CAAhD,EAAmD7E,KAAK,CAAC6E,CAAzD,EAA4D7E,KAAK,CAAC6E,CAAN,GAAU,KAAKpR,MAAL,CAAYU,QAAZ,CAAqBO,kBAA3F,CAAJ,EAAoH;AAChH,mBAAK8C,aAAL,CAAmB6T,YAAnB,GAAkCrL,KAAlC;AACA,mBAAKsN,0BAAL;AACA,qBAAO,IAAP;AACH;AACJ;;;iDAEsB;AACnB,gBAAIzM,cAAc,GAAG,KAAKrJ,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBkU,mBAAjD,CAArB;AACA,gBAAI9T,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;;AAEA,iBAAK,IAAIhD,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGzI,SAAS,CAACK,MAAhD,EAAwD,EAAEoI,UAA1D,EAAsE;AAClE,kBAAIK,cAAc,GAAG9I,SAAS,CAACyI,UAAD,CAAT,CAAsBH,YAAtB,CAAmC,CAAnC,EAAsCpJ,UAAtC,CAAiD,KAAKU,aAAL,CAAmBkU,mBAApE,CAArB;;AAEA,mBAAK,IAAIkD,mBAAmB,GAAG,CAA/B,EAAkCA,mBAAmB,GAAG/N,cAAc,CAACC,uBAAf,CAAuC7I,MAA/F,EAAuG,EAAE2W,mBAAzG,EAA8H;AAC1H,oBAAIzN,UAAU,GAAGN,cAAc,CAACC,uBAAf,CAAuC8N,mBAAvC,CAAjB;AACA,oBAAInR,KAAK,GAAGiD,cAAc,CAACxF,IAAf,CAAoBiG,UAApB,CAAZ;;AAEA,oBAAI1D,KAAJ,EAAW;AACP,sBAAI,KAAKoR,wBAAL,CAA8BpR,KAA9B,CAAJ,EAA0C;AACtC,yBAAKjG,aAAL,CAAmBsX,iBAAnB,GAAuC3N,UAAvC;AACA;AACH;AACJ;AACJ;AACJ;AACJ;;;mDAEwB1D,K,EAAO;AAC5B,mBAAO,KAAK2B,SAAL,CAAe,KAAK5H,aAAL,CAAmBsR,aAAnB,CAAiCzD,CAAhD,EAAmD5H,KAAK,CAAC4H,CAAzD,EAA4D5H,KAAK,CAAC4H,CAAN,GAAU,KAAK5R,MAAL,CAAYU,QAAZ,CAAqBK,UAA3F,CAAP;AACH;;;+CAEoB;AAAA;;AACjB,iBAAKwV,kBAAL;AACA,iBAAKvP,4BAAL,CAAkCkM,WAAlC,GAAgD,KAAKlT,MAAL,CAAY8B,aAAZ,CAA0BH,KAA1E;;AAEA,gBAAI,KAAKkE,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKwV,wBAAL,CAA8B,KAAKvX,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBkU,mBAAjD,CAA9B;AACH,aAFD,MAEO;AACH,mBAAKlU,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASwH,WAAT,EAAyB;AAC3D,gBAAA,OAAI,CAACsQ,wBAAL,CAA8B9X,MAA9B,EAAsCwH,WAAtC;AACH,eAFD;AAGH;;AAED,iBAAKuQ,qBAAL;AACH;;;mDAEwBnO,c,EAAgBpC,W,EAAa;AAClD,gBAAIwQ,eAAe,GAAG,KAAKC,sBAAL,CAA4BrO,cAA5B,EAA4C,KAAKrJ,aAAL,CAAmB6T,YAA/D,CAAtB;AACA,gBAAI8D,aAAJ;;AAEA,gBAAI,KAAK1M,YAAL,IAAqB,KAAKnJ,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BE,QAArE,IACAiF,WAAW,IAAI,IADf,IACuBA,WAAW,IAAI,KAAKjH,aAAL,CAAmBkU,mBAD7D,EACkF;AAC9EyD,cAAAA,aAAa,GAAG,KAAKC,qCAAL,CAA2CvO,cAA3C,EAA2DpC,WAA3D,CAAhB;AACH,aAHD,MAGO;AACH0Q,cAAAA,aAAa,GAAGtO,cAAc,CAACqD,MAAf,GAAwB,KAAK1M,aAAL,CAAmBgU,oBAA3D;AACH;;AAED,iBAAK6D,qBAAL,CAA2BxO,cAA3B,EAA2CoO,eAA3C,EAA4DE,aAA5D;AACH;;;gEAEqCtO,c,EAAgBpC,W,EAAa;AAC/D,gBAAI6Q,kBAAkB,GAAG,CAAzB;;AAEA,iBAAK,IAAIV,mBAAmB,GAAG,CAA/B,EAAkCA,mBAAmB,GAAG/N,cAAc,CAACC,uBAAf,CAAuC7I,MAA/F,EAAuG,EAAE2W,mBAAzG,EAA8H;AAC1H,kBAAIW,iBAAiB,GAAG1O,cAAc,CAACC,uBAAf,CAAuC8N,mBAAvC,CAAxB;;AAEA,kBAAI,KAAKxP,SAAL,CAAe,KAAK5H,aAAL,CAAmBsX,iBAAlC,EAAqDQ,kBAArD,EAAyEC,iBAAzE,CAAJ,EAAiG;AAC7F,oBAAI3X,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;;AAEA,qBAAK,IAAIhD,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGzI,SAAS,CAACK,MAAhD,EAAwD,EAAEoI,UAA1D,EAAsE;AAClE,sBAAIK,cAAc,GAAG9I,SAAS,CAACyI,UAAD,CAAT,CAAsBH,YAAtB,CAAmC,CAAnC,EAAsCpJ,UAAtC,CAAiD2H,WAAjD,CAArB;AACA,sBAAIhB,KAAK,GAAGiD,cAAc,CAACxF,IAAf,CAAoB2F,cAAc,CAACC,uBAAf,CAAuC8N,mBAAvC,CAApB,CAAZ;;AAEA,sBAAInR,KAAJ,EAAW;AACP,2BAAOA,KAAK,CAAC4H,CAAb;AACH;AACJ;AACJ;;AAEDiK,cAAAA,kBAAkB,GAAGC,iBAArB;AACH;AACJ;;;iDAEsBtY,M,EAAQ+I,K,EAAO;AAClC,gBAAIiP,eAAe,GAAGjP,KAAK,CAAC6E,CAAN,GAAU,KAAKpR,MAAL,CAAYU,QAAZ,CAAqBU,mBAArB,GAA2C,CAA3E;AACA,iBAAK4F,4BAAL,CAAkC4L,SAAlC;AACA,iBAAK5L,4BAAL,CAAkC6L,MAAlC,CAAyCrP,MAAM,CAACiN,MAAhD,EAAwD+K,eAAxD;AACA,iBAAKxU,4BAAL,CAAkC8L,MAAlC,CAAyCtP,MAAM,CAACgN,IAAhD,EAAsDgL,eAAtD;AACA,iBAAKxU,4BAAL,CAAkCmM,MAAlC;AACA,iBAAKnM,4BAAL,CAAkC+L,SAAlC;AACA,mBAAOyI,eAAP;AACH;;;gDAEqBhY,M,EAAQgY,e,EAAiBE,a,EAAe;AAC1D,iBAAK1U,4BAAL,CAAkC4L,SAAlC;AACA,iBAAK5L,4BAAL,CAAkC6L,MAAlC,CAAyC6I,aAAzC,EAAwDF,eAAxD;AACA,iBAAKxU,4BAAL,CAAkC8L,MAAlC,CAAyC4I,aAAzC,EAAwD,KAAK3X,aAAL,CAAmB6T,YAAnB,CAAgCxG,CAAxF;AACA,iBAAKpK,4BAAL,CAAkCmM,MAAlC;AACA,iBAAKnM,4BAAL,CAAkC+L,SAAlC;AACH;;;kDAEuB;AACpB,iBAAK,IAAI/H,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,KAAKjH,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAtE,EAA8E,EAAEwG,WAAhF,EAA6F;AACzF,kBAAIoC,cAAc,GAAG,KAAKrJ,aAAL,CAAmBV,UAAnB,CAA8B2H,WAA9B,CAArB,CADyF,CAGzF;;AACA,kBAAI7G,SAAS,GAAG,KAAKuL,kCAAL,CAAwCtC,cAAxC,CAAhB;;AAEA,mBAAK,IAAIR,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGzI,SAAS,CAACK,MAAhD,EAAwD,EAAEoI,UAA1D,EAAsE;AAClE,oBAAIK,cAAc,GAAG9I,SAAS,CAACyI,UAAD,CAAT,CAAsBH,YAAtB,CAAmC,CAAnC,EAAsCpJ,UAAtC,CAAiD2H,WAAjD,CAArB;;AAEA,oBAAI,KAAKgE,YAAT,EAAuB;AACnB,uBAAK,IAAImM,mBAAmB,GAAG,CAA/B,EAAkCA,mBAAmB,GAAG/N,cAAc,CAACC,uBAAf,CAAuC7I,MAA/F,EAAuG,EAAE2W,mBAAzG,EAA8H;AAC1H,wBAAInR,KAAK,GAAGiD,cAAc,CAACxF,IAAf,CAAoB2F,cAAc,CAACC,uBAAf,CAAuC8N,mBAAvC,CAApB,CAAZ;;AAEA,wBAAInR,KAAJ,EAAW;AACP,0BAAI,KAAK+R,wCAAL,CAA8C/R,KAA9C,CAAJ,EAA0D;AACtD;AACH;AACJ;AACJ;AACJ,iBAVD,MAUO;AACH,uBAAK,IAAI0D,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGT,cAAc,CAACxF,IAAf,CAAoBjD,MAA1D,EAAkE,EAAEkJ,UAApE,EAAgF;AAC5E,wBAAI1D,KAAK,GAAGiD,cAAc,CAACxF,IAAf,CAAoBiG,UAApB,CAAZ;;AAEA,wBAAI,KAAKqO,wCAAL,CAA8C/R,KAA9C,CAAJ,EAA0D;AACtD;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;;mEAEwCA,K,EAAO;AAC5C,gBAAI,KAAKoR,wBAAL,CAA8BpR,KAA9B,CAAJ,EAA0C;AACtC,mBAAKhD,4BAAL,CAAkCgJ,IAAlC,GAAyC,YAAY,KAAKhQ,MAAL,CAAYU,QAAZ,CAAqBG,YAAjC,GAAgD,UAAzF;AACA,mBAAKmG,4BAAL,CAAkC8K,SAAlC,GAA8C,OAA9C;AACA,kBAAIvJ,IAAI,GAAG,KAAK4G,mBAAL,CAAyBnF,KAAK,CAACzB,IAAN,GAAa,IAAtC,CAAX;AACA,kBAAI6I,CAAC,GAAG,KAAKrN,aAAL,CAAmB2K,cAAnB,GAAoC,KAAK3K,aAAL,CAAmBgM,cAAvD,GAAwE,KAAK/P,MAAL,CAAYU,QAAZ,CAAqBI,8BAArG;AACA,kBAAI8Q,CAAC,GAAG/M,IAAI,CAACG,GAAL,CAAS,CAAT,EAAY,KAAKjB,aAAL,CAAmBsR,aAAnB,CAAiCzD,CAAjC,GAAqC,KAAK7N,aAAL,CAAmBqL,WAAnB,GAAiC,CAAlF,CAAR;AACA,mBAAKpI,4BAAL,CAAkCyL,QAAlC,CAA2ClK,IAA3C,EAAiDqJ,CAAjD,EAAoDR,CAApD;AACA,qBAAO,IAAP;AACH,aARD,MAQO;AACH,qBAAO,KAAP;AACH;AACJ;;;sEAE2C;AAAA;;AACxC,iBAAKrN,aAAL,CAAmBiU,cAAnB,CAAkCgE,oBAAlC,GAAyD,KAAKjY,aAAL,CAAmBkU,mBAA5E;AACA,iBAAKlU,aAAL,CAAmBiU,cAAnB,CAAkCnB,kBAAlC,GAAuD,EAAvD;AACA,gBAAI5J,cAAc,GAAG,KAAKlJ,aAAL,CAAmBiU,cAAnB,CAAkCvL,YAAlC,CAA+C,CAA/C,EAAkDpJ,UAAlD,CAA6D,KAAKU,aAAL,CAAmBkU,mBAAhF,CAArB;AACA,gBAAI7K,cAAc,GAAG,KAAKrJ,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBkU,mBAAjD,CAArB;AACA,gBAAIxH,MAAM,GAAGrD,cAAc,CAACqD,MAAf,GAAwB,KAAK1M,aAAL,CAAmB+T,oBAAxD;AACA,gBAAItH,IAAI,GAAGpD,cAAc,CAACqD,MAAf,GAAwB,KAAK1M,aAAL,CAAmBgU,oBAAtD;;AAEA,gBAAItH,MAAM,GAAGD,IAAb,EAAmB;AACf,kBAAIkD,IAAI,GAAGjD,MAAX;AACAA,cAAAA,MAAM,GAAGD,IAAT;AACAA,cAAAA,IAAI,GAAGkD,IAAP;AACH;;AAEDzG,YAAAA,cAAc,CAACxF,IAAf,CAAoBlE,OAApB,CAA4B,UAACyG,KAAD,EAAQ0D,UAAR,EAAuB;AAC/C,kBAAI,OAAI,CAAC/B,SAAL,CAAe3B,KAAK,CAAC4H,CAArB,EAAwBnB,MAAxB,EAAgCD,IAAhC,CAAJ,EAA2C;AACvC,gBAAA,OAAI,CAACzM,aAAL,CAAmBiU,cAAnB,CAAkCnB,kBAAlC,CAAqDpT,IAArD,CAA0DiK,UAA1D;AACH;AACJ,aAJD;;AAMA,gBAAI,KAAK3J,aAAL,CAAmBiU,cAAnB,CAAkCnB,kBAAlC,CAAqDrS,MAArD,GAA8D,CAAlE,EAAqE;AACjE,mBAAKyX,2BAAL;AACH;AACJ;;;wDAE6B;AAC1B,gBAAIjE,cAAc,GAAG,KAAKjU,aAAL,CAAmBiU,cAAxC;AACA,gBAAIxU,MAAM,GAAGwU,cAAc,CAACvL,YAAf,CAA4B,CAA5B,EAA+BpJ,UAA/B,CAA0C,KAAKU,aAAL,CAAmBkU,mBAA7D,CAAb;AACA,gBAAIpB,kBAAkB,GAAGmB,cAAc,CAACnB,kBAAxC;AACA,gBAAIqF,UAAU,GAAG1Y,MAAM,CAACiE,IAAP,CAAYoP,kBAAkB,CAAC,CAAD,CAA9B,CAAjB;AACAmB,YAAAA,cAAc,CAACmE,kBAAf,GAAoC,KAAKhN,mBAAL,CAAyB+M,UAAU,CAAC3T,IAAX,GAAkB,IAA3C,CAApC;AACA,gBAAI6T,QAAQ,GAAG5Y,MAAM,CAACiE,IAAP,CAAYoP,kBAAkB,CAACA,kBAAkB,CAACrS,MAAnB,GAA4B,CAA7B,CAA9B,CAAf;AACAwT,YAAAA,cAAc,CAACqE,gBAAf,GAAkC,KAAKlN,mBAAL,CAAyBiN,QAAQ,CAAC7T,IAAT,GAAgB,IAAzC,CAAlC;AACH;;;mDAEwB;AAAA;;AACrB,iBAAKgO,kBAAL;AACA,iBAAKvP,4BAAL,CAAkCkM,WAAlC,GAAgD,KAAKlT,MAAL,CAAY8B,aAAZ,CAA0BH,KAA1E;AACA,iBAAKqF,4BAAL,CAAkC8K,SAAlC,GAA8C,KAAK9R,MAAL,CAAY8B,aAAZ,CAA0BH,KAAxE;;AAEA,gBAAI,KAAKkE,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,oBAAIW,SAAS,GAAG,OAAI,CAACuL,kCAAL,CAAwClM,MAAxC,CAAhB;;AAEAW,gBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB,kBAAA,OAAI,CAAC+P,4BAAL,CAAkC/P,KAAlC,EAAyC,CAACA,KAAK,CAACyP,oBAAP,CAAzC;AACH,iBAFD;AAGH,eAND;AAOH,aARD,MAQO;AACH,kBAAI7X,SAAS,GAAG,KAAKyL,iCAAL,EAAhB;AAEAzL,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACgJ,KAAD,EAAW;AACzB,gBAAA,OAAI,CAAC+P,4BAAL,CAAkC/P,KAAlC,EAAyC0F,KAAK,CAAChK,IAAN,CAAWgK,KAAK,CAAC,OAAI,CAAClO,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA/B,CAAL,CAA4C0N,IAA5C,EAAX,CAAzC;AACH,eAFD;AAGH;AACJ;;;uDAE4B3F,K,EAAO2E,e,EAAiB;AAAA;;AACjD,gBAAI3E,KAAK,CAACsK,kBAAN,IAA4BtK,KAAK,CAACsK,kBAAN,CAAyBrS,MAAzB,GAAkC,CAAlE,EAAqE;AACjE0M,cAAAA,eAAe,CAAC3N,OAAhB,CAAwB,UAACyH,WAAD,EAAiB;AACrC,oBAAIiC,cAAc,GAAGV,KAAK,CAACE,YAAN,CAAmB,CAAnB,EAAsBpJ,UAAtB,CAAiC2H,WAAjC,CAArB;AACA,oBAAIoC,cAAc,GAAG,OAAI,CAACrJ,aAAL,CAAmBV,UAAnB,CAA8B2H,WAA9B,CAArB;AACA,oBAAIkR,UAAJ,EAAgBE,QAAhB;AACA,oBAAIG,eAAe,GAAGhQ,KAAK,CAACsK,kBAAN,CAAyB,CAAzB,CAAtB;AACA,oBAAI2F,aAAa,GAAGjQ,KAAK,CAACsK,kBAAN,CAAyBtK,KAAK,CAACsK,kBAAN,CAAyBrS,MAAzB,GAAkC,CAA3D,CAApB;;AAEA,oBAAI,OAAI,CAACwK,YAAL,IAAqBhE,WAAW,IAAIuB,KAAK,CAACyP,oBAA9C,EAAoE;AAChE,sBAAIH,kBAAkB,GAAG,CAAzB;;AACA,sBAAI1X,SAAS,GAAG,OAAI,CAACyL,iCAAL,EAAhB;;AAEA,uBAAK,IAAIuL,mBAAmB,GAAG,CAA/B,EAAkCA,mBAAmB,GAAG/N,cAAc,CAACC,uBAAf,CAAuC7I,MAA/F,EAAuG,EAAE2W,mBAAzG,EAA8H;AAC1H,wBAAIW,iBAAiB,GAAG1O,cAAc,CAACC,uBAAf,CAAuC8N,mBAAvC,CAAxB;;AAEA,wBAAI,OAAI,CAACxP,SAAL,CAAe4Q,eAAf,EAAgCV,kBAAhC,EAAoDC,iBAApD,CAAJ,EAA4E;AACxEI,sBAAAA,UAAU,GAAG,OAAI,CAACO,wBAAL,CAA8BZ,kBAA9B,EAAkD1X,SAAlD,EAA6D6G,WAA7D,CAAb;AACH;;AAED,wBAAI,OAAI,CAACW,SAAL,CAAe6Q,aAAf,EAA8BX,kBAA9B,EAAkDC,iBAAlD,CAAJ,EAA0E;AACtEM,sBAAAA,QAAQ,GAAG,OAAI,CAACK,wBAAL,CAA8BX,iBAA9B,EAAiD3X,SAAjD,EAA4D6G,WAA5D,CAAX;AACH;;AAED6Q,oBAAAA,kBAAkB,GAAGC,iBAArB;AACH;AAEJ,iBAlBD,MAkBO;AACHI,kBAAAA,UAAU,GAAGjP,cAAc,CAACxF,IAAf,CAAoB8U,eAApB,CAAb;AACAH,kBAAAA,QAAQ,GAAGnP,cAAc,CAACxF,IAAf,CAAoB+U,aAApB,CAAX;AACH;;AAED,oBAAIN,UAAJ,EAAgB;AACZ,kBAAA,OAAI,CAACQ,0BAAL,CAAgCtP,cAAhC,EAAgDb,KAAhD,EAAuD2P,UAAvD,EAAmEE,QAAnE;AACH;AACJ,eAjCD;AAkCH;AACJ;;;mDAEwB1O,U,EAAYvJ,S,EAAW6G,W,EAAa;AACzD,iBAAK,IAAI4B,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGzI,SAAS,CAACK,MAAhD,EAAwD,EAAEoI,UAA1D,EAAsE;AAClE,kBAAIhD,QAAQ,GAAGzF,SAAS,CAACyI,UAAD,CAAT,CAAsBH,YAAtB,CAAmC,CAAnC,CAAf;AACA,kBAAIzC,KAAK,GAAGJ,QAAQ,CAACvG,UAAT,CAAoB2H,WAApB,EAAiCvD,IAAjC,CAAsCiG,UAAtC,CAAZ;;AAEA,kBAAI1D,KAAJ,EAAW;AACP,uBAAOA,KAAP;AACH;AACJ;AACJ;;;qDAE0BoD,c,EAAgBb,K,EAAO2P,U,EAAYE,Q,EAAU;AACpE,gBAAIzJ,MAAM,GAAG,KAAK8I,sBAAL,CAA4BrO,cAA5B,EAA4Cb,KAA5C,CAAb;AACA,gBAAIkE,MAAM,GAAGyL,UAAU,CAACtK,CAAxB;AACA,gBAAIpB,IAAI,GAAG4L,QAAQ,CAACxK,CAAT,GAAa,KAAK5R,MAAL,CAAYU,QAAZ,CAAqBK,UAA7C;AACA,gBAAIkN,KAAK,GAAGuC,IAAI,GAAGC,MAAnB;AACA,gBAAIvC,MAAM,GAAG3B,KAAK,CAAC6E,CAAN,GAAUuB,MAAvB;AACA,iBAAK3L,4BAAL,CAAkC+K,QAAlC,CAA2CtB,MAA3C,EAAmDkC,MAAnD,EAA2D1E,KAA3D,EAAkEC,MAAlE;AACH;;;4CAEiBkH,G,EAAK;AACnB,gBAAI,KAAK9O,SAAT,EAAoB;AAChB,kBAAI,KAAKvC,aAAL,CAAmB0W,aAAvB,EAAsC;AAClC,qBAAKkC,wBAAL,CAA8B,KAAK5Y,aAAL,CAAmB0W,aAAnB,CAAiClO,KAA/D;AACH,eAFD,MAEO;AACH,qBAAKqQ,wCAAL;AACH;AACJ,aAND,MAMO,IAAI,CAAC,KAAK5N,YAAV,EAAwB;AAC3B,mBAAK6N,YAAL,CAAkBzH,GAAlB;AACH;AACJ;;;mDAEwB7I,K,EAAO;AAC5B,gBAAI,KAAKuQ,sBAAL,IAA+BvQ,KAAnC,EAA0C;AACtC,mBAAKwQ,YAAL;AACA,mBAAKD,sBAAL,GAA8BvQ,KAA9B;AACA,mBAAKyQ,6BAAL;AACH;AACJ;;;yCAEc;AACX,iBAAKC,0BAAL;AACA,iBAAKC,uBAAL;AACH;;;uDAE4B;AACzB,gBAAI,KAAKC,6BAAT,EAAwC;AACpC,mBAAKte,SAAL,CAAeue,MAAf,CAAsB,KAAKD,6BAA3B;;AAEA,kBAAI,KAAKE,yBAAT,EAAoC;AAChC,qBAAKA,yBAAL,CAA+BC,eAA/B,GAAiD,CAAjD;;AAEA,oBAAI,KAAKpZ,UAAL,CAAgBqZ,6BAApB,EAAmD;AAC/C,uBAAKrZ,UAAL,CAAgBqZ,6BAAhB,CAA8Cha,OAA9C,CAAsD,UAACqQ,aAAD,EAAmB;AACrEA,oBAAAA,aAAa,CAAClH,OAAd,GAAwB,CAAxB;AACH,mBAFD;AAGH;;AAED,qBAAKuK,yBAAL;AACH;;AAED,mBAAKoG,yBAAL,GAAiC,IAAjC;AACH;AACJ;;;oDAEyB;AACtB,gBAAI,KAAKG,0BAAT,EAAqC;AACjC,mBAAK3e,SAAL,CAAeue,MAAf,CAAsB,KAAKI,0BAA3B;;AAEA,kBAAI,KAAKV,sBAAT,EAAiC;AAC7B,qBAAKA,sBAAL,CAA4BW,YAA5B,GAA2C,CAA3C;AACA,qBAAKX,sBAAL,GAA8B,IAA9B;AACA,qBAAKY,qBAAL;AACH;AACJ;AACJ;;;0DAE+B;AAAA;;AAC5B,iBAAKC,0BAAL,GAAkC,KAAlC;AACA,iBAAKb,sBAAL,CAA4BW,YAA5B,GAA2C,CAA3C;AAEA,iBAAKD,0BAAL,GAAkC,KAAK3e,SAAL,CAAe,YAAM;AACnD,kBAAI,OAAI,CAAC8e,0BAAT,EAAqC;AACjC,gBAAA,OAAI,CAACC,mCAAL;AACH,eAFD,MAEO;AACH,gBAAA,OAAI,CAACC,kCAAL;AACH;;AAED,cAAA,OAAI,CAACH,qBAAL;AACH,aARiC,EAQ/B,KAAK1d,MAAL,CAAYS,aARmB,CAAlC;AASH;;;gEAEqC;AAClC,gBAAI,KAAKqc,sBAAL,CAA4BW,YAA5B,IAA4C,CAAhD,EAAmD;AAC/C,mBAAKE,0BAAL,GAAkC,KAAlC;AACA,gBAAE,KAAKb,sBAAL,CAA4BW,YAA9B;AACH,aAHD,MAGO;AACH,gBAAE,KAAKX,sBAAL,CAA4BW,YAA9B;AACH;AACJ;;;+DAEoC;AACjC,gBAAI,KAAKX,sBAAL,CAA4BW,YAA5B,IAA4C5Y,IAAI,CAACC,KAAL,CAAW,KAAK9E,MAAL,CAAYuC,UAAZ,CAAuBub,oBAAvB,GAA8C,CAAzD,CAAhD,EAA6G;AACzG,mBAAKH,0BAAL,GAAkC,IAAlC;AACA,gBAAE,KAAKb,sBAAL,CAA4BW,YAA9B;AACH,aAHD,MAGO;AACH,gBAAE,KAAKX,sBAAL,CAA4BW,YAA9B;AACH;AACJ;;;qEAE0C;AAAA;;AACvC,iBAAK7e,QAAL,CAAc,YAAM;AAChB,kBAAImf,qBAAqB,GAAG,KAA5B;;AAEA,kBAAI,OAAI,CAAC/X,iBAAL,IAA0B,OAAI,CAACJ,QAAL,CAAcI,iBAAd,CAAgCC,KAA9D,EAAqE;AACjE,oBAAI,OAAI,CAAClC,aAAL,CAAmB6T,YAAvB,EAAqC;AACjC,kBAAA,OAAI,CAACjE,uBAAL,CAA6B,OAAI,CAAC5P,aAAL,CAAmB6T,YAAhD,EAA8D,IAA9D;;AACAmG,kBAAAA,qBAAqB,GAAG,IAAxB;AACH,iBAHD,MAGO;AACH,kBAAA,OAAI,CAAChB,YAAL;AACH;AACJ,eAPD,MAOO,IAAI,OAAI,CAAChZ,aAAL,CAAmB8T,oBAAvB,EAA6C;AAChD,oBAAI/D,cAAc,GAAG,OAAI,CAAC/P,aAAL,CAAmB+T,oBAAnB,IAA2C,OAAI,CAAC/T,aAAL,CAAmBgU,oBAAnF;;AACA,gBAAA,OAAI,CAACpE,uBAAL,CAA6B,OAAI,CAAC5P,aAAL,CAAmBiU,cAAhD,EAAgElE,cAAhE;;AACAiK,gBAAAA,qBAAqB,GAAG,IAAxB;AACH;;AAED,cAAA,OAAI,CAACvY,KAAL,CAAWoC,MAAX;;AAEA,kBAAImW,qBAAJ,EAA2B;AACvB,gBAAA,OAAI,CAAC9G,yBAAL;;AACA,gBAAA,OAAI,CAACpD,cAAL;AACH;;AAED,cAAA,OAAI,CAAC9P,aAAL,CAAmB8T,oBAAnB,GAA0C,KAA1C;AACH,aAxBD;AAyBH;;;uCAEYzC,G,EAAK;AACd,iBAAKhP,8BAAL;;AAEA,gBAAI,KAAK4T,gBAAT,EAA2B;AACvB,mBAAKC,SAAL,CAAe7E,GAAf;AACH;;AAED,iBAAK4E,gBAAL,GAAwB,CAAC,KAAKA,gBAA9B;AACH;;;oCAES5E,G,EAAK;AACX,iBAAK4I,aAAL;;AAEA,iBAAK,IAAIpa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAIJ,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8BO,CAA9B,CAAb;;AAEA,kBAAIJ,MAAJ,EAAY;AACR;AACA,oBAAI,KAAKgX,oBAAL,CAA0BhX,MAA1B,CAAJ,EAAuC;AACnC,uBAAKqQ,cAAL;AACA;AACH;AACJ;AACJ;AACJ;;;0CAEe;AAAA;;AACZ,gBAAI,KAAK9P,aAAL,CAAmBsR,aAAvB,EAAsC;AAClC,mBAAKxH,cAAL;AACA,kBAAI6L,IAAI,GAAG,KAAKuE,gBAAL,EAAX;AACA,kBAAIC,WAAW,GAAGrZ,IAAI,CAACG,GAAL,CAAS,KAAKjB,aAAL,CAAmB2K,cAA5B,EAA4C,KAAK3K,aAAL,CAAmBsR,aAAnB,CAAiCjE,CAAjC,GAAqCsI,IAAI,GAAG,CAAxF,CAAlB;AACA,mBAAKxV,UAAL,CAAgBia,WAAhB,GAA8BtZ,IAAI,CAACE,GAAL,CAASmZ,WAAT,EAAsB,KAAKna,aAAL,CAAmBkM,YAAnB,GAAkCyJ,IAAxD,CAA9B;AACA,kBAAIA,IAAI,GAAG,KAAKuE,gBAAL,EAAX;AACA,kBAAIG,MAAM,GAAG,KAAKC,kBAAL,EAAb;;AAEA,kBAAID,MAAM,IAAI,CAAd,EAAiB;AACb,qBAAKxX,gBAAL,CAAsBsM,WAAtB,GAAoC,KAAKlT,MAAL,CAAY0B,SAAZ,CAAsBC,KAA1D;AAEA,qBAAKoC,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9CA,kBAAAA,MAAM,CAAC8a,WAAP,GAAqB9a,MAAM,CAACiN,MAAP,GAAgB2N,MAArC;;AACA,kBAAA,OAAI,CAACxX,gBAAL,CAAsB2X,UAAtB,CAAiC/a,MAAM,CAAC8a,WAAxC,EAAqD,OAAI,CAACpa,UAAL,CAAgBia,WAArE,EAAkFzE,IAAlF,EAAwFA,IAAxF;AACH,iBAHD;AAIH;AACJ;AACJ;;;6CAEkB;AACf,mBAAO7U,IAAI,CAACE,GAAL,CAAS,KAAK/E,MAAL,CAAY0B,SAAZ,CAAsBE,aAAtB,GAAsC,CAA/C,EAAkD,KAAKmC,aAAL,CAAmBkM,YAAnB,GAAkC,KAAKlM,aAAL,CAAmB2K,cAAvG,CAAP;AACH;;;+CAEoB;AACjB,iBAAK,IAAI9K,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAIJ,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8BO,CAA9B,CAAb;;AAEA,kBAAIJ,MAAJ,EAAY;AACR,oBAAI,KAAKgX,oBAAL,CAA0BhX,MAA1B,CAAJ,EAAuC;AACnC,uBAAKO,aAAL,CAAmBgU,oBAAnB,GAA0C,KAAKhU,aAAL,CAAmBsR,aAAnB,CAAiCzD,CAAjC,GAAqCpO,MAAM,CAACiN,MAAtF;AACA,uBAAKvM,UAAL,CAAgBsa,iBAAhB,GAAoC5a,CAApC;AAEA,yBAAOiB,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAASxB,MAAM,CAACiN,MAAhB,EACZ,KAAK1M,aAAL,CAAmBsR,aAAnB,CAAiCzD,CAAjC,GAAqC,KAAK5R,MAAL,CAAY0B,SAAZ,CAAsBE,aAD/C,CAAT,EAEH4B,MAAM,CAACgN,IAAP,GAAc,KAAKyN,gBAAL,EAFX,IAEsCza,MAAM,CAACiN,MAFpD;AAGH;AACJ;AACJ;AACJ;;;oDAEyB;AACtB,mBAAO,KAAKnK,SAAL,GAAiB,KAAKtG,MAAL,CAAYuC,UAAZ,CAAuBG,iBAAxC,GAA4D,KAAK1C,MAAL,CAAYuC,UAAZ,CAAuBI,mBAA1F;AACH;;;qDAE0B;AAAA;;AACvB,gBAAI,CAAC,KAAKuB,UAAL,CAAgBuD,IAArB,EAA2B;AACvB,mBAAKvD,UAAL,CAAgBuD,IAAhB,GAAuB,EAAvB;AACH;;AAED,iBAAKvD,UAAL,CAAgBuD,IAAhB,CAAqBjD,MAArB,GAA8B,CAA9B;AAEA,iBAAKT,aAAL,CAAmB0D,IAAnB,CAAwBlE,OAAxB,CAAgC,UAACgU,gBAAD,EAAsB;AAClD,kBAAI,OAAI,CAACkH,oBAAL,CAA0BlH,gBAA1B,CAAJ,EAAiD;AAC7C,gBAAA,OAAI,CAACrT,UAAL,CAAgByQ,gBAAhB,GAAmC,OAAI,CAAC+J,yBAAL,CAA+BnH,gBAA/B,CAAnC;;AACA,oBAAIE,aAAa,GAAG,OAAI,CAACC,gBAAL,CAAsBH,gBAAtB,EAAwC,OAAI,CAACrT,UAAL,CAAgByQ,gBAAxD,CAApB;;AACA,gBAAA,OAAI,CAACzQ,UAAL,CAAgBuD,IAAhB,CAAqBhE,IAArB,CAA0BgU,aAA1B;AACH;AACJ,aAND;AAOH;;;+CAEoB7N,Q,EAAU;AAC3B,mBAAOA,QAAQ,CAACwH,CAAT,IAAc,KAAKlN,UAAL,CAAgBia,WAAhB,GAA8B,KAAKF,gBAAL,EAA5C,IACHrU,QAAQ,CAACwH,CAAT,GAAa,KAAKrN,aAAL,CAAmB6M,sBAAhC,IAA0D,KAAK1M,UAAL,CAAgBia,WAD9E;AAEH;;;oDAEyB5G,gB,EAAkB;AAAA;;AACxC,gBAAIoH,OAAO,GAAG,EAAd;;AAEA,iBAAK,IAAI/a,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2T,gBAAgB,CAAClU,UAAjB,CAA4BmB,MAAhD,EAAwD,EAAEZ,CAA1D,EAA6D;AACzD,kBAAIJ,MAAM,GAAG+T,gBAAgB,CAAClU,UAAjB,CAA4BO,CAA5B,CAAb;;AAEA,kBAAIJ,MAAM,CAACiE,IAAP,CAAYjD,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,oBAAI4I,cAAc,GAAG,KAAKrJ,aAAL,CAAmBV,UAAnB,CAA8BO,CAA9B,CAArB;AAEAJ,gBAAAA,MAAM,CAACiE,IAAP,CAAYlE,OAAZ,CAAoB,UAACyG,KAAD,EAAQ9E,KAAR,EAAkB;AAClC,sBAAI,OAAI,CAACyG,SAAL,CAAe3B,KAAK,CAAC4H,CAArB,EAAwBxE,cAAc,CAACkR,WAAvC,EAAoDlR,cAAc,CAACkR,WAAf,GAA6B,OAAI,CAACL,gBAAL,EAAjF,CAAJ,EAA+G;AAC3GU,oBAAAA,OAAO,CAAClb,IAAR,CAAayB,KAAb;AACH;AACJ,iBAJD;AAMA;AACH;AACJ;;AAED,mBAAOyZ,OAAP;AACH;;;2CAEgBpH,gB,EAAkBqH,S,EAAW;AAC1C,gBAAInH,aAAa,GAAG,EAApB;AACAA,YAAAA,aAAa,CAAC7N,QAAd,GAAyB2N,gBAAgB,CAAC3N,QAA1C;AACA6N,YAAAA,aAAa,CAACF,gBAAd,GAAiCA,gBAAjC;AACA,iBAAKsH,2BAAL,CAAiCpH,aAAjC,EAAgDF,gBAAhD,EAAkEqH,SAAlE;AACA,mBAAOnH,aAAP;AACH;;;sDAE2BA,a,EAAeF,gB,EAAkBqH,S,EAAW;AACpEnH,YAAAA,aAAa,CAACpU,UAAd,GAA2B,EAA3B;AACA,iBAAKyb,eAAL,CAAqBrH,aAArB,EAAoCF,gBAApC,EAAsDqH,SAAtD;AACA,iBAAKG,wBAAL,CAA8BtH,aAA9B;AACH;;;0CAEeA,a,EAAeF,gB,EAAkBqH,S,EAAW;AACxD,iBAAK7a,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASwH,WAAT,EAAyB;AAC3D,kBAAIgU,WAAW,GAAG,EAAlB;AACAA,cAAAA,WAAW,CAACvX,IAAZ,GAAmB,EAAnB;AACAuX,cAAAA,WAAW,CAACC,SAAZ,GAAwB,EAAxB;AAEAL,cAAAA,SAAS,CAACrb,OAAV,CAAkB,UAAC2B,KAAD,EAAW;AACzB,oBAAI8E,KAAK,GAAGuN,gBAAgB,CAAClU,UAAjB,CAA4B2H,WAA5B,EAAyCvD,IAAzC,CAA8CvC,KAA9C,CAAZ;;AAEA,oBAAI8E,KAAJ,EAAW;AACPgV,kBAAAA,WAAW,CAACvX,IAAZ,CAAiBhE,IAAjB,CAAsBuG,KAAtB;AACH;AACJ,eAND;AAQAyN,cAAAA,aAAa,CAACpU,UAAd,CAAyBI,IAAzB,CAA8Bub,WAA9B;AACH,aAdD;AAeH;;;mDAEwBpV,Q,EAAU;AAAA;;AAC/BA,YAAAA,QAAQ,CAACvG,UAAT,CAAoBE,OAApB,CAA4B,UAAC0J,cAAD,EAAiBjC,WAAjB,EAAiC;AACzD,mBAAK,IAAIpH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,OAAI,CAAC5D,MAAL,CAAYG,UAAhC,EAA4C,EAAEyD,CAA9C,EAAiD;AAC7C,oBAAIsb,KAAK,GAAG,EAAZ;AACAA,gBAAAA,KAAK,CAACC,SAAN,GAAkB,EAAlB;AACAlS,gBAAAA,cAAc,CAACgS,SAAf,CAAyBxb,IAAzB,CAA8Byb,KAA9B;AACH;;AAED,kBAAI9R,cAAc,GAAG,OAAI,CAACrJ,aAAL,CAAmBV,UAAnB,CAA8B2H,WAA9B,CAArB;AAEAiC,cAAAA,cAAc,CAACxF,IAAf,CAAoBlE,OAApB,CAA4B,UAACyG,KAAD,EAAW;AACnC,oBAAIF,KAAK,GAAGE,KAAK,CAACF,KAAlB;AACA,oBAAIpG,SAAS,GAAG,OAAI,CAACN,KAAL,CAAWC,UAAX,CAAsB2H,WAAtB,EAAmCtH,SAAnD;AAEAuJ,gBAAAA,cAAc,CAACgS,SAAf,CAAyB1b,OAAzB,CAAiC,UAAC2b,KAAD,EAAQE,UAAR,EAAuB;AACpDhS,kBAAAA,cAAc,CAACjD,QAAf,CAAwB5G,OAAxB,CAAgC,UAAC5B,KAAD,EAAQ2I,SAAR,EAAsB;AAClD,wBAAI3I,KAAK,IAAI+B,SAAS,CAAC0b,UAAD,CAAtB,EAAoC;AAChCF,sBAAAA,KAAK,CAACC,SAAN,CAAgB1b,IAAhB,CAAqBqG,KAAK,GAAG,CAAR,GAAYA,KAAZ,GAAoB,CAAzC;AACAA,sBAAAA,KAAK,IAAIQ,SAAS,CAACtF,GAAnB;AACAka,sBAAAA,KAAK,CAAC1R,KAAN,GAAclD,SAAS,CAACtF,GAAV,GAAgBsF,SAAS,CAACvF,GAAxC;AACH;AACJ,mBAND;AAOH,iBARD;AASH,eAbD;AAcH,aAvBD;AAwBH;;;kDAEuB;AACpB,iBAAK,IAAIsM,aAAa,GAAG,CAAzB,EAA4BA,aAAa,GAAG,KAAKtN,aAAL,CAAmB0D,IAAnB,CAAwBjD,MAApE,EAA4E,EAAE6M,aAA9E,EAA6F;AACzF,kBAAIzH,QAAQ,GAAG,KAAK7F,aAAL,CAAmB0D,IAAnB,CAAwB4J,aAAxB,CAAf;AACA,kBAAI7G,GAAG,GAAG,KAAV;;AAEA,mBAAK,IAAIQ,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGpB,QAAQ,CAACvG,UAAT,CAAoBmB,MAA5D,EAAoE,EAAEwG,WAAtE,EAAmF;AAC/E,oBAAIxH,MAAM,GAAGoG,QAAQ,CAACvG,UAAT,CAAoB2H,WAApB,CAAb;AACA,oBAAIqU,SAAS,GAAG,KAAKnb,UAAL,CAAgByQ,gBAAhB,CAAiC,CAAjC,CAAhB;AACA,oBAAI2K,OAAO,GAAG,KAAKpb,UAAL,CAAgByQ,gBAAhB,CAAiC,KAAKzQ,UAAL,CAAgByQ,gBAAhB,CAAiCnQ,MAAjC,GAA0C,CAA3E,CAAd;;AAEA,oBAAIhB,MAAM,CAACiE,IAAP,CAAY4X,SAAZ,KAA0B7b,MAAM,CAACiE,IAAP,CAAY6X,OAAZ,CAA9B,EAAoD;AAChD,uBAAKC,eAAL,GAAuB,KAAKpQ,mBAAL,CAAyB3L,MAAM,CAACiE,IAAP,CAAY4X,SAAZ,EAAuB9W,IAAvB,GAA8B,IAAvD,CAAvB;AACA,uBAAKiX,aAAL,GAAqB,KAAKrQ,mBAAL,CAAyB3L,MAAM,CAACiE,IAAP,CAAY6X,OAAZ,EAAqB/W,IAArB,GAA4B,IAArD,CAArB;AACAiC,kBAAAA,GAAG,GAAG,IAAN;AACA;AACH;AACJ;;AAED,kBAAIA,GAAJ,EAAS;AACL;AACH;AACJ;AACJ;;;uDAE4B;AACzB,iBAAK3J,YAAL,GAAoB,KAAKb,MAAL,CAAYU,QAAZ,CAAqBG,YAAzC;AACA,iBAAKgO,0BAAL;AACA,gBAAI4Q,YAAY,GAAG,KAAKjZ,cAAL,CAAoB,YAApB,EAAkCkZ,UAArD;AACA,gBAAIC,aAAa,GAAG,KAAKlZ,eAAL,CAAqBgI,WAArB,CAAiC,KAAK8Q,eAAtC,EAAuDtR,KAA3E;AACA,iBAAK2R,kBAAL,GAA0BH,YAAY,GAAIE,aAAa,GAAG,CAA1D;AACA,iBAAKE,gBAAL,GAAwB,KAAK5Y,eAAL,GAAuB0Y,aAA/C;AACH;;;+CAEoB;AAAA;;AACjB,gBAAI,KAAKrZ,SAAT,EAAoB;AAChB,mBAAK1H,QAAL,CAAc,YAAM;AAChB,oBAAI,OAAI,CAACiH,YAAL,IAAqB,OAAI,CAACD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,kBAAA,OAAI,CAACga,qBAAL,GAA6B,CAAC,OAAI,CAAC9f,MAAL,CAAYuC,UAAZ,CAAuBwd,UAAvB,GAAoC,OAAI,CAAC/f,MAAL,CAAYuC,UAAZ,CAAuBub,oBAA5D,IACzB,OAAI,CAAC/Z,aAAL,CAAmBV,UAAnB,CAA8BmB,MADlC;AAEH,iBAHD,MAGO;AACH,kBAAA,OAAI,CAACsb,qBAAL,GAA6B,OAAI,CAAC9f,MAAL,CAAYuC,UAAZ,CAAuBwd,UAAvB,GAAoC,OAAI,CAAC/f,MAAL,CAAYuC,UAAZ,CAAuBub,oBAAxF;AACH;;AAED,gBAAA,OAAI,CAACkC,sBAAL,GAA8B,OAAI,CAAChgB,MAAL,CAAYuC,UAAZ,CAAuBwd,UAArD;;AACA,gBAAA,OAAI,CAACva,KAAL,CAAWoC,MAAX;;AACA,gBAAA,OAAI,CAAC8V,qBAAL;;AACA,gBAAA,OAAI,CAACuC,qBAAL;AACH,eAZD;AAaH,aAdD,MAcO;AACH,mBAAKC,uBAAL;AACH;AACJ;;;kDAEuB;AAAA;;AACpB,iBAAKhc,UAAL,CAAgBC,SAAhB,CAA0BZ,OAA1B,CAAkC,UAACgJ,KAAD,EAAQK,UAAR,EAAuB;AACrDL,cAAAA,KAAK,CAACE,YAAN,CAAmBlJ,OAAnB,CAA2B,UAACqG,QAAD,EAAWyH,aAAX,EAA6B;AACpD,oBAAIA,aAAa,IAAI,CAAjB,IAAsB9E,KAAK,CAAC4T,WAAhC,EAA6C;AACzC,kBAAA,OAAI,CAACC,sBAAL,CAA4B7T,KAA5B,EAAmCK,UAAnC,EAA+ChD,QAA/C,EAAyDyH,aAAzD;AACH;AACJ,eAJD;AAKH,aAND;AAOH;;;iDAEsB9E,K,EAAOK,U,EAAYhD,Q,EAAUyH,a,EAAe;AAAA;;AAC/D,gBAAI/J,MAAM,GAAG,KAAKd,cAAL,CAAoB,4BAA4BoG,UAA5B,GAAyC,GAAzC,GAA+CyE,aAAnE,CAAb;AACA,gBAAIgP,OAAO,GAAG,KAAK3Z,gBAAL,CAAsBY,MAAtB,CAAd;AACA+Y,YAAAA,OAAO,CAACrS,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB1G,MAAM,CAAC2G,KAA/B,EAAsC3G,MAAM,CAAC4G,MAA7C;;AAEA,gBAAI,KAAKrI,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAAhD,IAA0DyG,KAAK,CAAC4T,WAApE,EAAiF;AAC7EvW,cAAAA,QAAQ,CAAC0W,mBAAT,GAA+B,EAA/B;AAEA1W,cAAAA,QAAQ,CAAC2N,gBAAT,CAA0BpT,SAA1B,CAAoCZ,OAApC,CAA4C,UAACgd,aAAD,EAAgBC,kBAAhB,EAAuC;AAC/E,oBAAID,aAAa,CAACvM,UAAlB,EAA8B;AAC1BpK,kBAAAA,QAAQ,CAAC0W,mBAAT,CAA6B7c,IAA7B,CAAkC8c,aAAlC;AACA,sBAAI3O,CAAC,GAAG,CAAC,OAAI,CAAC5R,MAAL,CAAYuC,UAAZ,CAAuBwd,UAAvB,GAAoC,OAAI,CAAC/f,MAAL,CAAYuC,UAAZ,CAAuBub,oBAA5D,IAAoF0C,kBAA5F;;AACA,kBAAA,OAAI,CAACC,6BAAL,CAAmCJ,OAAnC,EAA4CE,aAA5C,EAA2D3O,CAA3D;AACH;AACJ,eAND;AAOH,aAVD,MAUO;AACH,mBAAK6O,6BAAL,CAAmCJ,OAAnC,EAA4C9T,KAAK,CAACqH,aAAlD,EAAiE,CAAjE;AACH;AACJ;;;wDAE6ByM,O,EAAS9T,K,EAAOqF,C,EAAG;AAC7C,gBAAIrF,KAAK,IAAI,KAAKuQ,sBAAlB,EAA0C;AACtClL,cAAAA,CAAC,IAAI,KAAKkL,sBAAL,CAA4BW,YAAjC;AACH;;AAED4C,YAAAA,OAAO,CAACvO,SAAR,GAAoBvF,KAAK,CAAC5K,KAA1B;AACA0e,YAAAA,OAAO,CAACtO,QAAR,CAAiBH,CAAjB,EAAoB,CAApB,EAAuB,KAAK5R,MAAL,CAAYuC,UAAZ,CAAuBwd,UAA9C,EAA0D,KAAK/f,MAAL,CAAYuC,UAAZ,CAAuBwd,UAAjF;AACH;;;kDAEuB;AAAA;;AACpB,iBAAK7b,UAAL,CAAgBC,SAAhB,CAA0BZ,OAA1B,CAAkC,UAACgJ,KAAD,EAAQK,UAAR,EAAuB;AACrDL,cAAAA,KAAK,CAACE,YAAN,CAAmBlJ,OAAnB,CAA2B,UAACqG,QAAD,EAAWyH,aAAX,EAA6B;AACpD,oBAAIA,aAAa,IAAI,CAAjB,IAAsB9E,KAAK,CAAC4T,WAAhC,EAA6C;AACzC,kBAAA,OAAI,CAACO,4BAAL,CAAkCnU,KAAlC,EAAyCK,UAAzC,EAAqDhD,QAArD,EAA+DyH,aAA/D;AACH;AACJ,eAJD;AAKH,aAND;AAOH;;;uDAE4B9E,K,EAAOK,U,EAAYhD,Q,EAAUyH,a,EAAe;AACrE;AACA,gBAAIsP,eAAe,GAAG,KAAK1R,kBAAL,EAAtB;AACA,gBAAI3H,MAAM,GAAG,KAAKsZ,qBAAL,CAA2BhU,UAA3B,EAAuCyE,aAAvC,CAAb;AACA,iBAAKwP,6BAAL,CAAmCvZ,MAAnC,EAA2CsC,QAA3C,EAAqDqI,KAAK,CAAChK,IAAN,CAAWgK,KAAK,CAAC0O,eAAD,CAAL,CAAuBzO,IAAvB,EAAX,CAArD,EAAgG,KAAK0C,uBAAL,EAAhG,EAJqE,CAMrE;;AACA,gBAAIrI,KAAK,CAACqH,aAAN,CAAoBiD,kBAAxB,EAA4C;AACxC,kBAAIvP,MAAM,GAAG,KAAKd,cAAL,CAAoB,0CAA0CoG,UAA1C,GAAuD,GAAvD,GAA6DyE,aAAjF,CAAb;AACA,kBAAItQ,UAAU,GAAG8D,IAAI,CAACuO,KAAL,CAAW,KAAKnM,eAAL,GAAuBsF,KAAK,CAACqH,aAAN,CAAoBiD,kBAApB,CAAuCrS,MAAzE,CAAjB;AACA,mBAAKqc,6BAAL,CAAmCvZ,MAAnC,EAA2CsC,QAA3C,EAAqD2C,KAAK,CAACqH,aAAN,CAAoBiD,kBAAzE,EAA6F9V,UAA7F;AACH;AACJ;;;gDAEqB6L,U,EAAYyE,a,EAAe;AAC7C,mBAAO,KAAK7K,cAAL,CAAoB,sBAAsBoG,UAAtB,GAAmC,GAAnC,GAAyCyE,aAA7D,CAAP;AACH;;;wDAE6B/J,M,EAAQsC,Q,EAAUkX,c,EAAgB/f,U,EAAY;AACxE,gBAAIsf,OAAO,GAAG,KAAK3Z,gBAAL,CAAsBY,MAAtB,CAAd;AACA+Y,YAAAA,OAAO,CAACrS,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB1G,MAAM,CAAC2G,KAA/B,EAAsC3G,MAAM,CAAC4G,MAA7C;AACA,iBAAK6S,sBAAL,CAA4BnX,QAA5B,EAAsCyW,OAAtC,EAA+CS,cAA/C,EAA+D/f,UAA/D;AACH;;;iDAEsB6I,Q,EAAUyW,O,EAASS,c,EAAgB/f,U,EAAY;AAAA;;AAClE6I,YAAAA,QAAQ,CAACvG,UAAT,CAAoBE,OAApB,CAA4B,UAACC,MAAD,EAASwH,WAAT,EAAyB;AACjDxH,cAAAA,MAAM,CAACyb,SAAP,CAAiB1b,OAAjB,CAAyB,UAAC2b,KAAD,EAAQE,UAAR,EAAuB;AAC5C;AACA,oBAAIhO,CAAC,GAAG,CAAC,OAAI,CAACpR,MAAL,CAAYuC,UAAZ,CAAuBK,eAAvB,GAAyC,OAAI,CAAC5C,MAAL,CAAYuC,UAAZ,CAAuBM,oBAAjE,IAAyFmI,WAAzF,GACJ,OAAI,CAAChL,MAAL,CAAYuC,UAAZ,CAAuBK,eAD3B;AAEAyd,gBAAAA,OAAO,CAACzN,SAAR;AACAyN,gBAAAA,OAAO,CAACxN,MAAR,CAAe,CAAf,EAAkBzB,CAAlB;AACA,oBAAIQ,CAAC,GAAG,CAAR;AACA,oBAAIoP,SAAS,GAAG,CAAhB;AACA,oBAAIC,aAAa,GAAG,CAApB;AAEAH,gBAAAA,cAAc,CAACvd,OAAf,CAAuB,UAAC2d,UAAD,EAAaC,aAAb,EAA+B;AAClD,sBAAIrX,KAAK,GAAGoV,KAAK,CAACC,SAAN,CAAgB+B,UAAhB,CAAZ;;AAEA,sBAAIpX,KAAK,IAAI,IAAb,EAAmB;AACf8H,oBAAAA,CAAC,GAAG7Q,UAAU,GAAGogB,aAAjB;;AACA,oBAAA,OAAI,CAACC,iCAAL,CAAuCf,OAAvC,EAAgDvW,KAAhD,EAAuDmX,aAAvD,EAAsE/B,KAAtE,EAA6EE,UAA7E,EAAyFxN,CAAzF,EAA4FR,CAA5F,EAA+F4P,SAA/F;;AACAA,oBAAAA,SAAS,GAAGpP,CAAZ;AACAqP,oBAAAA,aAAa,GAAGnX,KAAhB;AACH;AACJ,iBATD;AAWAuW,gBAAAA,OAAO,CAACvN,MAAR,CAAelB,CAAf,EAAkBR,CAAlB;AACAiP,gBAAAA,OAAO,CAACvN,MAAR,CAAe,OAAI,CAAC5O,UAAL,CAAgBmd,WAA/B,EAA4CjQ,CAA5C;AACAiP,gBAAAA,OAAO,CAACtN,SAAR;AACAsN,gBAAAA,OAAO,CAACvO,SAAR,GAAoB,OAAI,CAAC1O,KAAL,CAAWC,UAAX,CAAsB2H,WAAtB,EAAmCtH,SAAnC,CAA6C0b,UAA7C,CAApB;AACAiB,gBAAAA,OAAO,CAACrN,IAAR;AACH,eA1BD;AA2BH,aA5BD;AA6BH;;;oDAEyB;AAAA;;AACtB,iBAAK9O,UAAL,CAAgBuD,IAAhB,CAAqBlE,OAArB,CAA6B,UAACqG,QAAD,EAAWyH,aAAX,EAA6B;AACtD,kBAAI/J,MAAM,GAAG,OAAI,CAACga,uBAAL,CAA6BjQ,aAA7B,CAAb;;AACA,kBAAIgP,OAAO,GAAG,OAAI,CAAC3Z,gBAAL,CAAsBY,MAAtB,CAAd;;AACA+Y,cAAAA,OAAO,CAACrS,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB1G,MAAM,CAAC2G,KAA/B,EAAsC3G,MAAM,CAAC4G,MAA7C;;AACA,cAAA,OAAI,CAAC6S,sBAAL,CAA4BnX,QAA5B,EAAsCyW,OAAtC,EAA+CpO,KAAK,CAAChK,IAAN,CAAWgK,KAAK,CAAC,OAAI,CAAChD,kBAAL,EAAD,CAAL,CAAiCiD,IAAjC,EAAX,CAA/C,EAAoG,OAAI,CAAClS,MAAL,CAAYuC,UAAZ,CAAuBI,mBAA3H;AACH,aALD;AAMH;;;kDAEuB0O,a,EAAe;AACnC,mBAAO,KAAK7K,cAAL,CAAoB,sBAAsB6K,aAA1C,CAAP;AACH;;;4DAEiCgP,O,EAASvW,K,EAAOmX,a,EAAe/B,K,EAAOE,U,EAAYxN,C,EAAGR,C,EAAG4P,S,EAAW;AACjG,gBAAIlX,KAAK,IAAI,CAAb,EAAgB;AACZ;AACAuW,cAAAA,OAAO,CAACvN,MAAR,CAAelB,CAAf,EAAkBR,CAAlB;AACH,aAHD,MAGO;AACH;AACA,kBAAIgO,UAAU,GAAG,CAAb,IAAkB6B,aAAa,IAAI,CAAvC,EAA0C;AACtCZ,gBAAAA,OAAO,CAACvN,MAAR,CAAekO,SAAf,EAA0B5P,CAA1B;AACH;;AAED,kBAAIlD,MAAJ;;AAEA,kBAAIpE,KAAK,IAAIoV,KAAK,CAAC1R,KAAnB,EAA0B;AACtBU,gBAAAA,MAAM,GAAG,KAAKlO,MAAL,CAAYuC,UAAZ,CAAuBK,eAAhC;AACH,eAFD,MAEO;AACHsL,gBAAAA,MAAM,GAAGpE,KAAK,GAAG,KAAK9J,MAAL,CAAYuC,UAAZ,CAAuBK,eAA/B,GAAiDsc,KAAK,CAAC1R,KAAhE;AACH;;AAEDU,cAAAA,MAAM,GAAGrJ,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYkJ,MAAZ,CAAT;AACAmS,cAAAA,OAAO,CAACvN,MAAR,CAAelB,CAAf,EAAkBR,CAAC,GAAGlD,MAAtB;AACH;AACJ;;;gDAEqB;AAClB,gBAAI,KAAK5H,SAAT,EAAoB;AAChB,kBAAI,KAAKvC,aAAL,CAAmB6T,YAAnB,IAAmC,KAAK7T,aAAL,CAAmB6T,YAAnB,CAAgC5D,UAAvE,EAAmF;AAC/E,oBAAIuN,QAAQ,GAAG,CAAf;AAEA,qBAAKrd,UAAL,CAAgBC,SAAhB,CAA0BZ,OAA1B,CAAkC,UAACgJ,KAAD,EAAW;AACzC,sBAAIA,KAAK,CAAC4T,WAAV,EAAuB;AACnBoB,oBAAAA,QAAQ,IAAIhV,KAAK,CAACE,YAAN,CAAmBjI,MAA/B;AACH,mBAFD,MAEO;AACH,sBAAE+c,QAAF;AACH;AACJ,iBAND;AAQA,qBAAKpa,mBAAL,CAAyBqa,SAAzB,GAAqC,KAAKtd,UAAL,CAAgB4Q,cAAhB,GAAiCyM,QAAtE;AACH;AACJ,aAdD,MAcO;AACH,mBAAKE,gBAAL;AACH;AACJ;;;6CAEkB;AACf,gBAAI7X,QAAQ,GAAG,KAAK8X,kBAAL,EAAf;;AAEA,gBAAI9X,QAAJ,EAAc;AACV,mBAAK,IAAIhG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKM,UAAL,CAAgBuD,IAAhB,CAAqBjD,MAAzC,EAAiD,EAAEZ,CAAnD,EAAsD;AAClD,oBAAI+d,kBAAkB,GAAG,KAAKzd,UAAL,CAAgBuD,IAAhB,CAAqB7D,CAArB,CAAzB;;AAEA,oBAAIgG,QAAQ,CAACA,QAAT,IAAqB+X,kBAAkB,CAAC/X,QAA5C,EAAsD;AAClD+X,kBAAAA,kBAAkB,CAAC3N,UAAnB,GAAgC,IAAhC;AACA,uBAAK7M,mBAAL,CAAyBqa,SAAzB,GAAqC,KAAKtd,UAAL,CAAgB4Q,cAAhB,GAAiClR,CAAtE;AACH,iBAHD,MAGO;AACH+d,kBAAAA,kBAAkB,CAAC3N,UAAnB,GAAgC,KAAhC;AACH;AACJ;AACJ;AACJ;;;+CAEoB;AACjB,iBAAK,IAAIpQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmB0D,IAAnB,CAAwBjD,MAA5C,EAAoD,EAAEZ,CAAtD,EAAyD;AACrD,kBAAIgG,QAAQ,GAAG,KAAK7F,aAAL,CAAmB0D,IAAnB,CAAwB7D,CAAxB,CAAf;;AAEA,kBAAI,KAAK+H,SAAL,CAAe,KAAK5H,aAAL,CAAmBsR,aAAnB,CAAiCjE,CAAhD,EAAmDxH,QAAQ,CAACwH,CAAT,GAAa,KAAKpR,MAAL,CAAYU,QAAZ,CAAqBM,oBAArF,EAA2G4I,QAAQ,CAACwH,CAApH,CAAJ,EAA4H;AACxH,uBAAOxH,QAAP;AACH;AACJ;AACJ;;;gDAEqB2C,K,EAAO3C,Q,EAAU;AACnC,gBAAI,KAAK/D,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BE,QAAhD,IAA4D,CAACwG,KAAK,CAAC4T,WAAvE,EAAoF;AAChF,mBAAKjc,UAAL,CAAgBqZ,6BAAhB,GAAgD,CAAChR,KAAK,CAACqH,aAAP,CAAhD;AACA,mBAAKgO,2BAAL,CAAiCrV,KAAjC;AACH,aAHD,MAGO;AACH,mBAAKrI,UAAL,CAAgBqZ,6BAAhB,GAAgD3T,QAAQ,CAAC0W,mBAAzD;AACA,mBAAKsB,2BAAL,CAAiCrV,KAAjC;AACH;AACJ;;;sDAE2BA,K,EAAO;AAC/B,gBAAI,KAAK8Q,yBAAL,IAAkC9Q,KAAtC,EAA6C;AACzC,mBAAKwQ,YAAL;AACA,mBAAKM,yBAAL,GAAiC9Q,KAAjC;AACA,mBAAKsV,gCAAL;AACH;AACJ;;;6DAEkC;AAAA;;AAC/B,iBAAKC,6BAAL,GAAqC,KAArC;AACA,iBAAKzE,yBAAL,CAA+BC,eAA/B,GAAiD,CAAjD;AAEA,iBAAKH,6BAAL,GAAqC,KAAKte,SAAL,CAAe,YAAM;AACtD,kBAAI,OAAI,CAACijB,6BAAT,EAAwC;AACpC,gBAAA,OAAI,CAACC,sCAAL;AACH,eAFD,MAEO;AACH,gBAAA,OAAI,CAACC,qCAAL;AACH;;AAED,kBAAI,OAAI,CAAC9d,UAAL,CAAgBqZ,6BAApB,EAAmD;AAC/C,gBAAA,OAAI,CAACrZ,UAAL,CAAgBqZ,6BAAhB,CAA8Cha,OAA9C,CAAsD,UAACqQ,aAAD,EAAmB;AACrEA,kBAAAA,aAAa,CAAClH,OAAd,GAAwB,OAAI,CAAC2Q,yBAAL,CAA+BC,eAAvD;AACH,iBAFD;AAGH;;AAED,cAAA,OAAI,CAACrG,yBAAL;AACH,aAdoC,EAclC,KAAKjX,MAAL,CAAYS,aAdsB,CAArC;AAeH;;;mEAEwC;AACrC,gBAAI,KAAK4c,yBAAL,CAA+BC,eAA/B,IAAkD,CAAtD,EAAyD;AACrD,mBAAKwE,6BAAL,GAAqC,KAArC;AACA,gBAAE,KAAKzE,yBAAL,CAA+BC,eAAjC;AACH,aAHD,MAGO;AACH,gBAAE,KAAKD,yBAAL,CAA+BC,eAAjC;AACH;AACJ;;;kEAEuC;AACpC,gBAAI,KAAKD,yBAAL,CAA+BC,eAA/B,IAAkDzY,IAAI,CAACC,KAAL,CAAW,KAAK9E,MAAL,CAAYU,QAAZ,CAAqBc,2BAArB,GAAmD,CAA9D,CAAtD,EAAwH;AACpH,mBAAKsgB,6BAAL,GAAqC,IAArC;AACA,gBAAE,KAAKzE,yBAAL,CAA+BC,eAAjC;AACH,aAHD,MAGO;AACH,gBAAE,KAAKD,yBAAL,CAA+BC,eAAjC;AACH;AACJ;;;oCAES/Q,K,EAAO0V,K,EAAO;AAAA;;AACpBA,YAAAA,KAAK,CAACC,cAAN;AAEA,iBAAKtjB,QAAL,CAAc,YAAM;AAChB2N,cAAAA,KAAK,CAAC4T,WAAN,GAAoB,CAAC5T,KAAK,CAAC4T,WAA3B;;AACA,cAAA,OAAI,CAAC3a,KAAL,CAAWoC,MAAX;;AACA,cAAA,OAAI,CAACsN,kBAAL;AACH,aAJD;AAKH;;;sCAEWtL,Q,EAAUwL,G,EAAKxI,U,EAAYyE,a,EAAe;AAClD,gBAAI,KAAK/K,SAAT,EAAoB;AAChB,mBAAKpC,UAAL,CAAgBC,SAAhB,CAA0BZ,OAA1B,CAAkC,UAACgJ,KAAD,EAAW;AACzCA,gBAAAA,KAAK,CAACE,YAAN,CAAmBlJ,OAAnB,CAA2B,UAACqG,QAAD,EAAc;AACrCA,kBAAAA,QAAQ,CAACoK,UAAT,GAAsB,KAAtB;AACH,iBAFD;AAGH,eAJD;AAKH,aAND,MAMO;AACH,mBAAK9P,UAAL,CAAgBuD,IAAhB,CAAqBlE,OAArB,CAA6B,UAACkU,aAAD,EAAmB;AAC5CA,gBAAAA,aAAa,CAACzD,UAAd,GAA2B,KAA3B;AACH,eAFD;AAGH;;AAEDpK,YAAAA,QAAQ,CAACoK,UAAT,GAAsB,IAAtB;AACA,gBAAI1M,MAAM,GAAG,KAAKsZ,qBAAL,CAA2BhU,UAA3B,EAAuCyE,aAAvC,CAAb;AACA,iBAAK8Q,SAAL,CAAevY,QAAf,EAAyBwL,GAAzB,EAA8BxI,UAA9B,EAA0CyE,aAA1C,EAAyD/J,MAAzD;AACH;;;oCAESsC,Q,EAAUwL,G,EAAK9N,M,EAAQ;AAC7B,gBAAI8a,QAAQ,GAAG,KAAK9M,WAAL,CAAiBF,GAAjB,EAAsB9N,MAAtB,CAAf;AACA,gBAAI+a,YAAY,GAAG,KAAKriB,MAAL,CAAYuC,UAAZ,CAAuBK,eAAvB,GAAyC,KAAK5C,MAAL,CAAYuC,UAAZ,CAAuBM,oBAAnF;;AAEA,iBAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAI,KAAK+H,SAAL,CAAeyW,QAAQ,CAAChR,CAAxB,EAA2BxN,CAAC,GAAGye,YAA/B,EAA6C,CAACze,CAAC,GAAG,CAAL,IAAUye,YAAvD,CAAJ,EAA0E;AACtE,oBAAI7e,MAAM,GAAG,KAAKJ,KAAL,CAAWC,UAAX,CAAsBO,CAAtB,CAAb;;AAEA,oBAAIJ,MAAM,CAAC8e,QAAP,IAAmB9e,MAAM,CAAC8e,QAAP,IAAmB,EAA1C,EAA8C;AAC1CC,kBAAAA,MAAM,CAACrZ,IAAP,CAAY1F,MAAM,CAAC8e,QAAP,GAAkB,oBAAlB,GAAyC1Y,QAAQ,CAACA,QAA9D,EACIA,QAAQ,CAACA,QADb,EACuB,0CADvB;AAEH;;AAED;AACH;AACJ;AACJ;;;qCAEU1E,K,EAAOkQ,G,EAAK;AACnB,gBAAIxL,QAAQ,GAAG,KAAK1F,UAAL,CAAgBuD,IAAhB,CAAqBvC,KAArB,CAAf;AACA0E,YAAAA,QAAQ,CAACoK,UAAT,GAAsB,IAAtB;AACA,gBAAI1M,MAAM,GAAG,KAAKga,uBAAL,CAA6Bpc,KAA7B,CAAb;AACA,iBAAKid,SAAL,CAAevY,QAAf,EAAyBwL,GAAzB,EAA8B9N,MAA9B;AACH;;;uCAEY9D,M,EAAQ;AACjBhF,YAAAA,CAAC,CAACyV,MAAF,CAAS,KAAK7Q,KAAL,CAAWC,UAApB,EAAgC,UAAC8H,MAAD,EAAY;AACxC,qBAAOA,MAAM,IAAI3H,MAAjB;AACH,aAFD;AAGH;;;sCAEW;AACR,gBAAIA,MAAM,GAAG,EAAb;AACAA,YAAAA,MAAM,CAAC7B,KAAP,GAAe,SAAf;AACA,iBAAKyB,KAAL,CAAWC,UAAX,CAAsBI,IAAtB,CAA2BD,MAA3B;AACH;;;;QAjxF4BlF,gB;;AAoxFjCG,MAAAA,WAAW,CAAC+jB,WAAZ,GAA0B,aAA1B","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n        this.initialiseStartingVariables();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 10,\n            verticalAxisLength: 500,\n            barWidth: 5,\n            minimumBarHeight: 2,\n            marginBetweenSliderAndChart: 50,\n            thresholdBarLength: 10,\n            maxOffsetToSelectBar: 20\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 8,\n            ungroupedPointWidth: 35,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    query: \"avg by (instance) (node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        //   this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                // add lightest shade as defined by user\n                metric.colorList = [];\n                metric.colorList.push(metric.color);\n                var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n                // add the other shades\n                for (var i = 1; i < this.config.colorCount; ++i) {\n                    var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n                    metric.colorList.push(color);\n                }\n            });\n        }\n    }\n\n    initialiseStartingVariables() {\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.histogramModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = this.isGrouped ? \"default\" : \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.panel.metricList[index].colorList;\n            metric.layerRange = Math.round(metric.max / colorList.length);\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.overviewModel.data = [];\n        this.sortOverviewData();\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[0] - second[0];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseMetricSingleAttributeGroups(metric, metricIndex);\n            this.initialiseSingleAttributeGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleAttributeInstanceGroupList();\n    }\n\n    initialiseMetricSingleAttributeGroups(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                var min = search.total * (1 - thresholdValue);\n                var max = search.total * (1 + thresholdValue);\n                return this.isBetween(instance.metricList[metricIndex].total, min, max);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleAttributeGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleAttributeInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                for (var i = 0; i < metric.thresholdGroupListMap.length; ++i) {\n                    var group = metric.thresholdGroupListMap[i];\n\n                    if (instance.metricList[metricIndex].total == group.total) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiAttributeGroupList(groupList, groupingThreshold);\n            this.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiAttributeGroupsColor();\n    }\n\n    populateMultiAttributeGroupList(groupList, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiAttributeGroup(groupList, thresholdValue, instance);\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiAttributeGroup(groupList, thresholdValue, instance) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n                var min = metric.total * (1 - thresholdValue);\n                var max = metric.total * (1 + thresholdValue);\n\n                if (!this.isBetween(instance.metricList[i].total, min, max)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiAttributeGroupsColor() {\n        this.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocusArea();\n            this.drawOverview();\n        }\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n            this.scope.$apply();\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n        this.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleAttributeGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiAttributeGroupSize() * this.config.overview.multipleAttributeGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getCurrentSingleAttributeGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiAttributeGroupList() {\n        return this.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                    metric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeAttributeGroupedOverview();\n        } else {\n            this.drawMultiAttributeGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeAttributeGroupedOverview() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            this.drawMetricSeparator(metric);\n        });\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight, this.config.overview.marginBetweenGroups, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, instanceIndex, pointHeight, marginBetweenInstances, metricIndexList) {\n        instance.y = this.overviewModel.overviewStartY + instanceIndex * (pointHeight + marginBetweenInstances);\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex,\n                        this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result = null;\n\n        map.forEach((color, threshold) => {\n            if (!result && this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiAttributeGroupedOverview() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - labelWidth) / 2);\n        });\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.overviewModel.labelTextHeight);\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY +\n            groupIndex * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize + labelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - labelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        if (!this.isCompressed) {\n            // this.drawGroupBars();\n        }\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.decompressedMarginBetweenMetrics / 2 -\n                Math.floor(this.config.overview.groupBarWidth / 2);\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.thresholdGroupListMap.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x, y, this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    closeHistogram() {\n        this.showHistogram = false;\n\n        if (this.changedColorThreshold) {\n            this.changedColorThreshold = false;\n            this.drawOverview();\n\n            if (this.isGrouped) {\n                var temp = this.focusModel.groupList;\n                this.focusModel.groupList = [];\n\n                temp.forEach((group) => {\n                    this.addOrRemoveGroupToFocus(group.overviewGroup, true);\n                });\n\n                this.drawFocusGraph();\n            } else {\n                this.drawFocusGraph();\n            }\n        }\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        });\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiAttributeGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    moveMouseOnHistogram(evt) {\n        this.histogramModel.mousePosition = this.getMousePos(evt, this.histogramCanvas);\n\n        if (this.histogramModel.isSelectingBar) {\n            this.setNewThresholdValue();\n        } else {\n            this.checkAndSetSelectedHistogramThresholdBar();\n        }\n    }\n\n    setNewThresholdValue() {\n        this.changedColorThreshold = true;\n        // defines the max/min value from the next threshold that current threshold can be adjusted to\n        var offsetValue = Math.round(this.config.histogram.maxOffsetToSelectBar / this.config.histogram.barWidth);\n        var value = Math.round((this.histogramModel.mousePosition.x - this.histogramModel.horizontalAxisStartX) / this.config.histogram.barWidth);\n        value = Math.max(value, 0 + offsetValue);\n        value = Math.min(value, this.histogramModel.metric.max - offsetValue);\n\n        this.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            if (threshold != this.histogramModel.selectedBar.threshold) {\n                if (value >= this.histogramModel.selectedBar.threshold.max) {\n                    // move right\n                    if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                        value = Math.min(value, threshold.max - offsetValue);\n                        threshold.min = value;\n                    }\n                } else {\n                    // move left\n                    if (this.histogramModel.selectedBar.threshold.min == 0) {\n                        // left most threshold\n                        if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    } else {\n                        // left threshold\n                        if (threshold.max == this.histogramModel.selectedBar.threshold.min) {\n                            value = Math.max(value, threshold.max + offsetValue);\n                        }\n\n                        // right threshold\n                        if (threshold.min == this.histogramModel.selectedBar.threshold.max) {\n                            threshold.min = value;\n                        }\n                    }\n                }\n            }\n        });\n\n        this.histogramModel.selectedBar.threshold.max = value;\n        this.drawHistogram();\n    }\n\n    checkAndSetSelectedHistogramThresholdBar() {\n        this.histogramCursor = \"default\";\n        this.histogramModel.selectedBar = null;\n        var topY = this.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        var bottomY = this.histogramModel.sliderY + this.config.histogram.thresholdBarLength / 2;\n\n        if (this.isBetween(this.histogramModel.mousePosition.y, topY, bottomY)) {\n            for (var i = 0; i < this.histogramModel.thresholdBarList.length; ++i) {\n                var bar = this.histogramModel.thresholdBarList[i];\n                var leftX = bar.x - this.config.histogram.maxOffsetToSelectBar;\n                var rightX = bar.x + this.config.histogram.maxOffsetToSelectBar;\n\n                if (this.isBetween(this.histogramModel.mousePosition.x, leftX, rightX)) {\n                    this.histogramCursor = \"pointer\";\n                    this.histogramModel.selectedBar = bar;\n                    break;\n                }\n            }\n        }\n    }\n\n    mouseDownOnHistogram() {\n        if (this.histogramModel.selectedBar) {\n            this.histogramModel.isSelectingBar = true;\n        }\n    }\n\n    mouseUpOnHistogram() {\n        this.histogramModel.isSelectingBar = false;\n        this.histogramModel.selectedBar = null;\n        this.histogramCursor = \"default\";\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.clearFocusArea();\n        this.clearTimeIndicator();\n        this.deselectAllGroups();\n        this.showFocus = false;\n        this.showMergeSelectedGroups = false;\n    }\n\n    deselectAllGroups() {\n        this.focusModel.groupList = [];\n        this.deselectSingleAttributeGroups();\n        this.deselectMultiAttributeGroups();\n    }\n\n    deselectSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                });\n            }\n        });\n    }\n\n    deselectMultiAttributeGroups() {\n        if (this.overviewModel.originalGroupList) {\n            this.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.overviewModel.originalGroupList);\n            this.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.changeGroupingSelection();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    mergeSelectedGroups() {\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleAttributeGroups();\n        } else {\n            this.mergeMultipleAttributeGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.showMergeSelectedGroups = false;\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph();\n    }\n\n    mergeSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = JSON.parse(JSON.stringify(group));\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    mergeFocusGroupList() {\n        this.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiAttributeGroupList());\n        }\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    mergeMultipleAttributeGroups() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        if (!this.overviewModel.originalGroupList) {\n            this.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.thresholdGroupListMap) {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped && this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.overviewModel.isSelectingTimeRange = true;\n            this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset;\n            this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        this.histogramModel.metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        this.drawHistogramAxes();\n        this.drawHistogramMaxValueAndOccurence();\n        this.drawHistogramBars();\n        this.drawHistogramThresholdSlider();\n    }\n\n    drawHistogramAxes() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.histogramModel.verticalAxisStartY = this.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.lineWdith = 1;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"gray\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis();\n        this.drawHistogramHorizontalAxis();\n    }\n\n    drawHistogramVerticalAxis() {\n        var occurences = \"occurences\";\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(this.histogramModel.metric.histogram.max).width;\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        this.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers + verticalLabelWidth / 2;\n        this.histogramCanvasContext.fillText(occurences, this.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.overviewModel.labelTextHeight);\n        this.histogramModel.horizontalAxisY = this.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLength;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis() {\n        this.histogramModel.horizontalAxisEndX = this.histogramModel.horizontalAxisStartX +\n            this.config.histogram.barWidth * (this.histogramModel.metric.max + 1);\n        var labelX = this.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.histogramModel.horizontalAxisY + this.overviewModel.labelTextHeight / 2;\n        var panelMetric = this.panel.metricList[this.overviewModel.selectedMetricIndex];\n        this.histogramCanvasContext.fillText(panelMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence() {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        var occurenceLabelY = this.histogramModel.verticalAxisStartY + this.overviewModel.labelTextHeight / 2\n        this.histogramCanvasContext.fillText(this.histogramModel.metric.histogram.max, 0, occurenceLabelY);\n        var maxValueWidth = this.histogramCanvasContext.measureText(this.histogramModel.metric.max).width;\n        var valueLabelY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(this.histogramModel.metric.max, this.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.histogramModel.horizontalAxisStartX - this.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    drawHistogramBars() {\n        var occurenceStep = this.config.histogram.verticalAxisLength / this.histogramModel.metric.histogram.max;\n\n        this.histogramModel.metric.histogram.data.forEach((occurences, value) => {\n            this.histogramCanvasContext.fillStyle = this.getColorFromMap(value, this.histogramModel.metric.colorMap);\n            var x = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * value;\n            var y = this.histogramModel.horizontalAxisY - occurenceStep * occurences;\n            var height = this.histogramModel.horizontalAxisY - y;\n            var minHeight = this.config.histogram.minimumBarHeight;\n\n            if (height < minHeight) {\n                y = this.histogramModel.horizontalAxisY - minHeight;\n                height = minHeight;\n            }\n\n            this.histogramCanvasContext.fillRect(x, y, this.config.histogram.barWidth, height);\n        });\n    }\n\n    drawHistogramThresholdSlider() {\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.drawHistogramSliderLine();\n        this.drawHistogramThresholdBars();\n    }\n\n    drawHistogramSliderLine() {\n        this.histogramModel.sliderY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenSliderAndChart;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.sliderY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.sliderY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramThresholdBars() {\n        var thresholdBarY = this.histogramModel.sliderY - this.config.histogram.thresholdBarLength / 2;\n        this.histogramModel.thresholdBarList = [];\n        var i = 0;\n\n        this.histogramModel.metric.colorMap.forEach((color, threshold) => {\n            var bar = {};\n            bar.threshold = threshold;\n            bar.x = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * threshold.max;\n\n            // no need to draw slider bar for last threshold\n            if (i < this.histogramModel.metric.colorMap.size - 1) {\n                this.histogramCanvasContext.beginPath();\n                this.histogramCanvasContext.moveTo(bar.x, thresholdBarY);\n                this.histogramCanvasContext.lineTo(bar.x, thresholdBarY + this.config.histogram.thresholdBarLength);\n                this.histogramCanvasContext.stroke();\n                this.histogramCanvasContext.closePath();\n                ++i;\n            }\n\n            this.histogramModel.thresholdBarList.push(bar);\n        });\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.overviewModel.selectedMetricIndex >= 0) {\n                if (this.isBetween(this.overviewModel.mousePosition.y, 0, this.overviewModel.overviewStartY)) {\n                    this.isSelectingMetricLabel = true;\n                    this.setOverviewCursorToPointer();\n                } else {\n                    this.deselectMetricLabel();\n                }\n            } else {\n                this.deselectMetricLabel();\n            }\n\n            if (this.isGrouped) {\n                this.handleMouseMoveOnGroupedOverview();\n            } else if (!this.isCompressed && !this.focusAreaIsFixed) {\n                this.drawFocus(evt);\n            }\n        } else {\n            this.deselectMetricLabel();\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    deselectMetricLabel() {\n        this.isSelectingMetricLabel = false;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.overviewModel.hoveredGroup = null;\n        this.overviewModel.hoveredMarker = null;\n        this.checkAndSetSelectedOverviewMarker();\n\n        if (this.overviewModel.selectedMetricIndex >= 0) {\n            this.checkAndSetHoveredGroup();\n        }\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n            if (this.overviewModel.hoveredGroup) {\n                if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                    this.setSelectedTimeIndex();\n                }\n\n                this.drawTimeIndicators();\n            } else {\n                this.clearTimeIndicator();\n            }\n        } else if (this.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.overviewCursor = \"pointer\";\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleAttributeGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiAttributeGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiAttributeGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleAttributeGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.timeRangeMetricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiAttributeGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n    }\n\n    mouseUpOnOverView(evt) {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph();\n            }\n        } else if (!this.isCompressed) {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph();\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph();\n                    break;\n                }\n            }\n        }\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            this.clearFocusArea();\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            var size = this.getFocusAreaSize();\n            var offset = this.getFocusAreaOffset();\n\n            if (offset >= 0) {\n                this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n                this.overviewModel.metricList.forEach((metric) => {\n                    metric.focusStartX = metric.startX + offset;\n                    this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n                });\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    this.focusModel.sourceMetricIndex = i;\n\n                    return Math.min(Math.max(metric.startX,\n                        this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                        metric.endX - this.getFocusAreaSize()) - metric.startX;\n                }\n            }\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((instanceMetric, metricIndex) => {\n            for (var i = 0; i < this.config.colorCount; ++i) {\n                var layer = {};\n                layer.valueList = [];\n                instanceMetric.layerList.push(layer);\n            }\n\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            instanceMetric.data.forEach((point) => {\n                var value = point.value;\n                var colorList = this.panel.metricList[metricIndex].colorList;\n\n                instanceMetric.layerList.forEach((layer, layerIndex) => {\n                    overviewMetric.colorMap.forEach((color, threshold) => {\n                        if (color == colorList[layerIndex]) {\n                            layer.valueList.push(value > 0 ? value : 0);\n                            value -= threshold.max;\n                            layer.range = threshold.max - threshold.min;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.drawGroupedFocusGraphInstance(canvas, instance, Array.from(Array(maxMetricLength).keys()), this.getFocusGraphPointWidth());\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            var pointWidth = Math.floor(this.focusGraphWidth / group.overviewGroup.timeRangeIndexList.length);\n            this.drawGroupedFocusGraphInstance(canvas, instance, group.overviewGroup.timeRangeIndexList, pointWidth);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, instance, valueIndexList, pointWidth) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context, valueIndexList, pointWidth);\n    }\n\n    drawFocusGraphInstance(instance, context, valueIndexList, pointWidth) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != null) {\n                        x = pointWidth * positionIndex;\n                        this.moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context, Array.from(Array(this.getMaxMetricLength()).keys()), this.config.focusGraph.ungroupedPointWidth);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveFocusGraphContextBasedOnValue(context, value, previousValue, layer, layerIndex, x, y, previousX) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(x, y);\n        } else {\n            // move to previous position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(previousX, y);\n            }\n\n            var height;\n\n            if (value >= layer.range) {\n                height = this.config.focusGraph.metricMaxHeight;\n            } else {\n                height = value * this.config.focusGraph.metricMaxHeight / layer.range;\n            }\n\n            height = Math.max(5, height);\n            context.lineTo(x, y - height);\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    selectNode(index, evt) {\n        var instance = this.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}