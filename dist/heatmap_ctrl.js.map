{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","HeatmapCtrl","$scope","$injector","$timeout","$interval","variableSrv","timeSrv","initialiseConfig","initialisePanelDefaults","initialisePredefinedMetricOptionList","initialiseMetricsColorList","initialiseStartingVariables","events","on","onInitEditMode","bind","onDataReceived","initialiseGeneralConfig","initialiseOverviewConfig","initialiseFocusAreaConfig","initialiseHistogramConfig","initialiseTimeIndicatorConfig","initialiseFocusGraphConfig","config","apiAddress","dateFormat","colorCount","maxLuminanceChange","marginBetweenOverviewAndFocus","groupingThresholdCount","startingGreyColor","endingGrayColor","intervalTimer","overview","topAndBottomPadding","metricFontSize","timeFontSize","marginBetweenLabelsAndOverview","pointWidth","ungroupedPointHeight","groupedPointHeight","compressedMarginBetweenMetrics","decompressedMarginBetweenMetrics","marginBetweenGroups","groupBarWidth","singleAttributeGroupSizeWidth","multipleAttributeGroupSizeWidth","marginBetweenMarkerAndGroup","marginBetweenMetricAndGroupSize","focusArea","color","focusAreaSize","xCrossSize","timeIndicator","histogram","marginBetweenAxesAndNumbers","verticalAxisLenghth","barWidth","focusGraph","maxWidth","maxHeight","groupedPointWidth","ungroupedPointWidth","metricMaxHeight","marginBetweenMetrics","panelDefaults","predefinedMetricList","name","unit","query","defaults","panel","metricList","predefinedMetricOptionList","forEach","metric","push","colorList","luminanceChange","i","changeColorLuminance","firstLoad","overviewModel","histogramModel","groupMarkerList","focusModel","groupList","hex","lum","String","replace","length","rgb","c","parseInt","substr","Math","round","min","max","toString","index","isCustom","predefinedMetric","JSON","parse","stringify","scope","elem","initialiseControl","initialiseUIElements","enumList","groupingMode","SINGLE","MULTIPLE","timeHighlightMode","POINT","RANGE","groupingThreshold","initialiseOverviewCanvasCursor","overviewCursor","overviewCanvas","getElementByID","overviewContext","getCanvasContext","focusAreaCanvas","focusAreaContext","histogramCanvas","histogramCanvasContext","overviewTimeIndicatorCanvas","overviewTimeIndicatorContext","focusGraphWidth","focusGraphHeight","focusGraphContainer","id","find","canvas","getContext","addEditorTab","data","load","isLoading","$apply","loadCount","fromDate","getDateInSeconds","timeRange","from","_d","toDate","to","getDataFromAPI","processRawData","date","getTime","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","result","url","encodeURIComponent","open","send","includes","convertDataToFloat","initialiseMetricMinMaxTotal","initialiseColorMap","initialiseOverviewData","initialiseOverviewGroups","initialiseCompressedTimeIndexes","renderOverview","instance","values","value","parseFloat","point","checkAndSetOverviewMinMax","console","log","layerRange","colorMap","getColorMap","Map","threshold","average","set","sortOverviewData","populateOverviewDataAndInitialiseHistogramData","calculateInstanceMetricTotalMinMax","sort","first","second","total","metricIndex","metricInstance","newInstance","search","initaliseNewInstance","has","occurences","get","setHistogramMinMax","getThresholdAverage","map","isBetween","target","start","end","initialiseSingleAttributeGroups","initialiseMultiAttributeGroups","initialiseMetricSingleAttributeGroups","initialiseSingleAttributeGroupsColor","initialiseSingleAttributeInstanceGroupList","thresholdGroupListMap","populateSingleAttributeGroupList","thresholdValue","group","initialiseNewSingleAttributeGroups","instanceList","markerX","originalColor","groupIndex","populateMultiAttributeGroupList","initialiseMultiAttributeGroupsColor","findExistingMultiAttributeGroup","initialiseNewMultiAttributeGroup","instanceMetric","groupMetric","greyValue","overviewMetric","compressedTimeIndexList","initialiseInstanceCompressedTimeRangeList","compressedIndexRangeList","range","presviousRange","pointIndex","thresholdAverage","initialiseNewCompressedTimeRange","clearFocusArea","drawOverview","hasFocus","clearRect","width","height","setOverviewCanvasSize","focusGraphMarginTop","overviewCanvasHeight","drawOverviewData","setOverviewContextLabelFont","labelTextHeight","measureText","overviewStartY","setOverviewWidth","setOverviewHeight","setOverviewContextTimeFont","getMarginBetweenMetrics","overviewWidth","isCompressed","getMaxMetricLength","overviewCanvasWidth","convertDateToString","toDateWidth","isGrouped","setGroupedOverviewCanvasWidth","instanceWithMostPoints","maxBy","getMaxGroupSizeBarLength","getMaxMultiAttributeGroupSize","getCurrentSingleAttributeGroupList","largestGroup","getCurrentMultiAttributeGroupList","groupCount","getMaxGroupCount","overviewHeight","font","overviewEndY","setOverviewMetricStartXAndEndX","drawGroupedOverview","drawUngroupedOverview","drawMetricLabels","drawToDateLabel","setOverviewMetricStartX","endX","startX","previousMetric","maxGroupSizeBarLength","overviewInstanceHeight","drawSingeAttributeGroupedOverview","drawMultiAttributeGroupedOverview","drawGroupSize","drawGroupOverviewWrapper","drawMetricSeparator","metricIndexList","drawOverviewInstance","y","instanceIndex","pointHeight","marginBetweenInstances","endY","drawOverviewInstancePoints","rangeIndex","drawOverviewInstancePoint","x","getColorFromMap","fillStyle","fillRect","getAllMetricIndexList","Array","keys","label","labelWidth","drawSingleAttributeGroupSize","drawMultipleAttributeGroupSize","drawGroupSizeWrapper","drawGroupSizeLabel","fillText","groupSizeWidth","startY","beginPath","moveTo","lineTo","closePath","fill","maxEndX","strokeStyle","stroke","floor","drawGroupBarAtPosition","getMetricDarkestColor","format","changeGroupingSelection","clearTimeIndicator","deselectAllGroups","showFocus","showMergeSelectedGroups","deselectSingleAttributeGroups","deselectMultiAttributeGroups","originalGroupList","previousGroupThreshold","isSelected","timeRangeIndexList","mergeSingleAttributeGroups","mergeMultipleAttributeGroups","mergeFocusGroupList","drawSelectedGroupsMarkers","drawFocusGraph","mergeSelectedGroupsWrapper","currentGroupList","populateMergedGroupList","mergedGroup","mergeFocusGroupListWrapper","addGroupToFocus","focusGroup","overviewGroup","overviewInstance","metricWithMostData","focusedIndexList","focusInstance","getFocusInstance","evt","isSelectingMetricLabel","showHistogram","drawHistogram","hoveredGroup","isSelectingTimeRange","timeRangeStartOffset","mousePositionXOffset","timeRangeGroup","selectedMetricIndex","panelMetric","drawHistogramAxes","verticalAxisStartY","drawHistogramVerticalAxis","drawHistogramHorizontalAxis","drawHistogramMaxValueAndOccurence","maxOccurenceWidth","verticalLabelWidth","horizontalAxisStartX","horizontalAxisY","horizontalAxisEndX","labelX","labelY","maxValueWidth","valueLabelY","originX","setOverviewMousePosition","setSelectedMetricIndex","mousePosition","setOverviewCursorToPointer","handleMouseMoveOnGroupedOverview","focusAreaIsFixed","drawFocus","getMousePos","rect","getBoundingClientRect","clientX","left","clientY","top","checkMouseIsInMetric","hoveredMarker","checkAndSetSelectedOverviewMarker","checkAndSetHoveredGroup","setSelectedTimeIndex","drawTimeIndicators","initialiseSelectedGroupTimeRangeIndexList","drawSelectedTimeRanges","markerIndex","marker","checkAndSetHoveredGroupInGroupList","checkGroupIsHovered","compressedTimeIndex","checkDataPointIsSelected","selectedTimeIndex","drawTimeIndicatorWrapper","drawSelectedTimeLabel","horizontalLineY","drawHorizontalTimeLine","verticalLineX","getTimeIndicatorXForNonSelectedMetric","drawSelectedTimePoint","previousPointIndex","currentPointIndex","checkDataPointIsSelectedAndDrawTimeLabel","timeRangeMetricIndex","temp","setTimeRangeStartAndEndDate","startPoint","startTimeRangeDate","endPoint","endTimeRangeDate","drawSelectedTimeRangeWrapper","startRangeIndex","endRangeIndex","getTimeRangePointWrapper","drawSelectedTimeRangeLines","startFocusMarkerInterval","updateSelectedGroupListAndDrawFocusGraph","fixFocusArea","updatedSelectedGroups","addOrRemoveGroupToFocus","stopInterval","removeExisting","remove","setShowMergeGroupsButton","setShowMergeGroupsButtonWrapper","selectedGroupCount","indexList","initialiseFocusInstanceData","drawOverviewGroupMarker","focusGroupWithInterval","initialiseFocusMarkerInterval","stopOverviewMarkerInterval","stopFocusMarkerInterval","currentOverviewMarkerInterval","cancel","overviewGroupWithInterval","overviewMarkerX","overviewGroupWithIntervalList","currentFocusMarkerInterval","focusMarkerX","drawGroupFocusMarkers","focusMarkerMovingBackwards","handleFocusMarkerMovingBackwardCase","handleFocusMarkerMovingForwardCase","marginBetweenMarkers","drawFocusArea","size","getFocusAreaSize","minimumTopY","focusStartY","offset","getFocusAreaOffset","focusStartX","strokeRect","sourceMetricIndex","initialiseFocusGraphData","getFocusGraphPointWidth","focusGraphRow","focusRowHeight","offsetHeight","setFocusFromAndToDate","positionFocusFromAndToDate","drawFocusGraphData","autoSrollFocusGraph","checkInstanceInFocus","getIndexesOfPointsInFocus","indexes","addFocusMetrics","initialiseInstanceLayers","focusMetric","layerList","layer","valueList","fromIndex","toIndex","focusedFromDate","focusedToDate","canvasStartX","offsetLeft","fromDateWidth","fromDateLeftMargin","toDateLeftMargin","focusGraphMarkerWidth","markerSize","focusGraphMarkerHeight","drawGroupedFocusGraph","drawUngroupedFocusGraph","showDetails","drawGroupedFocusMarker","context","groupWithMarkerList","instanceGroup","instanceGroupIndex","drawGroupedFocusMarkerWrapper","drawGroupedFocusGraphWrapper","maxMetricLength","getGroupedFocusCanvas","drawGroupedFocusGraphInstance","valueIndexList","drawFocusGraphInstance","layerIndex","previousX","previousValue","valueIndex","positionIndex","undefined","moveContextBasedOnValue","graphBeginX","getUngroupedFocusCanvas","rowCount","scrollTop","scrollByInstance","getHoveredInstance","focusModelInstance","startOverviewMarkerInterval","initialiseOverviewMarkerInterval","overviewMarkerMovingBackwards","handleOverviewMarkerMovingBackwardCase","handleOverviewMarkerMovingForwardCase","event","preventDefault","showPopup","mousePos","metricHeight","popupURL","window","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,gB,kBAAAA,gB;;AAEFC,MAAAA,M;;AACAC,MAAAA,C;;;6BAEMC,W;;;;;AACT,6BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,WAApD,EAAiEC,OAAjE,EAA0E;AAAA;;AAAA;;AACtE,2FAAML,MAAN,EAAcC,SAAd;AACA,gBAAKC,QAAL,GAAgBA,QAAhB;AACA,gBAAKC,SAAL,GAAiBA,SAAjB;AACA,gBAAKC,WAAL,GAAmBA,WAAnB;AACA,gBAAKC,OAAL,GAAeA,OAAf;;AAEA,gBAAKC,gBAAL;;AACA,gBAAKC,uBAAL;;AACA,gBAAKC,oCAAL;;AACA,gBAAKC,0BAAL;;AACA,gBAAKC,2BAAL;;AAEA,gBAAKC,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,+BAAjC;;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKG,cAAL,CAAoBD,IAApB,+BAAhC;;AAdsE;AAezE;;;;6CAEkB;AACf,iBAAKE,uBAAL;AACA,iBAAKC,wBAAL;AACA,iBAAKC,yBAAL;AACA,iBAAKC,yBAAL;AACA,iBAAKC,6BAAL;AACA,iBAAKD,yBAAL;AACA,iBAAKE,0BAAL;AACH;;;oDAEyB;AACtB,iBAAKC,MAAL,GAAc;AACVC,cAAAA,UAAU,EAAE,yEADF;AAEVC,cAAAA,UAAU,EAAE,mBAFF;AAGVC,cAAAA,UAAU,EAAE,CAHF;AAIVC,cAAAA,kBAAkB,EAAE,GAJV;AAKVC,cAAAA,6BAA6B,EAAE,EALrB;AAMVC,cAAAA,sBAAsB,EAAE,EANd;AAOVC,cAAAA,iBAAiB,EAAE,GAPT;AAQVC,cAAAA,eAAe,EAAE,EARP;AASVC,cAAAA,aAAa,EAAE;AATL,aAAd;AAWH;;;qDAE0B;AACvB,iBAAKT,MAAL,CAAYU,QAAZ,GAAuB;AACnBC,cAAAA,mBAAmB,EAAE,EADF;AAEnBC,cAAAA,cAAc,EAAE,EAFG;AAGnBC,cAAAA,YAAY,EAAE,EAHK;AAInBC,cAAAA,8BAA8B,EAAE,EAJb;AAKnBC,cAAAA,UAAU,EAAE,CALO;AAMnBC,cAAAA,oBAAoB,EAAE,CANH;AAOnBC,cAAAA,kBAAkB,EAAE,CAPD;AAQnBC,cAAAA,8BAA8B,EAAE,GARb;AASnBC,cAAAA,gCAAgC,EAAE,EATf;AAUnBC,cAAAA,mBAAmB,EAAE,EAVF;AAWnBC,cAAAA,aAAa,EAAE,CAXI;AAYnBC,cAAAA,6BAA6B,EAAE,CAZZ;AAanBC,cAAAA,+BAA+B,EAAE,CAbd;AAcnBC,cAAAA,2BAA2B,EAAE,EAdV;AAenBC,cAAAA,+BAA+B,EAAE;AAfd,aAAvB;AAiBH;;;sDAE2B;AACxB,iBAAKzB,MAAL,CAAY0B,SAAZ,GAAwB;AACpBC,cAAAA,KAAK,EAAE,MADa;AAEpBC,cAAAA,aAAa,EAAE,EAFK;AAGpBC,cAAAA,UAAU,EAAE;AAHQ,aAAxB;AAKH;;;0DAE+B;AAC5B,iBAAK7B,MAAL,CAAY8B,aAAZ,GAA4B;AACxBH,cAAAA,KAAK,EAAE;AADiB,aAA5B;AAGH;;;sDAE2B;AACxB,iBAAK3B,MAAL,CAAY+B,SAAZ,GAAwB;AACpBC,cAAAA,2BAA2B,EAAE,EADT;AAEpBC,cAAAA,mBAAmB,EAAE,GAFD;AAGpBC,cAAAA,QAAQ,EAAE;AAHU,aAAxB;AAKH;;;uDAE4B;AAAA;;AACzB,iBAAKlC,MAAL,CAAYmC,UAAZ;AACIC,cAAAA,QAAQ,EAAE,KADd;AAEIC,cAAAA,SAAS,EAAE,KAFf;AAGIC,cAAAA,iBAAiB,EAAE,CAHvB;AAIIC,cAAAA,mBAAmB,EAAE,EAJzB;AAKIC,cAAAA,eAAe,EAAE,EALrB;AAMIC,cAAAA,oBAAoB,EAAE;AAN1B,mEAOe,KAPf,wDAQgB,EARhB,kEAS0B,EAT1B;AAWH;;;oDAEyB;AACtB,iBAAKC,aAAL,GAAqB;AACjBC,cAAAA,oBAAoB,EAAE,CAClB;AACIC,gBAAAA,IAAI,EAAE,KADV;AAEIC,gBAAAA,IAAI,EAAE,GAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eADkB,EAOlB;AACIF,gBAAAA,IAAI,EAAE,QADV;AAEIC,gBAAAA,IAAI,EAAE,GAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eAPkB,EAalB;AACIF,gBAAAA,IAAI,EAAE,MADV;AAEIC,gBAAAA,IAAI,EAAE,GAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eAbkB,EAmBlB;AACIF,gBAAAA,IAAI,EAAE,SADV;AAEIC,gBAAAA,IAAI,EAAE,KAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eAnBkB,EAyBlB;AACIF,gBAAAA,IAAI,EAAE,kBADV;AAEIC,gBAAAA,IAAI,EAAE,IAFV;AAGIC,gBAAAA,KAAK,EAAE;AAHX,eAzBkB;AADL,aAArB,CADsB,CAmCtB;AACA;;AACAtE,YAAAA,CAAC,CAACuE,QAAF,CAAW,KAAKC,KAAhB,EAAuB,KAAKN,aAA5B;;AAEA,gBAAI,CAAC,KAAKM,KAAL,CAAWC,UAAhB,EAA4B;AACxB,mBAAKD,KAAL,CAAWC,UAAX,GAAwB,KAAKD,KAAL,CAAWL,oBAAnC;AACH;AACJ;;;iEAEsC;AAAA;;AACnC,iBAAKO,0BAAL,GAAkC,EAAlC;AAEA,iBAAKR,aAAL,CAAmBC,oBAAnB,CAAwCQ,OAAxC,CAAgD,UAACC,MAAD,EAAY;AACxD,cAAA,MAAI,CAACF,0BAAL,CAAgCG,IAAhC,CAAqCD,MAAM,CAACR,IAA5C;AACH,aAFD;AAGH;;;uDAE4B;AAAA;;AACzB,gBAAI,KAAKI,KAAL,CAAWC,UAAf,EAA2B;AACvB,mBAAKD,KAAL,CAAWC,UAAX,CAAsBE,OAAtB,CAA8B,UAACC,MAAD,EAAY;AACtCA,gBAAAA,MAAM,CAACE,SAAP,GAAmB,EAAnB;AACAF,gBAAAA,MAAM,CAACE,SAAP,CAAiBD,IAAjB,CAAsBD,MAAM,CAACzB,KAA7B;AACA,oBAAI4B,eAAe,GAAG,CAAC,MAAI,CAACvD,MAAL,CAAYI,kBAAb,GAAkC,MAAI,CAACJ,MAAL,CAAYG,UAApE;;AAEA,qBAAK,IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAI,CAACxD,MAAL,CAAYG,UAAZ,GAAyB,CAA7C,EAAgD,EAAEqD,CAAlD,EAAqD;AACjD,sBAAI7B,KAAK,GAAG,MAAI,CAAC8B,oBAAL,CAA0BL,MAAM,CAACzB,KAAjC,EAAwC6B,CAAC,GAAGD,eAA5C,CAAZ;;AACAH,kBAAAA,MAAM,CAACE,SAAP,CAAiBD,IAAjB,CAAsB1B,KAAtB;AACH;AACJ,eATD;AAUH;AACJ;;;wDAE6B;AAC1B,iBAAK+B,SAAL,GAAiB,IAAjB;AACA,iBAAKC,aAAL,GAAqB,EAArB;AACA,iBAAKC,cAAL,GAAsB,EAAtB;AACA,iBAAKD,aAAL,CAAmBE,eAAnB,GAAqC,EAArC;AACA,iBAAKC,UAAL,GAAkB,EAAlB;AACA,iBAAKA,UAAL,CAAgBC,SAAhB,GAA4B,EAA5B;AACH;;;+CAEoBC,G,EAAKC,G,EAAK;AAC3BD,YAAAA,GAAG,GAAGE,MAAM,CAACF,GAAD,CAAN,CAAYG,OAAZ,CAAoB,aAApB,EAAmC,EAAnC,CAAN;;AAEA,gBAAIH,GAAG,CAACI,MAAJ,GAAa,CAAjB,EAAoB;AAChBJ,cAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ,GAAkBA,GAAG,CAAC,CAAD,CAArB,GAA2BA,GAAG,CAAC,CAAD,CAA9B,GAAoCA,GAAG,CAAC,CAAD,CAAvC,GAA6CA,GAAG,CAAC,CAAD,CAAtD;AACH;;AAEDC,YAAAA,GAAG,GAAGA,GAAG,IAAI,CAAb;AACA,gBAAII,GAAG,GAAG,GAAV;AAAA,gBAAeC,CAAf;AAAA,gBAAkBd,CAAlB;;AAEA,iBAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACpBc,cAAAA,CAAC,GAAGC,QAAQ,CAACP,GAAG,CAACQ,MAAJ,CAAWhB,CAAC,GAAG,CAAf,EAAkB,CAAlB,CAAD,EAAuB,EAAvB,CAAZ;AACAc,cAAAA,CAAC,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYN,CAAC,GAAIA,CAAC,GAAGL,GAArB,CAAT,EAAqC,GAArC,CAAX,EAAsDY,QAAtD,CAA+D,EAA/D,CAAJ;AACAR,cAAAA,GAAG,IAAI,CAAC,OAAOC,CAAR,EAAWE,MAAX,CAAkBF,CAAC,CAACF,MAApB,CAAP;AACH;;AAED,mBAAOC,GAAP;AACH;;;iDAEsBS,K,EAAO;AAC1B,gBAAI1B,MAAM,GAAG,KAAKJ,KAAL,CAAWC,UAAX,CAAsB6B,KAAtB,CAAb;;AAEA,gBAAI,CAAC1B,MAAM,CAAC2B,QAAZ,EAAsB;AAClB,mBAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWL,oBAAX,CAAgCyB,MAApD,EAA4D,EAAEZ,CAA9D,EAAiE;AAC7D,oBAAIwB,gBAAgB,GAAG,KAAKhC,KAAL,CAAWL,oBAAX,CAAgCa,CAAhC,CAAvB;;AAEA,oBAAIJ,MAAM,CAACR,IAAP,IAAeoC,gBAAgB,CAACpC,IAApC,EAA0C;AACtC,uBAAKI,KAAL,CAAWC,UAAX,CAAsB6B,KAAtB,IAA+BG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,gBAAf,CAAX,CAA/B;AACA;AACH;AACJ;AACJ;AACJ;;;+BAEII,K,EAAOC,I,EAAM;AACd,iBAAKD,KAAL,GAAaA,KAAb;AACA,iBAAKC,IAAL,GAAYA,IAAZ;AAEA,iBAAKC,iBAAL;AACA,iBAAKC,oBAAL;AACH;;;8CAEmB;AAChB,iBAAKC,QAAL,GAAgB;AACZC,cAAAA,YAAY,EAAE;AACVC,gBAAAA,MAAM,EAAE,GADE;AAEVC,gBAAAA,QAAQ,EAAE;AAFA,eADF;AAMZC,cAAAA,iBAAiB,EAAE;AACfC,gBAAAA,KAAK,EAAE,GADQ;AAEfC,gBAAAA,KAAK,EAAE;AAFQ;AANP,aAAhB;AAYA,iBAAKL,YAAL,GAAoB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAA/C;AACA,iBAAKK,iBAAL,GAAyB,CAAzB;AACA,iBAAKH,iBAAL,GAAyB,KAAKJ,QAAL,CAAcI,iBAAd,CAAgCC,KAAzD;AACA,iBAAKG,8BAAL;AACH;;;2DAEgC;AAC7B,iBAAKC,cAAL,GAAsB,WAAtB;AACH;;;iDAEsB;AACnB;AACA,iBAAKC,cAAL,GAAsB,KAAKC,cAAL,CAAoB,gBAApB,CAAtB;AACA,iBAAKC,eAAL,GAAuB,KAAKC,gBAAL,CAAsB,KAAKH,cAA3B,CAAvB,CAHmB,CAKnB;;AACA,iBAAKI,eAAL,GAAuB,KAAKH,cAAL,CAAoB,iBAApB,CAAvB;AACA,iBAAKI,gBAAL,GAAwB,KAAKF,gBAAL,CAAsB,KAAKC,eAA3B,CAAxB,CAPmB,CASnB;;AACA,iBAAKE,eAAL,GAAuB,KAAKL,cAAL,CAAoB,iBAApB,CAAvB;AACA,iBAAKM,sBAAL,GAA8B,KAAKJ,gBAAL,CAAsB,KAAKG,eAA3B,CAA9B,CAXmB,CAanB;;AACA,iBAAKE,2BAAL,GAAmC,KAAKP,cAAL,CAAoB,6BAApB,CAAnC;AACA,iBAAKQ,4BAAL,GAAoC,KAAKN,gBAAL,CAAsB,KAAKK,2BAA3B,CAApC,CAfmB,CAiBnB;;AACA,iBAAKE,eAAL,GAAuB,KAAK5G,MAAL,CAAYmC,UAAZ,CAAuBC,QAA9C;AACA,iBAAKyE,gBAAL,GAAwB,KAAK7G,MAAL,CAAYmC,UAAZ,CAAuBE,SAA/C;AACA,iBAAKyE,mBAAL,GAA2B,KAAKX,cAAL,CAAoB,qBAApB,CAA3B;AACH;;;yCAEcY,E,EAAI;AACf,gBAAIC,IAAI,GAAG,KAAK3B,IAAL,CAAU2B,IAAV,CAAe,MAAMD,EAArB,CAAX;AACA,mBAAOC,IAAI,CAAC,CAAD,CAAX;AACH;;;2CAEgBC,M,EAAQ;AACrB,mBAAOA,MAAM,CAACC,UAAP,CAAkB,IAAlB,CAAP;AACH;;;2CAEgB;AACb,iBAAKC,YAAL,CAAkB,SAAlB,EAA6B,8CAA7B,EAA6E,CAA7E;AACH;;;yCAEcC,I,EAAM;AACjB,iBAAKC,IAAL;AACH;;;iCAEM;AAAA;;AACH,iBAAKzI,QAAL,CAAc,YAAM;AAChB,cAAA,MAAI,CAAC0I,SAAL,GAAiB,IAAjB;;AAEA,cAAA,MAAI,CAAClC,KAAL,CAAWmC,MAAX;;AAEA,cAAA,MAAI,CAAC5D,aAAL,CAAmBV,UAAnB,GAAgC,EAAhC;;AAEA,cAAA,MAAI,CAACD,KAAL,CAAWC,UAAX,CAAsBE,OAAtB,CAA8B,YAAM;AAChC,gBAAA,MAAI,CAACQ,aAAL,CAAmBV,UAAnB,CAA8BI,IAA9B,CAAmC,IAAnC;AACH,eAFD;;AAIA,cAAA,MAAI,CAACmE,SAAL,GAAiB,CAAjB;AACA,cAAA,MAAI,CAACC,QAAL,GAAgB,MAAI,CAACC,gBAAL,CAAsB,MAAI,CAAC3I,OAAL,CAAa4I,SAAb,GAAyBC,IAAzB,CAA8BC,EAApD,CAAhB;AACA,cAAA,MAAI,CAACC,MAAL,GAAc,MAAI,CAACJ,gBAAL,CAAsB,MAAI,CAAC3I,OAAL,CAAa4I,SAAb,GAAyBI,EAAzB,CAA4BF,EAAlD,CAAd;;AAEA,cAAA,MAAI,CAAC7E,KAAL,CAAWC,UAAX,CAAsBE,OAAtB,CAA8B,UAACC,MAAD,EAAS0B,KAAT,EAAmB;AAC7C,gBAAA,MAAI,CAACkD,cAAL,CAAoB5E,MAAM,CAACN,KAA3B,EAAkCgC,KAAlC;AACH,eAFD;;AAIA,cAAA,MAAI,CAACmD,cAAL;AACH,aApBD;AAqBH;;;2CAEgBC,I,EAAM;AACnB,mBAAOzD,IAAI,CAACC,KAAL,CAAWwD,IAAI,CAACC,OAAL,KAAiB,IAA5B,CAAP;AACH;;;yCAEcrF,K,EAAOgC,K,EAAO;AAAA;;AACzB,gBAAIsD,OAAO,GAAG,IAAIC,cAAJ,EAAd;;AAEAD,YAAAA,OAAO,CAACE,kBAAR,GAA6B,YAAM;AAC/B;AACA,kBAAIF,OAAO,CAACG,UAAR,IAAsB,CAA1B,EAA6B;AACzB,kBAAE,MAAI,CAACf,SAAP;;AAEA,oBAAIY,OAAO,CAACI,MAAR,IAAkB,GAAtB,EAA2B;AACvB,sBAAIpF,MAAM,GAAG,EAAb;AACAA,kBAAAA,MAAM,CAACgE,IAAP,GAAcnC,IAAI,CAACC,KAAL,CAAWkD,OAAO,CAACK,YAAnB,EAAiCrB,IAAjC,CAAsCsB,MAApD;AACA,kBAAA,MAAI,CAAC/E,aAAL,CAAmBV,UAAnB,CAA8B6B,KAA9B,IAAuC1B,MAAvC;AACH;AACJ;AACJ,aAXD;;AAaA,gBAAIuF,GAAG,GAAG,KAAK3I,MAAL,CAAYC,UAAZ,GAAyB2I,kBAAkB,CAAC9F,KAAD,CAA3C,GAAqD,SAArD,GAAiE,KAAK2E,QAAtE,GAAiF,OAAjF,GAA2F,KAAKK,MAAhG,GAAyG,UAAnH;AACAM,YAAAA,OAAO,CAACS,IAAR,CAAa,KAAb,EAAoBF,GAApB,EAAyB,IAAzB;AACAP,YAAAA,OAAO,CAACU,IAAR,CAAa,IAAb;AACH;;;2CAEgB;AAAA;;AACb,iBAAKlK,QAAL,CAAc,YAAM;AAChB,kBAAI,MAAI,CAAC4I,SAAL,GAAiB,MAAI,CAAC7D,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAnD,EAA2D;AACvD,gBAAA,MAAI,CAAC6D,cAAL,CAAoBzI,IAApB,CAAyB,MAAzB;AACH,eAFD,MAEO;AACH,gBAAA,MAAI,CAAC8H,SAAL,GAAiB,KAAjB;;AAEA,oBAAI,CAAC,MAAI,CAAC3D,aAAL,CAAmBV,UAAnB,CAA8B8F,QAA9B,CAAuC,IAAvC,CAAL,EAAmD;AAC/C,kBAAA,MAAI,CAACC,kBAAL;;AACA,kBAAA,MAAI,CAACC,2BAAL;;AACA,kBAAA,MAAI,CAACC,kBAAL;;AACA,kBAAA,MAAI,CAACC,sBAAL;;AACA,kBAAA,MAAI,CAACC,wBAAL;;AACA,kBAAA,MAAI,CAACC,+BAAL;;AACA,kBAAA,MAAI,CAACC,cAAL;AACH;AACJ;AACJ,aAhBD,EAgBG,GAhBH;AAiBH;;;+CAEoB;AACjB,iBAAK3F,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9CA,cAAAA,MAAM,CAACgE,IAAP,CAAYjE,OAAZ,CAAoB,UAACoG,QAAD,EAAc;AAC9BA,gBAAAA,QAAQ,CAACC,MAAT,CAAgBrG,OAAhB,CAAwB,UAACsG,KAAD,EAAW;AAC/BA,kBAAAA,KAAK,CAAC,CAAD,CAAL,GAAWC,UAAU,CAACD,KAAK,CAAC,CAAD,CAAN,CAArB;AACAA,kBAAAA,KAAK,CAAC,CAAD,CAAL,GAAWhF,IAAI,CAACC,KAAL,CAAWgF,UAAU,CAACD,KAAK,CAAC,CAAD,CAAN,CAArB,CAAX;AACH,iBAHD;AAIH,eALD;AAMH,aAPD;AAQH;;;wDAE6B;AAAA;;AAC1B,iBAAK9F,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9CA,cAAAA,MAAM,CAACuB,GAAP,GAAa,CAAC,CAAd;AACAvB,cAAAA,MAAM,CAACwB,GAAP,GAAa,CAAC,CAAd;AAEAxB,cAAAA,MAAM,CAACgE,IAAP,CAAYjE,OAAZ,CAAoB,UAACoG,QAAD,EAAc;AAC9BA,gBAAAA,QAAQ,CAACC,MAAT,CAAgBrG,OAAhB,CAAwB,UAACwG,KAAD,EAAW;AAC/B,kBAAA,MAAI,CAACC,yBAAL,CAA+BxG,MAA/B,EAAuCuG,KAAvC;AACH,iBAFD;;AAIA,oBAAIvG,MAAM,CAACwB,GAAP,GAAa,GAAjB,EAAsB;AAClBiF,kBAAAA,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAACnG,MAAT,CAAgBmG,QAA5B;AACH;AACJ,eARD;AASH,aAbD;AAcH;;;oDAEyBnG,M,EAAQuG,K,EAAO;AACrC,gBAAIF,KAAK,GAAGE,KAAK,CAAC,CAAD,CAAjB;;AAEA,gBAAIvG,MAAM,CAACuB,GAAP,IAAc,CAAC,CAAnB,EAAsB;AAClBvB,cAAAA,MAAM,CAACuB,GAAP,GAAa8E,KAAb;AACArG,cAAAA,MAAM,CAACwB,GAAP,GAAa6E,KAAb;AACH,aAHD,MAGO;AACH,kBAAIA,KAAK,GAAGrG,MAAM,CAACuB,GAAnB,EAAwB;AACpBvB,gBAAAA,MAAM,CAACuB,GAAP,GAAa8E,KAAb;AACH;;AAED,kBAAIA,KAAK,GAAGrG,MAAM,CAACwB,GAAnB,EAAwB;AACpBxB,gBAAAA,MAAM,CAACwB,GAAP,GAAa6E,KAAb;AACH;AACJ;AACJ;;;+CAEoB;AAAA;;AACjB,iBAAK9F,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAS0B,KAAT,EAAmB;AACrD,kBAAIxB,SAAS,GAAG,MAAI,CAACN,KAAL,CAAWC,UAAX,CAAsB6B,KAAtB,EAA6BxB,SAA7C;AACAF,cAAAA,MAAM,CAAC2G,UAAP,GAAoB3G,MAAM,CAACwB,GAAP,GAAatB,SAAS,CAACc,MAA3C,CAFqD,CAIrD;;AACAhB,cAAAA,MAAM,CAAC4G,QAAP,GAAkB,MAAI,CAACC,WAAL,CAAiB7G,MAAjB,EAAyBE,SAAzB,CAAlB;AACH,aAND;AAOH;;;sCAEWF,M,EAAQE,S,EAAW;AAC3B,gBAAI0G,QAAQ,GAAG,IAAIE,GAAJ,EAAf;;AAEA,iBAAK,IAAI1G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACc,MAA9B,EAAsC,EAAEZ,CAAxC,EAA2C;AACvC,kBAAI2G,SAAS,GAAG,EAAhB;AACAA,cAAAA,SAAS,CAACxF,GAAV,GAAgBnB,CAAC,GAAGJ,MAAM,CAAC2G,UAA3B;AACAI,cAAAA,SAAS,CAACvF,GAAV,GAAgBuF,SAAS,CAACxF,GAAV,GAAgBvB,MAAM,CAAC2G,UAAvC;AACAI,cAAAA,SAAS,CAACC,OAAV,GAAoB,CAACD,SAAS,CAACvF,GAAV,GAAgBuF,SAAS,CAACxF,GAA3B,IAAkC,CAAtD;AACAqF,cAAAA,QAAQ,CAACK,GAAT,CAAaF,SAAb,EAAwB7G,SAAS,CAACE,CAAD,CAAjC;AACH;;AAED,mBAAOwG,QAAP;AACH;;;mDAEwB;AACrB,iBAAKrG,aAAL,CAAmByD,IAAnB,GAA0B,EAA1B;AACA,iBAAKkD,gBAAL;AACA,iBAAKC,8CAAL;AACA,iBAAKC,kCAAL;AACH;;;6CAEkB;AACf,iBAAK7G,aAAL,CAAmByD,IAAnB,CAAwBqD,IAAxB,CAA6B,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC5C,mBAAK,IAAInH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkH,KAAK,CAACzH,UAAN,CAAiBmB,MAArC,EAA6C,EAAEZ,CAA/C,EAAkD;AAC9C,oBAAIkH,KAAK,CAACzH,UAAN,CAAiBO,CAAjB,EAAoBoH,KAApB,IAA6BD,MAAM,CAAC1H,UAAP,CAAkBO,CAAlB,EAAqBoH,KAAtD,EAA6D;AACzD,yBAAOF,KAAK,CAACzH,UAAN,CAAiBO,CAAjB,EAAoBoH,KAApB,GAA4BD,MAAM,CAAC1H,UAAP,CAAkBO,CAAlB,EAAqBoH,KAAxD;AACH;AACJ;;AAED,qBAAO,CAAP;AACH,aARD;AASH;;;2EAEgD;AAAA;;AAC7C,iBAAKjH,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASyH,WAAT,EAAyB;AAC3DzH,cAAAA,MAAM,CAACrB,SAAP,GAAmB,EAAnB;AACAqB,cAAAA,MAAM,CAACrB,SAAP,CAAiBqF,IAAjB,GAAwB,IAAI8C,GAAJ,EAAxB;AAEA9G,cAAAA,MAAM,CAACgE,IAAP,CAAYjE,OAAZ,CAAoB,UAAC2H,cAAD,EAAoB;AACpC,oBAAIC,WAAW,GAAGvM,CAAC,CAACwI,IAAF,CAAO,MAAI,CAACrD,aAAL,CAAmByD,IAA1B,EAAgC,UAAC4D,MAAD,EAAY;AAC1D,yBAAOF,cAAc,CAAC1H,MAAf,CAAsBmG,QAAtB,IAAkCyB,MAAM,CAACzB,QAAhD;AACH,iBAFiB,CAAlB;;AAIA,oBAAI,CAACwB,WAAL,EAAkB;AACdA,kBAAAA,WAAW,GAAG,MAAI,CAACE,oBAAL,CAA0BH,cAA1B,CAAd;AACH;;AAEDA,gBAAAA,cAAc,CAACtB,MAAf,CAAsBrG,OAAtB,CAA8B,UAACsG,KAAD,EAAW;AACrC,sBAAIE,KAAK,GAAG,EAAZ;AACAA,kBAAAA,KAAK,CAACzB,IAAN,GAAauB,KAAK,CAAC,CAAD,CAAlB;AACAE,kBAAAA,KAAK,CAACF,KAAN,GAAcA,KAAK,CAAC,CAAD,CAAnB;AACAsB,kBAAAA,WAAW,CAAC9H,UAAZ,CAAuB4H,WAAvB,EAAoCzD,IAApC,CAAyC/D,IAAzC,CAA8CsG,KAA9C;;AAEA,sBAAIvG,MAAM,CAACrB,SAAP,CAAiBqF,IAAjB,CAAsB8D,GAAtB,CAA0BvB,KAAK,CAACF,KAAhC,CAAJ,EAA4C;AACxC,wBAAI0B,UAAU,GAAG/H,MAAM,CAACrB,SAAP,CAAiBqF,IAAjB,CAAsBgE,GAAtB,CAA0BzB,KAAK,CAACF,KAAhC,CAAjB;AACArG,oBAAAA,MAAM,CAACrB,SAAP,CAAiBqF,IAAjB,CAAsBiD,GAAtB,CAA0BV,KAAK,CAACF,KAAhC,EAAuC0B,UAAU,GAAG,CAApD;AACH,mBAHD,MAGO;AACH/H,oBAAAA,MAAM,CAACrB,SAAP,CAAiBqF,IAAjB,CAAsBiD,GAAtB,CAA0BV,KAAK,CAACF,KAAhC,EAAuC,CAAvC;AACH;AACJ,iBAZD;AAaH,eAtBD;AAwBArG,cAAAA,MAAM,CAACrB,SAAP,CAAiBqF,IAAjB,GAAwB,IAAI8C,GAAJ,CAAQ,mBAAI9G,MAAM,CAACrB,SAAP,CAAiBqF,IAArB,EAA2BqD,IAA3B,CAAgC,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC/E,uBAAOD,KAAK,CAAC,CAAD,CAAL,GAAWC,MAAM,CAAC,CAAD,CAAxB;AACH,eAF+B,CAAR,CAAxB;;AAIA,cAAA,MAAI,CAACU,kBAAL,CAAwBjI,MAAM,CAACrB,SAA/B;AACH,aAjCD;AAkCH;;;6CAEkBA,S,EAAW;AAC1BA,YAAAA,SAAS,CAAC4C,GAAV,GAAgB,CAAC,CAAjB;AACA5C,YAAAA,SAAS,CAAC6C,GAAV,GAAgB,CAAC,CAAjB;AAEA7C,YAAAA,SAAS,CAACqF,IAAV,CAAejE,OAAf,CAAuB,UAACgI,UAAD,EAAa1B,KAAb,EAAuB;AAC1C,kBAAI1H,SAAS,CAAC4C,GAAV,IAAiB,CAAC,CAAtB,EAAyB;AACrB5C,gBAAAA,SAAS,CAAC4C,GAAV,GAAgBwG,UAAhB;AACApJ,gBAAAA,SAAS,CAAC6C,GAAV,GAAgBuG,UAAhB;AACH,eAHD,MAGO;AACH,oBAAIpJ,SAAS,CAAC4C,GAAV,GAAgBwG,UAApB,EAAgC;AAC5BpJ,kBAAAA,SAAS,CAAC4C,GAAV,GAAgBwG,UAAhB;AACH;;AAED,oBAAIpJ,SAAS,CAAC6C,GAAV,GAAgBuG,UAApB,EAAgC;AAC5BpJ,kBAAAA,SAAS,CAAC6C,GAAV,GAAgBuG,UAAhB;AACH;AACJ;AACJ,aAbD;AAcH;;;+CAEoBL,c,EAAgB;AACjC,gBAAIC,WAAW,GAAG,EAAlB;AACAA,YAAAA,WAAW,CAACxB,QAAZ,GAAuBuB,cAAc,CAAC1H,MAAf,CAAsBmG,QAA7C;AAEAwB,YAAAA,WAAW,CAAC9H,UAAZ,GAAyB,EAAzB;;AAEA,iBAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAIJ,MAAM,GAAG,EAAb;AACAA,cAAAA,MAAM,CAACgE,IAAP,GAAc,EAAd;AACA2D,cAAAA,WAAW,CAAC9H,UAAZ,CAAuBI,IAAvB,CAA4BD,MAA5B;AACH;;AAED,iBAAKO,aAAL,CAAmByD,IAAnB,CAAwB/D,IAAxB,CAA6B0H,WAA7B;AACA,mBAAOA,WAAP;AACH;;;+DAEoC;AAAA;;AACjC,iBAAKpH,aAAL,CAAmByD,IAAnB,CAAwBjE,OAAxB,CAAgC,UAACoG,QAAD,EAAc;AAC1CA,cAAAA,QAAQ,CAACtG,UAAT,CAAoBE,OAApB,CAA4B,UAACC,MAAD,EAASyH,WAAT,EAAyB;AACjDzH,gBAAAA,MAAM,CAACwH,KAAP,GAAe,CAAf;AACAxH,gBAAAA,MAAM,CAACuB,GAAP,GAAa,CAAC,CAAd;AACAvB,gBAAAA,MAAM,CAACwB,GAAP,GAAa,CAAC,CAAd;AAEAxB,gBAAAA,MAAM,CAACgE,IAAP,CAAYjE,OAAZ,CAAoB,UAACwG,KAAD,EAAW;AAC3B;AACAvG,kBAAAA,MAAM,CAACwH,KAAP,IAAgB,OAAI,CAACU,mBAAL,CAAyB3B,KAAK,CAACF,KAA/B,EAAsC,OAAI,CAAC9F,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,EAA2Cb,QAAjF,CAAhB;;AAEA,sBAAI5G,MAAM,CAACuB,GAAP,IAAc,CAAC,CAAf,IAAoBgF,KAAK,CAACF,KAAN,GAAcrG,MAAM,CAACuB,GAA7C,EAAkD;AAC9CvB,oBAAAA,MAAM,CAACuB,GAAP,GAAagF,KAAK,CAACF,KAAnB;AACH;;AAED,sBAAIrG,MAAM,CAACwB,GAAP,IAAc,CAAC,CAAf,IAAoB+E,KAAK,CAACF,KAAN,GAAcrG,MAAM,CAACwB,GAA7C,EAAkD;AAC9CxB,oBAAAA,MAAM,CAACwB,GAAP,GAAa+E,KAAK,CAACF,KAAnB;AACH;AACJ,iBAXD;AAYH,eAjBD;AAkBH,aAnBD;AAoBH;;;8CAEmBA,K,EAAO8B,G,EAAK;AAAA;;AAC5B,gBAAI7C,MAAJ;AAEA6C,YAAAA,GAAG,CAACpI,OAAJ,CAAY,UAACxB,KAAD,EAAQwI,SAAR,EAAsB;AAC9B,kBAAI,OAAI,CAACqB,SAAL,CAAe/B,KAAf,EAAsBU,SAAS,CAACxF,GAAhC,EAAqCwF,SAAS,CAACvF,GAA/C,CAAJ,EAAyD;AACrD8D,gBAAAA,MAAM,GAAGyB,SAAS,CAACC,OAAnB;AACH;AACJ,aAJD;AAMA,mBAAO1B,MAAP;AACH;;;oCAES+C,M,EAAQC,K,EAAOC,G,EAAK;AAC1B,mBAAOD,KAAK,IAAID,MAAT,IAAmBA,MAAM,IAAIE,GAApC;AACH;;;qDAE0B;AACvB,iBAAKC,+BAAL;AACA,iBAAKC,8BAAL;AACH;;;4DAEiC;AAAA;;AAC9B,iBAAKlI,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASyH,WAAT,EAAyB;AAC3D,cAAA,OAAI,CAACiB,qCAAL,CAA2C1I,MAA3C,EAAmDyH,WAAnD;;AACA,cAAA,OAAI,CAACkB,oCAAL,CAA0C3I,MAA1C,EAAkDyH,WAAlD;AACH,aAHD;AAKA,iBAAKmB,0CAAL;AACH;;;gEAEqC5I,M,EAAQyH,W,EAAa;AACvDzH,YAAAA,MAAM,CAAC6I,qBAAP,GAA+B,IAAI/B,GAAJ,EAA/B;;AAEA,iBAAK,IAAInE,iBAAiB,GAAG,CAA7B,EAAgCA,iBAAiB,IAAI,KAAK/F,MAAL,CAAYM,sBAAjE,EAAyF,EAAEyF,iBAA3F,EAA8G;AAC1G,kBAAIhC,SAAS,GAAG,EAAhB;AACA,mBAAKmI,gCAAL,CAAsCnI,SAAtC,EAAiD8G,WAAjD,EAA8D9E,iBAA9D;AAEAhC,cAAAA,SAAS,CAAC0G,IAAV,CAAe,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC9B,uBAAOD,KAAK,CAACE,KAAN,GAAcD,MAAM,CAACC,KAA5B;AACH,eAFD;AAIAxH,cAAAA,MAAM,CAAC6I,qBAAP,CAA6B5B,GAA7B,CAAiCtE,iBAAjC,EAAoDhC,SAApD;AACH;AACJ;;;2DAEgCA,S,EAAW8G,W,EAAa9E,iB,EAAmB;AAAA;;AACxE,gBAAIoG,cAAc,GAAGpG,iBAAiB,GAAG,IAAzC;AAEA,iBAAKpC,aAAL,CAAmByD,IAAnB,CAAwBjE,OAAxB,CAAgC,UAACoG,QAAD,EAAc;AAC1C,kBAAI6C,KAAK,GAAG5N,CAAC,CAACwI,IAAF,CAAOjD,SAAP,EAAkB,UAACiH,MAAD,EAAY;AACtC,oBAAIrG,GAAG,GAAGqG,MAAM,CAACJ,KAAP,IAAgB,IAAIuB,cAApB,CAAV;AACA,oBAAIvH,GAAG,GAAGoG,MAAM,CAACJ,KAAP,IAAgB,IAAIuB,cAApB,CAAV;AACA,uBAAO,OAAI,CAACX,SAAL,CAAejC,QAAQ,CAACtG,UAAT,CAAoB4H,WAApB,EAAiCD,KAAhD,EAAuDjG,GAAvD,EAA4DC,GAA5D,CAAP;AACH,eAJW,CAAZ;;AAMA,kBAAI,CAACwH,KAAL,EAAY;AACRA,gBAAAA,KAAK,GAAG,OAAI,CAACC,kCAAL,CAAwC9C,QAAxC,EAAkDsB,WAAlD,CAAR;AACA9G,gBAAAA,SAAS,CAACV,IAAV,CAAe+I,KAAf;AACH;;AAEDA,cAAAA,KAAK,CAACE,YAAN,CAAmBjJ,IAAnB,CAAwBkG,QAAxB;AACH,aAbD;AAcH;;;6DAEkCA,Q,EAAUsB,W,EAAa;AACtD,gBAAIuB,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAACE,YAAN,GAAqB,EAArB;AACAF,YAAAA,KAAK,CAACG,OAAN,GAAgB,CAAhB;AACAH,YAAAA,KAAK,CAACxB,KAAN,GAAcrB,QAAQ,CAACtG,UAAT,CAAoB4H,WAApB,EAAiCD,KAA/C;AACA,mBAAOwB,KAAP;AACH;;;+DAEoChJ,M,EAAQyH,W,EAAa;AAAA;;AACtD,gBAAI2B,aAAa,GAAG,KAAKxJ,KAAL,CAAWC,UAAX,CAAsB4H,WAAtB,EAAmCvH,SAAnC,CAA6C,CAA7C,CAApB;AAEAF,YAAAA,MAAM,CAAC6I,qBAAP,CAA6B9I,OAA7B,CAAqC,UAACY,SAAD,EAAe;AAChD,kBAAIR,eAAe,GAAG,CAAC,OAAI,CAACvD,MAAL,CAAYI,kBAAb,GAAkC2D,SAAS,CAACK,MAAlE;AAEAL,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAQK,UAAR,EAAuB;AACrCL,gBAAAA,KAAK,CAACzK,KAAN,GAAc,OAAI,CAAC8B,oBAAL,CAA0B+I,aAA1B,EAAyCC,UAAU,GAAGlJ,eAAtD,CAAd;AACH,eAFD;AAGH,aAND;AAOH;;;uEAE4C;AAAA;;AACzC,iBAAKI,aAAL,CAAmByD,IAAnB,CAAwBjE,OAAxB,CAAgC,UAACoG,QAAD,EAAc;AAC1CA,cAAAA,QAAQ,CAACxF,SAAT,GAAqB,EAArB;;AAEA,cAAA,OAAI,CAACJ,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASyH,WAAT,EAAyB;AAC3D,qBAAK,IAAIrH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAAC6I,qBAAP,CAA6B7H,MAAjD,EAAyD,EAAEZ,CAA3D,EAA8D;AAC1D,sBAAI4I,KAAK,GAAGhJ,MAAM,CAAC6I,qBAAP,CAA6BzI,CAA7B,CAAZ;;AAEA,sBAAI+F,QAAQ,CAACtG,UAAT,CAAoB4H,WAApB,EAAiCD,KAAjC,IAA0CwB,KAAK,CAACxB,KAApD,EAA2D;AACvDrB,oBAAAA,QAAQ,CAACxF,SAAT,CAAmBV,IAAnB,CAAwB+I,KAAxB;AACA;AACH;AACJ;AACJ,eATD;AAUH,aAbD;AAcH;;;2DAEgC;AAC7B,iBAAKzI,aAAL,CAAmBsI,qBAAnB,GAA2C,IAAI/B,GAAJ,EAA3C;;AAEA,iBAAK,IAAInE,iBAAiB,GAAG,CAA7B,EAAgCA,iBAAiB,IAAI,KAAK/F,MAAL,CAAYM,sBAAjE,EAAyF,EAAEyF,iBAA3F,EAA8G;AAC1G,kBAAIhC,SAAS,GAAG,EAAhB;AACA,mBAAK2I,+BAAL,CAAqC3I,SAArC,EAAgDgC,iBAAhD;AACA,mBAAKpC,aAAL,CAAmBsI,qBAAnB,CAAyC5B,GAAzC,CAA6CtE,iBAA7C,EAAgEhC,SAAhE;AACH;;AAED,iBAAK4I,mCAAL;AACH;;;0DAE+B5I,S,EAAWgC,iB,EAAmB;AAAA;;AAC1D,gBAAIoG,cAAc,GAAGpG,iBAAiB,GAAG,IAAzC;AAEA,iBAAKpC,aAAL,CAAmByD,IAAnB,CAAwBjE,OAAxB,CAAgC,UAACoG,QAAD,EAAc;AAC1C,kBAAI6C,KAAK,GAAG,OAAI,CAACQ,+BAAL,CAAqC7I,SAArC,EAAgDoI,cAAhD,EAAgE5C,QAAhE,CAAZ;;AAEA,kBAAI,CAAC6C,KAAL,EAAY;AACRA,gBAAAA,KAAK,GAAG,OAAI,CAACS,gCAAL,CAAsCtD,QAAtC,CAAR;AACAxF,gBAAAA,SAAS,CAACV,IAAV,CAAe+I,KAAf;AACH;;AAEDA,cAAAA,KAAK,CAACE,YAAN,CAAmBjJ,IAAnB,CAAwBkG,QAAxB;;AAEA,mBAAK,IAAI/F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+F,QAAQ,CAACtG,UAAT,CAAoBmB,MAAxC,EAAgD,EAAEZ,CAAlD,EAAqD;AACjD,oBAAIJ,MAAM,GAAGgJ,KAAK,CAACnJ,UAAN,CAAiBO,CAAjB,CAAb;AACAJ,gBAAAA,MAAM,CAACwH,KAAP,GAAe,CAACxH,MAAM,CAACwH,KAAP,IAAgBwB,KAAK,CAACE,YAAN,CAAmBlI,MAAnB,GAA4B,CAA5C,IAAiDmF,QAAQ,CAACtG,UAAT,CAAoBO,CAApB,EAAuBoH,KAAzE,IAAkFwB,KAAK,CAACE,YAAN,CAAmBlI,MAApH;AACH;AACJ,aAdD;AAeH;;;0DAE+BL,S,EAAWoI,c,EAAgB5C,Q,EAAU;AAAA;;AACjE,gBAAI6C,KAAK,GAAG5N,CAAC,CAACwI,IAAF,CAAOjD,SAAP,EAAkB,UAACiH,MAAD,EAAY;AACtC,mBAAK,IAAIxH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+F,QAAQ,CAACtG,UAAT,CAAoBmB,MAAxC,EAAgD,EAAEZ,CAAlD,EAAqD;AACjD,oBAAIJ,MAAM,GAAG4H,MAAM,CAAC/H,UAAP,CAAkBO,CAAlB,CAAb;AACA,oBAAImB,GAAG,GAAGvB,MAAM,CAACwH,KAAP,IAAgB,IAAIuB,cAApB,CAAV;AACA,oBAAIvH,GAAG,GAAGxB,MAAM,CAACwH,KAAP,IAAgB,IAAIuB,cAApB,CAAV;;AAEA,oBAAI,CAAC,OAAI,CAACX,SAAL,CAAejC,QAAQ,CAACtG,UAAT,CAAoBO,CAApB,EAAuBoH,KAAtC,EAA6CjG,GAA7C,EAAkDC,GAAlD,CAAL,EAA6D;AACzD,yBAAO,KAAP;AACH;AACJ;;AAED,qBAAO,IAAP;AACH,aAZW,CAAZ;;AAcA,mBAAOwH,KAAP;AACH;;;2DAEgC7C,Q,EAAU;AACvC,gBAAI6C,KAAK,GAAG,EAAZ;AACAA,YAAAA,KAAK,CAACnJ,UAAN,GAAmB,EAAnB;AACAmJ,YAAAA,KAAK,CAACE,YAAN,GAAqB,EAArB;AACAF,YAAAA,KAAK,CAACG,OAAN,GAAgB,CAAhB;AAEAhD,YAAAA,QAAQ,CAACtG,UAAT,CAAoBE,OAApB,CAA4B,UAAC2J,cAAD,EAAoB;AAC5C,kBAAIC,WAAW,GAAG,EAAlB;AACAA,cAAAA,WAAW,CAACnC,KAAZ,GAAoBkC,cAAc,CAAClC,KAAnC;AACAwB,cAAAA,KAAK,CAACnJ,UAAN,CAAiBI,IAAjB,CAAsB0J,WAAtB;AACH,aAJD;AAMA,mBAAOX,KAAP;AACH;;;gEAEqC;AAAA;;AAClC,iBAAKzI,aAAL,CAAmBsI,qBAAnB,CAAyC9I,OAAzC,CAAiD,UAACY,SAAD,EAAe;AAC5D,kBAAIR,eAAe,GAAG,CAAC,OAAI,CAACvD,MAAL,CAAYO,iBAAZ,GAAgC,OAAI,CAACP,MAAL,CAAYQ,eAA7C,IAAgEuD,SAAS,CAACK,MAAhG;AAEAL,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,oBAAIO,SAAS,GAAGvI,IAAI,CAACC,KAAL,CAAW,OAAI,CAAC1E,MAAL,CAAYO,iBAAZ,GAAgCgD,eAAe,GAAGkJ,UAA7D,CAAhB;AACAL,gBAAAA,KAAK,CAACzK,KAAN,GAAc,UAAUqL,SAAV,GAAsB,IAAtB,GAA6BA,SAA7B,GAAyC,IAAzC,GAAgDA,SAAhD,GAA4D,MAA1E;AACH,eAHD;AAIH,aAPD;AAQH;;;4DAEiC;AAAA;;AAC9B,iBAAKrJ,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAAC8J,cAAD,EAAiBpC,WAAjB,EAAiC;AACnEoC,cAAAA,cAAc,CAACC,uBAAf,GAAyC,CAAC,CAAD,CAAzC;;AAEA,cAAA,OAAI,CAACvJ,aAAL,CAAmByD,IAAnB,CAAwBjE,OAAxB,CAAgC,UAACoG,QAAD,EAAc;AAC1C,gBAAA,OAAI,CAAC4D,yCAAL,CAA+C5D,QAA/C,EAAyD0D,cAAzD,EAAyEpC,WAAzE;AACH,eAFD;;AAIA,cAAA,OAAI,CAAClH,aAAL,CAAmByD,IAAnB,CAAwBjE,OAAxB,CAAgC,UAACoG,QAAD,EAAc;AAC1C,oBAAIuD,cAAc,GAAGvD,QAAQ,CAACtG,UAAT,CAAoB4H,WAApB,CAArB;AAEAiC,gBAAAA,cAAc,CAACM,wBAAf,CAAwCjK,OAAxC,CAAgD,UAACkK,KAAD,EAAW;AACvD,sBAAI,CAACJ,cAAc,CAACC,uBAAf,CAAuCnE,QAAvC,CAAgDsE,KAAK,CAAC1B,GAAtD,CAAL,EAAiE;AAC7DsB,oBAAAA,cAAc,CAACC,uBAAf,CAAuC7J,IAAvC,CAA4CgK,KAAK,CAAC1B,GAAlD;AACH;AACJ,iBAJD;AAKH,eARD;;AAUAsB,cAAAA,cAAc,CAACC,uBAAf,CAAuCzC,IAAvC,CAA4C,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC3D,uBAAOD,KAAK,GAAGC,MAAf;AACH,eAFD;AAGH,aApBD;AAqBH;;;oEAEyCpB,Q,EAAU0D,c,EAAgBpC,W,EAAa;AAAA;;AAC7E,gBAAIiC,cAAc,GAAGvD,QAAQ,CAACtG,UAAT,CAAoB4H,WAApB,CAArB;AACAiC,YAAAA,cAAc,CAACM,wBAAf,GAA0C,EAA1C;AACA,gBAAIE,cAAJ;AAEAR,YAAAA,cAAc,CAAC1F,IAAf,CAAoBjE,OAApB,CAA4B,UAACwG,KAAD,EAAQ4D,UAAR,EAAuB;AAC/C,kBAAIC,gBAAgB,GAAG,OAAI,CAAClC,mBAAL,CAAyB3B,KAAK,CAACF,KAA/B,EAAsCwD,cAAc,CAACjD,QAArD,CAAvB;;AAEA,kBAAIuD,UAAU,IAAI,CAAlB,EAAqB;AACjBD,gBAAAA,cAAc,GAAG,OAAI,CAACG,gCAAL,CAAsCX,cAAtC,EAAsDU,gBAAtD,CAAjB;AACH,eAFD,MAEO;AACH,oBAAIA,gBAAgB,IAAIF,cAAc,CAAC7D,KAAnC,IAA4C8D,UAAU,IAAIT,cAAc,CAAC1F,IAAf,CAAoBhD,MAApB,GAA6B,CAA3F,EAA8F;AAC1FkJ,kBAAAA,cAAc,CAAC3B,GAAf,GAAqB4B,UAArB;;AAEA,sBAAIC,gBAAgB,IAAIF,cAAc,CAAC7D,KAAvC,EAA8C;AAC1C6D,oBAAAA,cAAc,GAAG,OAAI,CAACG,gCAAL,CAAsCX,cAAtC,EAAsDU,gBAAtD,CAAjB;AACH;AACJ;AACJ;AACJ,aAdD;AAeH;;;2DAEgCV,c,EAAgBU,gB,EAAkB;AAC/D,gBAAIH,KAAK,GAAG,EAAZ;AACAP,YAAAA,cAAc,CAACM,wBAAf,CAAwC/J,IAAxC,CAA6CgK,KAA7C;AACAA,YAAAA,KAAK,CAAC5D,KAAN,GAAc+D,gBAAd;AACAH,YAAAA,KAAK,CAAC1B,GAAN,GAAY,CAAZ;AACA,mBAAO0B,KAAP;AACH;;;2CAEgB;AACb,gBAAI,KAAK1J,aAAL,CAAmByD,IAAnB,CAAwBhD,MAAxB,GAAiC,CAArC,EAAwC;AACpC,mBAAKsJ,cAAL;AACA,mBAAKC,YAAL;AACH;AACJ;;;2CAEgB;AACb,iBAAKC,QAAL,GAAgB,KAAhB;AACA,iBAAKrH,gBAAL,CAAsBsH,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,KAAKvH,eAAL,CAAqBwH,KAA3D,EAAkE,KAAKxH,eAAL,CAAqByH,MAAvF;AACH;;;yCAEc;AAAA;;AACX,iBAAKnP,QAAL,CAAc,YAAM;AAChB,cAAA,OAAI,CAACwH,eAAL,CAAqByH,SAArB,CAA+B,CAA/B,EAAkC,CAAlC,EAAqC,OAAI,CAAC3H,cAAL,CAAoB4H,KAAzD,EAAgE,OAAI,CAAC5H,cAAL,CAAoB6H,MAApF;;AACA,cAAA,OAAI,CAACC,qBAAL;;AACA,cAAA,OAAI,CAACC,mBAAL,GAA2B,OAAI,CAACC,oBAAL,GAA4B,OAAI,CAAClO,MAAL,CAAYK,6BAAnE;;AACA,cAAA,OAAI,CAAC+E,KAAL,CAAWmC,MAAX;;AACA,cAAA,OAAI,CAAC4G,gBAAL;AACH,aAND;AAOH;;;kDAEuB;AACpB,iBAAKC,2BAAL;AACA,iBAAKzK,aAAL,CAAmB0K,eAAnB,GAAqC,KAAKjI,eAAL,CAAqBkI,WAArB,CAAiC,GAAjC,EAAsCR,KAA3E;AACA,iBAAKnK,aAAL,CAAmB4K,cAAnB,GAAoC,KAAK5K,aAAL,CAAmB0K,eAAnB,GAAqC,KAAKrO,MAAL,CAAYU,QAAZ,CAAqBI,8BAA9F;AACA,iBAAK0N,gBAAL;AACA,iBAAKC,iBAAL;AACH;;;6CAEkB;AAAA;;AACf,iBAAKC,0BAAL;AACA,gBAAIjM,oBAAoB,GAAG,KAAKkM,uBAAL,EAA3B;AAEA,iBAAKhL,aAAL,CAAmBiL,aAAnB,GAAmC,KAAK5O,MAAL,CAAYU,QAAZ,CAAqBc,2BAArB,GAAmD,KAAKmC,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAjF,GAC/B3B,oBAAoB,IAAI,KAAKkB,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,CAA3C,CADxB,CAJe,CAOf;;AACA,gBAAI,KAAKyK,YAAT,EAAuB;AACnB,mBAAKlL,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,gBAAA,OAAI,CAACO,aAAL,CAAmBiL,aAAnB,IAAoCxL,MAAM,CAAC8J,uBAAP,CAA+B9I,MAA/B,GAAwC,OAAI,CAACpE,MAAL,CAAYU,QAAZ,CAAqBK,UAAjG;AACH,eAFD;AAGH,aAJD,MAIO;AACH,mBAAK4C,aAAL,CAAmBiL,aAAnB,IAAoC,KAAKE,kBAAL,KAA4B,KAAKnL,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA1D,GAAmE,KAAKpE,MAAL,CAAYU,QAAZ,CAAqBK,UAA5H;AACH;;AAED,iBAAKgO,mBAAL,GAA2B,KAAKpL,aAAL,CAAmBiL,aAA9C;AACA,iBAAKjL,aAAL,CAAmBmE,MAAnB,GAA4B,KAAKkH,mBAAL,CAAyB,KAAKlH,MAAL,GAAc,IAAvC,CAA5B;AACA,iBAAKnE,aAAL,CAAmBsL,WAAnB,GAAiC,KAAK7I,eAAL,CAAqBkI,WAArB,CAAiC,KAAK3K,aAAL,CAAmBmE,MAApD,EAA4DgG,KAA7F;;AAEA,gBAAI,KAAKoB,SAAT,EAAoB;AAChB,mBAAKC,6BAAL;AACH,aAFD,MAEO;AACH,mBAAKJ,mBAAL,IAA4B,KAAKpL,aAAL,CAAmBsL,WAAnB,GAAiC,CAA7D;AACH;AACJ;;;oDAEyB;AACtB,gBAAIxM,oBAAJ;;AAEA,gBAAI,KAAKyM,SAAT,EAAoB;AAChB,kBAAI,KAAKzJ,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxDjD,gBAAAA,oBAAoB,GAAG,KAAKzC,MAAL,CAAYU,QAAZ,CAAqBS,gCAA5C;AACH,eAFD,MAEO;AACHsB,gBAAAA,oBAAoB,GAAG,KAAKzC,MAAL,CAAYU,QAAZ,CAAqBQ,8BAA5C;AACH;AACJ,aAND,MAMO,IAAI,KAAK2N,YAAT,EAAuB;AAC1BpM,cAAAA,oBAAoB,GAAG,KAAKzC,MAAL,CAAYU,QAAZ,CAAqBQ,8BAA5C;AACH,aAFM,MAEA;AACHuB,cAAAA,oBAAoB,GAAG,KAAKzC,MAAL,CAAYU,QAAZ,CAAqBS,gCAA5C;AACH;;AAED,mBAAOsB,oBAAP;AACH;;;+CAEoB;AACjB,gBAAI2B,MAAM,GAAG,CAAb;AAEA,iBAAKT,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,kBAAIgM,sBAAsB,GAAG5Q,CAAC,CAAC6Q,KAAF,CAAQjM,MAAM,CAACgE,IAAf,EAAqB,UAACuC,KAAD,EAAW;AACzD,uBAAOA,KAAK,CAACH,MAAN,CAAapF,MAApB;AACH,eAF4B,CAA7B;;AAIAA,cAAAA,MAAM,GAAGgL,sBAAsB,CAAC5F,MAAvB,CAA8BpF,MAAvC;AACH,aAND;AAQA,mBAAOA,MAAP;AACH;;;0DAE+B;AAAA;;AAC5B,iBAAK2K,mBAAL,IAA4B,KAAK/O,MAAL,CAAYU,QAAZ,CAAqBc,2BAArB,GAAmD,KAAKmC,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA7G;;AAEA,gBAAI,KAAKqB,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKqJ,mBAAL,IAA4B,KAAK/O,MAAL,CAAYU,QAAZ,CAAqBe,+BAArB,GAAuD,KAAKkC,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAjH;AAEA,mBAAKT,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,gBAAA,OAAI,CAAC2L,mBAAL,IAA4B,OAAI,CAACO,wBAAL,CAA8BlM,MAA9B,IAAwC,OAAI,CAACpD,MAAL,CAAYU,QAAZ,CAAqBY,6BAAzF;AACH,eAFD;AAGH,aAND,MAMO;AACH,mBAAKyN,mBAAL,IAA4B,KAAK/O,MAAL,CAAYU,QAAZ,CAAqBe,+BAArB,GACxB,KAAK8N,6BAAL,KAAuC,KAAKvP,MAAL,CAAYU,QAAZ,CAAqBa,+BADhE;AAEH;AACJ;;;mDAEwB6B,M,EAAQ;AAC7B,gBAAIW,SAAS,GAAG,KAAKyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AAEA,gBAAIqM,YAAY,GAAGjR,CAAC,CAAC6Q,KAAF,CAAQtL,SAAR,EAAmB,UAACqI,KAAD,EAAW;AAC7C,qBAAOA,KAAK,CAACE,YAAN,CAAmBlI,MAA1B;AACH,aAFkB,CAAnB;;AAIA,mBAAOqL,YAAY,CAACnD,YAAb,CAA0BlI,MAA1B,GAAmC,KAAKpE,MAAL,CAAYU,QAAZ,CAAqBY,6BAA/D;AACH;;;6DAEkC8B,M,EAAQ;AACvC,mBAAOA,MAAM,CAAC6I,qBAAP,CAA6Bb,GAA7B,CAAiC,KAAKrF,iBAAtC,CAAP;AACH;;;0DAE+B;AAC5B,gBAAI2C,MAAM,GAAG,CAAb;AACA,gBAAI3E,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;AAEA3L,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzB,kBAAIA,KAAK,CAACE,YAAN,CAAmBlI,MAAnB,GAA4BsE,MAAhC,EAAwC;AACpCA,gBAAAA,MAAM,GAAG0D,KAAK,CAACE,YAAN,CAAmBlI,MAA5B;AACH;AACJ,aAJD;AAMA,mBAAOsE,MAAP;AACH;;;8DAEmC;AAChC,mBAAO,KAAK/E,aAAL,CAAmBsI,qBAAnB,CAAyCb,GAAzC,CAA6C,KAAKrF,iBAAlD,CAAP;AACH;;;8CAEmB;AAChB;AACA,gBAAI,KAAKmJ,SAAT,EAAoB;AAChB,kBAAIS,UAAU,GAAG,KAAKC,gBAAL,EAAjB;AACA,mBAAKjM,aAAL,CAAmBkM,cAAnB,GAAoCF,UAAU,IAAI,KAAK3P,MAAL,CAAYU,QAAZ,CAAqBO,kBAArB,GAA0C,KAAKjB,MAAL,CAAYU,QAAZ,CAAqBU,mBAAnE,CAA9C;AACH,aAHD,MAGO;AACH,mBAAKuC,aAAL,CAAmBkM,cAAnB,GAAoC,KAAKlM,aAAL,CAAmByD,IAAnB,CAAwBhD,MAAxB,GAAiC,KAAKpE,MAAL,CAAYU,QAAZ,CAAqBM,oBAA1F;AACH,aAPe,CAShB;;;AACA,iBAAKkN,oBAAL,GAA4B,KAAKvK,aAAL,CAAmBkM,cAAnB,GACxB,CAAC,KAAKlM,aAAL,CAAmB0K,eAAnB,GAAqC,KAAKrO,MAAL,CAAYU,QAAZ,CAAqBI,8BAA3D,IAA6F,CADjG;AAEH;;;6CAEkB;AAAA;;AACf,gBAAI6O,UAAU,GAAG,CAAjB;;AAEA,gBAAI,KAAKlK,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,oBAAIW,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AACA,oBAAIgB,MAAM,GAAGL,SAAS,CAACK,MAAvB;;AAEA,oBAAIA,MAAM,GAAGuL,UAAb,EAAyB;AACrBA,kBAAAA,UAAU,GAAGvL,MAAb;AACH;AACJ,eAPD;AAQH,aATD,MASO;AACH,kBAAIL,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;AACAC,cAAAA,UAAU,GAAG5L,SAAS,CAACK,MAAvB;AACH;;AAED,mBAAOuL,UAAP;AACH;;;wDAE6B;AAC1B,iBAAKvJ,eAAL,CAAqB0J,IAArB,GAA4B,UAAU,KAAK9P,MAAL,CAAYU,QAAZ,CAAqBE,cAA/B,GAAgD,UAA5E;AACH;;;6CAEkB;AACf,iBAAK+C,aAAL,CAAmBoM,YAAnB,GAAkC,CAAlC;AACA,iBAAKC,8BAAL;;AAEA,gBAAI,KAAKd,SAAT,EAAoB;AAChB,mBAAKe,mBAAL;AACH,aAFD,MAEO;AACH,mBAAKC,qBAAL;AACH;;AAED,iBAAKC,gBAAL;AACA,iBAAKC,eAAL;AACH;;;2DAEgC;AAAA;;AAC7B,gBAAI3N,oBAAoB,GAAG,KAAKkM,uBAAL,EAA3B;AAEA,iBAAKhL,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASyH,WAAT,EAAyB;AAC3D,cAAA,OAAI,CAACwF,uBAAL,CAA6BjN,MAA7B,EAAqCyH,WAArC,EAAkDpI,oBAAlD;;AAEA,kBAAI,OAAI,CAACoM,YAAT,EAAuB;AACnBzL,gBAAAA,MAAM,CAACkN,IAAP,GAAclN,MAAM,CAACmN,MAAP,GAAgBnN,MAAM,CAAC8J,uBAAP,CAA+B9I,MAA/B,GAAwC,OAAI,CAACpE,MAAL,CAAYU,QAAZ,CAAqBK,UAA3F;AACH,eAFD,MAEO;AACHqC,gBAAAA,MAAM,CAACkN,IAAP,GAAclN,MAAM,CAACmN,MAAP,GAAgB,OAAI,CAACzB,kBAAL,KAA4B,OAAI,CAAC9O,MAAL,CAAYU,QAAZ,CAAqBK,UAA/E;AACH;AACJ,aARD;AASH;;;kDAEuBqC,M,EAAQyH,W,EAAapI,oB,EAAsB;AAC/D,gBAAIoI,WAAW,GAAG,CAAlB,EAAqB;AACjB,kBAAI2F,cAAc,GAAG,KAAK7M,aAAL,CAAmBV,UAAnB,CAA8B4H,WAAW,GAAG,CAA5C,CAArB;AACAzH,cAAAA,MAAM,CAACmN,MAAP,GAAgBC,cAAc,CAACF,IAAf,GAAsB7N,oBAAtC;;AAEA,kBAAI,KAAKyM,SAAT,EAAoB;AAChB9L,gBAAAA,MAAM,CAACmN,MAAP,IAAiB,KAAKvQ,MAAL,CAAYU,QAAZ,CAAqBc,2BAAtC;;AAEA,oBAAI,KAAKiE,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,sBAAI+K,qBAAqB,GAAG,KAAKnB,wBAAL,CAA8BkB,cAA9B,CAA5B;AACApN,kBAAAA,MAAM,CAACmN,MAAP,IAAiBE,qBAAqB,GAAG,KAAKzQ,MAAL,CAAYU,QAAZ,CAAqBe,+BAA9D;AACH;AACJ;AACJ,aAZD,MAYO;AACH2B,cAAAA,MAAM,CAACmN,MAAP,GAAgB,KAAKvQ,MAAL,CAAYU,QAAZ,CAAqBc,2BAArC;AACH;AACJ;;;gDAEqB;AAClB,iBAAKmC,aAAL,CAAmB+M,sBAAnB,GAA4C,KAAK1Q,MAAL,CAAYU,QAAZ,CAAqBO,kBAAjE;;AAEA,gBAAI,KAAKwE,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKiL,iCAAL;AACH,aAFD,MAEO;AACH,mBAAKC,iCAAL;AACH;;AAED,iBAAKC,aAAL;AACH;;;8DAEmC;AAAA;;AAChC,iBAAKlN,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASyH,WAAT,EAAyB;AAC3D,kBAAI9G,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AAEAW,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,gBAAA,OAAI,CAACqE,wBAAL,CAA8B1E,KAA9B,EAAqCK,UAArC,EAAiD,CAAC5B,WAAD,CAAjD;AACH,eAFD;;AAIA,cAAA,OAAI,CAACkG,mBAAL,CAAyB3N,MAAzB;AACH,aARD;AASH;;;mDAEwBgJ,K,EAAOK,U,EAAYuE,e,EAAiB;AACzD,gBAAIzH,QAAQ,GAAG6C,KAAK,CAACE,YAAN,CAAmB,CAAnB,CAAf;AACA,iBAAK2E,oBAAL,CAA0B1H,QAA1B,EAAoCkD,UAApC,EAAgD,KAAKzM,MAAL,CAAYU,QAAZ,CAAqBO,kBAArE,EAAyF,KAAKjB,MAAL,CAAYU,QAAZ,CAAqBU,mBAA9G,EAAmI4P,eAAnI;AACA5E,YAAAA,KAAK,CAAC8E,CAAN,GAAU3H,QAAQ,CAAC2H,CAAnB;AACH;;;+CAEoB3H,Q,EAAU4H,a,EAAeC,W,EAAaC,sB,EAAwBL,e,EAAiB;AAAA;;AAChGzH,YAAAA,QAAQ,CAAC2H,CAAT,GAAa,KAAKvN,aAAL,CAAmB4K,cAAnB,GAAoC4C,aAAa,IAAIC,WAAW,GAAGC,sBAAlB,CAA9D;AACA,gBAAIC,IAAI,GAAG/H,QAAQ,CAAC2H,CAAT,GAAaE,WAAxB;;AAEA,gBAAIE,IAAI,GAAG,KAAK3N,aAAL,CAAmBoM,YAA9B,EAA4C;AACxC,mBAAKpM,aAAL,CAAmBoM,YAAnB,GAAkCuB,IAAlC;AACH;;AAEDN,YAAAA,eAAe,CAAC7N,OAAhB,CAAwB,UAAC0H,WAAD,EAAiB;AACrC,cAAA,OAAI,CAAC0G,0BAAL,CAAgChI,QAAhC,EAA0CsB,WAA1C,EAAuDuG,WAAvD;AACH,aAFD;AAGH;;;qDAE0B7H,Q,EAAUsB,W,EAAauG,W,EAAa;AAAA;;AAC3D,gBAAInE,cAAc,GAAG,KAAKtJ,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,CAArB;AACA,gBAAIiC,cAAc,GAAGvD,QAAQ,CAACtG,UAAT,CAAoB4H,WAApB,CAArB;;AAEA,gBAAI,KAAKgE,YAAT,EAAuB;AACnB5B,cAAAA,cAAc,CAACC,uBAAf,CAAuC/J,OAAvC,CAA+C,UAACoK,UAAD,EAAaiE,UAAb,EAA4B;AACvE,oBAAI7H,KAAK,GAAGmD,cAAc,CAAC1F,IAAf,CAAoBmG,UAApB,CAAZ;;AAEA,oBAAI5D,KAAJ,EAAW;AACP,kBAAA,OAAI,CAAC8H,yBAAL,CAA+BlI,QAA/B,EAAyCsB,WAAzC,EAAsDoC,cAAtD,EAAsEtD,KAAtE,EAA6E6H,UAA7E,EACI,OAAI,CAACxR,MAAL,CAAYU,QAAZ,CAAqBK,UADzB,EACqCqQ,WADrC;AAEH;AACJ,eAPD;AAQH,aATD,MASO;AACHtE,cAAAA,cAAc,CAAC1F,IAAf,CAAoBjE,OAApB,CAA4B,UAACwG,KAAD,EAAQ4D,UAAR,EAAuB;AAC/C,gBAAA,OAAI,CAACkE,yBAAL,CAA+BlI,QAA/B,EAAyCsB,WAAzC,EAAsDoC,cAAtD,EAAsEtD,KAAtE,EAA6E4D,UAA7E,EAAyF,OAAI,CAACvN,MAAL,CAAYU,QAAZ,CAAqBK,UAA9G,EAA0HqQ,WAA1H;AACH,eAFD;AAGH;AACJ;;;oDAEyB7H,Q,EAAUsB,W,EAAaoC,c,EAAgBtD,K,EAAO4D,U,EAAYxM,U,EAAYqQ,W,EAAa;AACzGzH,YAAAA,KAAK,CAAC+H,CAAN,GAAUzE,cAAc,CAACsD,MAAf,GAAwBhD,UAAU,GAAGxM,UAA/C;AACA4I,YAAAA,KAAK,CAAChI,KAAN,GAAc,KAAKgQ,eAAL,CAAqBhI,KAAK,CAACF,KAA3B,EAAkC,KAAK9F,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,EAA2Cb,QAA7E,CAAd;AACA,iBAAK5D,eAAL,CAAqBwL,SAArB,GAAiCjI,KAAK,CAAChI,KAAvC;AACA,iBAAKyE,eAAL,CAAqByL,QAArB,CAA8BlI,KAAK,CAAC+H,CAApC,EAAuCnI,QAAQ,CAAC2H,CAAhD,EAAmDnQ,UAAnD,EAA+DqQ,WAA/D;AACH;;;0CAEe3H,K,EAAO8B,G,EAAK;AAAA;;AACxB,gBAAI7C,MAAJ;AAEA6C,YAAAA,GAAG,CAACpI,OAAJ,CAAY,UAACxB,KAAD,EAAQwI,SAAR,EAAsB;AAC9B,kBAAI,OAAI,CAACqB,SAAL,CAAe/B,KAAf,EAAsBU,SAAS,CAACxF,GAAhC,EAAqCwF,SAAS,CAACvF,GAA/C,CAAJ,EAAyD;AACrD8D,gBAAAA,MAAM,GAAG/G,KAAT;AACH;AACJ,aAJD;AAMA,mBAAO+G,MAAP;AACH;;;8DAEmC;AAAA;;AAChC,gBAAI3E,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;AAEA3L,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,kBAAIuE,eAAe,GAAG,OAAI,CAACc,qBAAL,EAAtB;;AACA,cAAA,OAAI,CAAChB,wBAAL,CAA8B1E,KAA9B,EAAqCK,UAArC,EAAiDuE,eAAjD;AACH,aAHD;AAKA,iBAAKD,mBAAL,CAAyB,KAAKpN,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,CAArE,CAAzB;AACH;;;kDAEuB;AACpB,mBAAO2N,KAAK,CAACnK,IAAN,CAAWmK,KAAK,CAAC,KAAKpO,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA/B,CAAL,CAA4C4N,IAA5C,EAAX,CAAP;AACH;;;0CAEe;AACZ,iBAAK5D,2BAAL;AACA,gBAAI6D,KAAK,GAAG,aAAZ;AACA,gBAAIC,UAAU,GAAG,KAAK9L,eAAL,CAAqBkI,WAArB,CAAiC2D,KAAjC,EAAwCnE,KAAzD;;AAEA,gBAAI,KAAKrI,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKyM,4BAAL,CAAkCD,UAAlC;AACH,aAFD,MAEO;AACH,mBAAKE,8BAAL,CAAoCF,UAApC;AACH;AACJ;;;uDAE4BA,U,EAAY;AAAA;;AACrC,iBAAKvO,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,kBAAImN,MAAM,GAAGnN,MAAM,CAACkN,IAAP,GAAc,OAAI,CAACtQ,MAAL,CAAYU,QAAZ,CAAqBe,+BAAhD;;AACA,kBAAIgP,qBAAqB,GAAG,OAAI,CAACnB,wBAAL,CAA8BlM,MAA9B,CAA5B;;AACA,kBAAIW,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AAEAW,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,gBAAA,OAAI,CAAC4F,oBAAL,CAA0B9B,MAA1B,EAAkCnE,KAAlC,EAAyCK,UAAzC,EAAqD,OAAI,CAACzM,MAAL,CAAYU,QAAZ,CAAqBY,6BAA1E;AACH,eAFD;;AAIA,cAAA,OAAI,CAACgR,kBAAL,CAAwB,CAAC/B,MAAM,GAAG,CAAT,GAAaE,qBAAb,GAAqCyB,UAAtC,IAAoD,CAA5E;AACH,aAVD;AAWH;;;6CAEkBR,C,EAAG;AAClB,iBAAKtL,eAAL,CAAqBwL,SAArB,GAAiC,OAAjC;AACA,iBAAKxL,eAAL,CAAqBmM,QAArB,CAA8B,aAA9B,EAA6Cb,CAA7C,EAAgD,KAAK/N,aAAL,CAAmB0K,eAAnE;AACH;;;+CAEoBkC,M,EAAQnE,K,EAAOK,U,EAAY+F,c,EAAgB;AAC5D,gBAAIlC,IAAI,GAAGC,MAAM,GAAGnE,KAAK,CAACE,YAAN,CAAmBlI,MAAnB,GAA4BoO,cAAhD;AACA,gBAAIC,MAAM,GAAG,KAAK9O,aAAL,CAAmB4K,cAAnB,GACT9B,UAAU,IAAI,KAAKzM,MAAL,CAAYU,QAAZ,CAAqBO,kBAArB,GAA0C,KAAKjB,MAAL,CAAYU,QAAZ,CAAqBU,mBAAnE,CADd;AAEA,gBAAIkQ,IAAI,GAAGmB,MAAM,GAAG,KAAKzS,MAAL,CAAYU,QAAZ,CAAqBO,kBAAzC;AACA,iBAAKmF,eAAL,CAAqBsM,SAArB;AACA,iBAAKtM,eAAL,CAAqBuM,MAArB,CAA4BpC,MAA5B,EAAoCkC,MAApC;AACA,iBAAKrM,eAAL,CAAqBwM,MAArB,CAA4BtC,IAA5B,EAAkCmC,MAAlC;AACA,iBAAKrM,eAAL,CAAqBwM,MAArB,CAA4BtC,IAA5B,EAAkCgB,IAAlC;AACA,iBAAKlL,eAAL,CAAqBwM,MAArB,CAA4BrC,MAA5B,EAAoCe,IAApC;AACA,iBAAKlL,eAAL,CAAqByM,SAArB;AACA,iBAAKzM,eAAL,CAAqBwL,SAArB,GAAiC,OAAjC;AACA,iBAAKxL,eAAL,CAAqB0M,IAArB;AACA,mBAAOxC,IAAP;AACH;;;yDAE8B4B,U,EAAY;AAAA;;AACvC,gBAAI3B,MAAM,GAAG,KAAK5M,aAAL,CAAmBiL,aAAnB,GAAmC,KAAK5O,MAAL,CAAYU,QAAZ,CAAqBe,+BAAxD,GAA0FyQ,UAAU,GAAG,CAApH;AACA,gBAAIa,OAAO,GAAG,CAAd;AACA,gBAAIhP,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;AAEA3L,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAQK,UAAR,EAAuB;AACrC,kBAAI6D,IAAI,GAAG,OAAI,CAAC+B,oBAAL,CAA0B9B,MAA1B,EAAkCnE,KAAlC,EAAyCK,UAAzC,EAAqD,OAAI,CAACzM,MAAL,CAAYU,QAAZ,CAAqBa,+BAA1E,CAAX;;AAEA,kBAAI+O,IAAI,GAAGyC,OAAX,EAAoB;AAChBA,gBAAAA,OAAO,GAAGzC,IAAV;AACH;AACJ,aAND;AAQA,iBAAKgC,kBAAL,CAAwB,CAAC/B,MAAM,GAAGwC,OAAT,GAAmBb,UAApB,IAAkC,CAA1D;AACH;;;8CAEmB9O,M,EAAQ;AACxB,iBAAKgD,eAAL,CAAqB4M,WAArB,GAAmC,MAAnC;AACA,gBAAItB,CAAC,GAAGtO,MAAM,CAACkN,IAAP,GAAc,KAAKtQ,MAAL,CAAYU,QAAZ,CAAqBS,gCAArB,GAAwD,CAA9E;;AAEA,gBAAI,KAAKsE,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,kBAAI+K,qBAAqB,GAAG,KAAKnB,wBAAL,CAA8BlM,MAA9B,CAA5B;AACAsO,cAAAA,CAAC,IAAI,KAAK1R,MAAL,CAAYU,QAAZ,CAAqBe,+BAArB,GAAuDgP,qBAA5D;AACH;;AAED,iBAAKrK,eAAL,CAAqBsM,SAArB;AACA,iBAAKtM,eAAL,CAAqBuM,MAArB,CAA4BjB,CAA5B,EAA+B,KAAK/N,aAAL,CAAmB4K,cAAlD;AACA,iBAAKnI,eAAL,CAAqBwM,MAArB,CAA4BlB,CAA5B,EAA+B,KAAK/N,aAAL,CAAmB4K,cAAnB,GAAoC,KAAK5K,aAAL,CAAmBkM,cAAtF;AACA,iBAAKzJ,eAAL,CAAqB6M,MAArB;AACA,iBAAK7M,eAAL,CAAqByM,SAArB;AACH;;;kDAEuB;AAAA;;AACpB,iBAAKlP,aAAL,CAAmB+M,sBAAnB,GAA4C,KAAK1Q,MAAL,CAAYU,QAAZ,CAAqBM,oBAAjE;AAEA,iBAAK2C,aAAL,CAAmByD,IAAnB,CAAwBjE,OAAxB,CAAgC,UAACoG,QAAD,EAAW4H,aAAX,EAA6B;AACzD,kBAAIH,eAAe,GAAG,OAAI,CAACc,qBAAL,EAAtB;;AACA,cAAA,OAAI,CAACb,oBAAL,CAA0B1H,QAA1B,EAAoC4H,aAApC,EAAmD,OAAI,CAACnR,MAAL,CAAYU,QAAZ,CAAqBM,oBAAxE,EAA8F,CAA9F,EAAiGgQ,eAAjG;AACH,aAHD;;AAKA,gBAAI,CAAC,KAAKnC,YAAV,EAAwB,CACpB;AACH;AACJ;;;0CAEe;AACZ,iBAAK,IAAIrL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAIkO,CAAC,GAAG,KAAK/N,aAAL,CAAmBV,UAAnB,CAA8BO,CAA9B,EAAiC+M,MAAjC,GAA0C,KAAKvQ,MAAL,CAAYU,QAAZ,CAAqBS,gCAArB,GAAwD,CAAlG,GACJsD,IAAI,CAACyO,KAAL,CAAW,KAAKlT,MAAL,CAAYU,QAAZ,CAAqBW,aAArB,GAAqC,CAAhD,CADJ;AAEA,mBAAK8R,sBAAL,CAA4BzB,CAA5B;AACH;AACJ;;;iDAEsBA,C,EAAG;AAAA;;AACtB,gBAAIR,CAAC,GAAG,KAAKvN,aAAL,CAAmB4K,cAA3B;AAEA,iBAAK5K,aAAL,CAAmBsI,qBAAnB,CAAyC9I,OAAzC,CAAiD,UAACiJ,KAAD,EAAW;AACxD,cAAA,OAAI,CAAChG,eAAL,CAAqBwL,SAArB,GAAiCxF,KAAK,CAACzK,KAAvC;AACA,kBAAIoM,MAAM,GAAG3B,KAAK,CAACE,YAAN,CAAmBlI,MAAnB,GAA4B,OAAI,CAACpE,MAAL,CAAYU,QAAZ,CAAqBM,oBAA9D;;AACA,cAAA,OAAI,CAACoF,eAAL,CAAqByL,QAArB,CAA8BH,CAA9B,EAAiCR,CAAjC,EAAoC,OAAI,CAAClR,MAAL,CAAYU,QAAZ,CAAqBW,aAAzD,EAAwE0M,MAAxE;;AACAmD,cAAAA,CAAC,IAAInD,MAAL;AACH,aALD;AAMH;;;6CAEkB;AACf,iBAAKK,2BAAL;;AAEA,iBAAK,IAAIvD,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,KAAKlH,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAtE,EAA8E,EAAEyG,WAAhF,EAA6F;AACzF,kBAAIzH,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,CAAb;AACA,kBAAIoH,KAAK,GAAG,KAAKjP,KAAL,CAAWC,UAAX,CAAsB4H,WAAtB,EAAmCjI,IAA/C;AACA,kBAAIkL,KAAK,GAAG,KAAK1H,eAAL,CAAqBkI,WAArB,CAAiC2D,KAAjC,EAAwCnE,KAApD;AACA,mBAAK1H,eAAL,CAAqBwL,SAArB,GAAiC,KAAKwB,qBAAL,CAA2B,KAAKpQ,KAAL,CAAWC,UAAX,CAAsB4H,WAAtB,CAA3B,CAAjC;AACA,mBAAKzE,eAAL,CAAqBmM,QAArB,CAA8BN,KAA9B,EAAqC,CAAC7O,MAAM,CAACmN,MAAP,GAAgBnN,MAAM,CAACkN,IAAvB,GAA8BxC,KAA/B,IAAwC,CAA7E,EAAgF,KAAKnK,aAAL,CAAmB0K,eAAnG;AACH;AACJ;;;gDAEqBjL,M,EAAQ;AAC1B,gBAAIE,SAAS,GAAGF,MAAM,CAACE,SAAvB;AACA,mBAAOA,SAAS,CAACA,SAAS,CAACc,MAAV,GAAmB,CAApB,CAAhB;AACH;;;4CAEiB;AACd,iBAAKsK,0BAAL;AACA,gBAAIwC,CAAC,GAAG,KAAKvN,aAAL,CAAmB4K,cAAnB,GAAoC,KAAK5K,aAAL,CAAmBkM,cAAvD,GAAwE,KAAK7P,MAAL,CAAYU,QAAZ,CAAqBI,8BAArG;AACA,gBAAIsC,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,CAArE,CAAb;AACA,iBAAKgC,eAAL,CAAqBwL,SAArB,GAAiC,OAAjC;AACA,iBAAKxL,eAAL,CAAqBmM,QAArB,CAA8B,KAAK5O,aAAL,CAAmBmE,MAAjD,EAAyD1E,MAAM,CAACkN,IAAP,GAAc,KAAK3M,aAAL,CAAmBsL,WAAnB,GAAiC,CAAxG,EAA2GiC,CAA3G;AACH;;;uDAE4B;AACzB,iBAAK9K,eAAL,CAAqB0J,IAArB,GAA4B,YAAY,KAAK9P,MAAL,CAAYU,QAAZ,CAAqBG,YAAjC,GAAgD,UAA5E;AACH;;;8CAEmBqH,I,EAAM;AACtB,mBAAO3J,MAAM,CAAC2J,IAAD,CAAN,CAAamL,MAAb,CAAoB,KAAKrT,MAAL,CAAYE,UAAhC,CAAP;AACH;;;+CAEoB;AACjB,iBAAKyN,YAAL;AACH;;;+CAEoB;AACjB,iBAAK2F,uBAAL;AACH;;;oDAEyB;AACtB,iBAAK3F,YAAL;AACA,iBAAKD,cAAL;AACA,iBAAK6F,kBAAL;AACA,iBAAKC,iBAAL;AACA,iBAAKC,SAAL,GAAiB,KAAjB;AACA,iBAAKC,uBAAL,GAA+B,KAA/B;AACH;;;8CAEmB;AAChB,iBAAK5P,UAAL,CAAgBC,SAAhB,GAA4B,EAA5B;AACA,iBAAK4P,6BAAL;AACA,iBAAKC,4BAAL;AACH;;;0DAE+B;AAAA;;AAC5B,iBAAKjQ,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,kBAAIA,MAAM,CAACyQ,iBAAX,EAA8B;AAC1BzQ,gBAAAA,MAAM,CAAC6I,qBAAP,CAA6B5B,GAA7B,CAAiC,OAAI,CAACyJ,sBAAtC,EAA8D1Q,MAAM,CAACyQ,iBAArE;AACAzQ,gBAAAA,MAAM,CAACyQ,iBAAP,GAA2B,IAA3B;AACH;;AAED,kBAAI9P,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AAEA,kBAAIW,SAAJ,EAAe;AACXA,gBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzBA,kBAAAA,KAAK,CAAC2H,UAAN,GAAmB,KAAnB;AACA3H,kBAAAA,KAAK,CAAC4H,kBAAN,GAA2B,IAA3B;AACH,iBAHD;AAIH;AACJ,aAdD;AAeH;;;yDAE8B;AAC3B,gBAAI,KAAKrQ,aAAL,CAAmBkQ,iBAAvB,EAA0C;AACtC,mBAAKlQ,aAAL,CAAmBsI,qBAAnB,CAAyC5B,GAAzC,CAA6C,KAAKyJ,sBAAlD,EAA0E,KAAKnQ,aAAL,CAAmBkQ,iBAA7F;AACA,mBAAKlQ,aAAL,CAAmBkQ,iBAAnB,GAAuC,IAAvC;AACH;;AAED,gBAAI9P,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;AAEA3L,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzBA,cAAAA,KAAK,CAAC2H,UAAN,GAAmB,KAAnB;AACA3H,cAAAA,KAAK,CAAC4H,kBAAN,GAA2B,IAA3B;AACH,aAHD;AAIH;;;oDAEyB;AACtB,iBAAKV,uBAAL;AACH;;;yCAEc;AACX,iBAAKpE,SAAL,GAAiB,CAAC,KAAKA,SAAvB;AACA,iBAAKoE,uBAAL;AACH;;;gDAEqB;AAClB,iBAAKQ,sBAAL,GAA8B,KAAK/N,iBAAnC;;AAEA,gBAAI,KAAKN,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKuO,0BAAL;AACH,aAFD,MAEO;AACH,mBAAKC,4BAAL;AACH;;AAED,iBAAKC,mBAAL;AACA,iBAAKT,uBAAL,GAA+B,KAA/B;AACA,iBAAK/F,YAAL;AACA,iBAAKyG,yBAAL;AACA,iBAAKC,cAAL;AACH;;;uDAE4B;AAAA;;AACzB,iBAAK1Q,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,kBAAIW,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AAEA,kBAAI,CAACA,MAAM,CAACyQ,iBAAZ,EAA+B;AAC3BzQ,gBAAAA,MAAM,CAACyQ,iBAAP,GAA2B,EAA3B;AAEA9P,gBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzBhJ,kBAAAA,MAAM,CAACyQ,iBAAP,CAAyBxQ,IAAzB,CAA8B+I,KAA9B;AACH,iBAFD;AAGH;;AAED,cAAA,OAAI,CAACkI,0BAAL,CAAgCvQ,SAAhC;AACH,aAZD;AAaH;;;qDAE0BA,S,EAAW;AAClC,gBAAIwQ,gBAAgB,GAAG,EAAvB;AAEAxQ,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzBmI,cAAAA,gBAAgB,CAAClR,IAAjB,CAAsB+I,KAAtB;AACH,aAFD;AAIArI,YAAAA,SAAS,CAACK,MAAV,GAAmB,CAAnB;AACA,iBAAKoQ,uBAAL,CAA6BD,gBAA7B,EAA+CxQ,SAA/C;AACH;;;kDAEuBwQ,gB,EAAkBxQ,S,EAAW;AACjD,gBAAI0Q,WAAJ;AAEAF,YAAAA,gBAAgB,CAACpR,OAAjB,CAAyB,UAACiJ,KAAD,EAAW;AAChC,kBAAIA,KAAK,CAAC2H,UAAV,EAAsB;AAClB,oBAAIU,WAAJ,EAAiB;AACbrI,kBAAAA,KAAK,CAACE,YAAN,CAAmBnJ,OAAnB,CAA2B,UAACoG,QAAD,EAAc;AACrCkL,oBAAAA,WAAW,CAACnI,YAAZ,CAAyBjJ,IAAzB,CAA8BkG,QAA9B;AACH,mBAFD;AAGH,iBAJD,MAIO;AACHkL,kBAAAA,WAAW,GAAGxP,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeiH,KAAf,CAAX,CAAd;AACArI,kBAAAA,SAAS,CAACV,IAAV,CAAeoR,WAAf;AACH;AACJ,eATD,MASO;AACH1Q,gBAAAA,SAAS,CAACV,IAAV,CAAe+I,KAAf;AACH;AACJ,aAbD;AAcH;;;gDAEqB;AAAA;;AAClB,iBAAKtI,UAAL,CAAgBC,SAAhB,GAA4B,EAA5B;;AAEA,gBAAI,KAAK0B,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,oBAAIW,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AACA,gBAAA,OAAI,CAACsR,0BAAL,CAAgC3Q,SAAhC;AACH,eAHD;AAIH,aALD,MAKO;AACH,mBAAK2Q,0BAAL,CAAgC,KAAKhF,iCAAL,EAAhC;AACH;AACJ;;;qDAE0B3L,S,EAAW;AAAA;;AAClCA,YAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzB,kBAAIA,KAAK,CAAC2H,UAAV,EAAsB;AAClB,gBAAA,OAAI,CAACY,eAAL,CAAqBvI,KAArB;AACH;AACJ,aAJD;AAKH;;;0CAEeA,K,EAAO;AAAA;;AACnB,gBAAIwI,UAAU,GAAG,EAAjB;AACAA,YAAAA,UAAU,CAACtI,YAAX,GAA0B,EAA1B;AACAsI,YAAAA,UAAU,CAACC,aAAX,GAA2BzI,KAA3B;AAEAA,YAAAA,KAAK,CAACE,YAAN,CAAmBnJ,OAAnB,CAA2B,UAAC2R,gBAAD,EAAsB;AAC7C,kBAAIC,kBAAkB,GAAGvW,CAAC,CAAC6Q,KAAF,CAAQyF,gBAAgB,CAAC7R,UAAzB,EAAqC,UAACG,MAAD,EAAY;AACtE,uBAAOA,MAAM,CAACgE,IAAP,CAAYhD,MAAnB;AACH,eAFwB,CAAzB;;AAIA,cAAA,OAAI,CAACN,UAAL,CAAgBkR,gBAAhB,GAAmCjD,KAAK,CAACnK,IAAN,CAAWmK,KAAK,CAACgD,kBAAkB,CAAC3N,IAAnB,CAAwBhD,MAAzB,CAAL,CAAsC4N,IAAtC,EAAX,CAAnC;;AACA,kBAAIiD,aAAa,GAAG,OAAI,CAACC,gBAAL,CAAsBJ,gBAAtB,EAAwC,OAAI,CAAChR,UAAL,CAAgBkR,gBAAxD,CAApB;;AACAJ,cAAAA,UAAU,CAACtI,YAAX,CAAwBjJ,IAAxB,CAA6B4R,aAA7B;AACH,aARD;AAUA,iBAAKnR,UAAL,CAAgBC,SAAhB,CAA0BV,IAA1B,CAA+BuR,UAA/B;AACH;;;yDAE8B;AAAA;;AAC3B,gBAAI7Q,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;;AAEA,gBAAI,CAAC,KAAK/L,aAAL,CAAmBkQ,iBAAxB,EAA2C;AACvC,mBAAKlQ,aAAL,CAAmBkQ,iBAAnB,GAAuC,EAAvC;AAEA9P,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzB,gBAAA,OAAI,CAACzI,aAAL,CAAmBkQ,iBAAnB,CAAqCxQ,IAArC,CAA0C+I,KAA1C;AACH,eAFD;AAGH;;AAED,iBAAKkI,0BAAL,CAAgCvQ,SAAhC;AACH;;;+CAEoB;AACjB,iBAAK8K,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACA,iBAAKyE,uBAAL;AACH;;;oDAEyB;AACtB,iBAAKC,kBAAL;;AAEA,gBAAI,KAAK5P,aAAL,CAAmBsI,qBAAvB,EAA8C;AAC1C,mBAAKtI,aAAL,CAAmBsI,qBAAnB,CAAyC9I,OAAzC,CAAiD,UAACiJ,KAAD,EAAW;AACxDA,gBAAAA,KAAK,CAAC4H,kBAAN,GAA2B,EAA3B;AACH,eAFD;AAGH;;AAED,gBAAI,KAAKrQ,aAAL,CAAmBV,UAAvB,EAAmC;AAC/B,mBAAKU,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9CA,gBAAAA,MAAM,CAAC6I,qBAAP,CAA6B9I,OAA7B,CAAqC,UAACiJ,KAAD,EAAW;AAC5CA,kBAAAA,KAAK,CAAC4H,kBAAN,GAA2B,EAA3B;AACH,iBAFD;AAGH,eAJD;AAKH;AACJ;;;+CAEoB;AACjB,iBAAKrN,4BAAL,CAAkCkH,SAAlC,CAA4C,CAA5C,EAA+C,CAA/C,EAAkD,KAAKnH,2BAAL,CAAiCoH,KAAnF,EAA0F,KAAKpH,2BAAL,CAAiCqH,MAA3H;AACH;;;8CAEmBoH,G,EAAK;AACrB,gBAAI,KAAKC,sBAAT,EAAiC;AAC7B,mBAAKC,aAAL,GAAqB,IAArB;AACA,mBAAKC,aAAL;AACH,aAHD,MAGO,IAAI,KAAKpG,SAAL,IAAkB,KAAKvL,aAAL,CAAmB4R,YAArC,IAAqD,KAAK3P,iBAAL,IAA0B,KAAKJ,QAAL,CAAcI,iBAAd,CAAgCE,KAAnH,EAA0H;AAC7H,mBAAKnC,aAAL,CAAmB6R,oBAAnB,GAA0C,IAA1C;AACA,mBAAK7R,aAAL,CAAmB8R,oBAAnB,GAA0C,KAAK9R,aAAL,CAAmB+R,oBAA7D;AACA,mBAAK/R,aAAL,CAAmBgS,cAAnB,GAAoC,KAAKhS,aAAL,CAAmB4R,YAAvD;AACH;AACJ;;;0CAEe;AACZ,iBAAK9O,sBAAL,CAA4BoH,SAA5B,CAAsC,CAAtC,EAAyC,CAAzC,EAA4C,KAAKrH,eAAL,CAAqBsH,KAAjE,EAAwE,KAAKtH,eAAL,CAAqBuH,MAA7F;AACA,gBAAId,cAAc,GAAG,KAAKtJ,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBiS,mBAAjD,CAArB;AACA,gBAAIC,WAAW,GAAG,KAAK7S,KAAL,CAAWC,UAAX,CAAsB,KAAKU,aAAL,CAAmBiS,mBAAzC,CAAlB;AACA,iBAAKE,iBAAL,CAAuB7I,cAAvB,EAAuC4I,WAAvC;AACH;;;4CAEiB5I,c,EAAgB4I,W,EAAa;AAC3C,iBAAKpP,sBAAL,CAA4BqJ,IAA5B,GAAmC,KAAK9P,MAAL,CAAYU,QAAZ,CAAqBE,cAArB,GAAsC,UAAzE;AACA,iBAAKgD,cAAL,CAAoBmS,kBAApB,GAAyC,KAAKpS,aAAL,CAAmB0K,eAAnB,GAAqC,KAAKrO,MAAL,CAAY+B,SAAZ,CAAsBC,2BAApG;AACA,iBAAKyE,sBAAL,CAA4BmL,SAA5B,GAAwC,OAAxC;AACA,iBAAKnL,sBAAL,CAA4BuM,WAA5B,GAA0C,OAA1C;AACA,iBAAKvM,sBAAL,CAA4BqJ,IAA5B,GAAmC,UAAU,KAAK9P,MAAL,CAAYU,QAAZ,CAAqBE,cAA/B,GAAgD,UAAnF;AACA,iBAAKoV,yBAAL,CAA+B/I,cAA/B;AACA,iBAAKgJ,2BAAL,CAAiChJ,cAAjC,EAAiD4I,WAAjD;AACA,iBAAKK,iCAAL,CAAuCjJ,cAAvC;AACH;;;oDAEyBA,c,EAAgB;AACtC,gBAAI9B,UAAU,GAAG,YAAjB;AACA,gBAAIgL,iBAAiB,GAAG,KAAK1P,sBAAL,CAA4B6H,WAA5B,CAAwCrB,cAAc,CAAClL,SAAf,CAAyB6C,GAAjE,EAAsEkJ,KAA9F;AACA,gBAAIsI,kBAAkB,GAAG,KAAK3P,sBAAL,CAA4B6H,WAA5B,CAAwCnD,UAAxC,EAAoD2C,KAA7E;AACA,iBAAKlK,cAAL,CAAoByS,oBAApB,GAA2CF,iBAAiB,GAAG,KAAKnW,MAAL,CAAY+B,SAAZ,CAAsBC,2BAA1C,GAAwEoU,kBAAkB,GAAG,CAAxI;AACA,iBAAK3P,sBAAL,CAA4B8L,QAA5B,CAAqCpH,UAArC,EAAiD,KAAKvH,cAAL,CAAoByS,oBAApB,GAA2CD,kBAAkB,GAAG,CAAjH,EAAoH,KAAKzS,aAAL,CAAmB0K,eAAvI;AACA,iBAAKzK,cAAL,CAAoB0S,eAApB,GAAsC,KAAK1S,cAAL,CAAoBmS,kBAApB,GAAyC,KAAK/V,MAAL,CAAY+B,SAAZ,CAAsBE,mBAArG;AACA,iBAAKwE,sBAAL,CAA4BiM,SAA5B;AACA,iBAAKjM,sBAAL,CAA4BkM,MAA5B,CAAmC,KAAK/O,cAAL,CAAoByS,oBAAvD,EAA6E,KAAKzS,cAAL,CAAoBmS,kBAAjG;AACA,iBAAKtP,sBAAL,CAA4BmM,MAA5B,CAAmC,KAAKhP,cAAL,CAAoByS,oBAAvD,EAA6E,KAAKzS,cAAL,CAAoB0S,eAAjG;AACA,iBAAK7P,sBAAL,CAA4BwM,MAA5B;AACA,iBAAKxM,sBAAL,CAA4BoM,SAA5B;AACH;;;sDAE2B5F,c,EAAgB4I,W,EAAa;AACrD,iBAAKjS,cAAL,CAAoB2S,kBAApB,GAAyC,KAAK3S,cAAL,CAAoByS,oBAApB,GAA2C,KAAKrW,MAAL,CAAY+B,SAAZ,CAAsBG,QAAtB,GAAiC+K,cAAc,CAACrI,GAApI;AACA,gBAAI4R,MAAM,GAAG,KAAK5S,cAAL,CAAoB2S,kBAApB,GAAyC,KAAKvW,MAAL,CAAY+B,SAAZ,CAAsBC,2BAA5E;AACA,gBAAIyU,MAAM,GAAG,KAAK7S,cAAL,CAAoB0S,eAApB,GAAsC,KAAK3S,aAAL,CAAmB0K,eAAnB,GAAqC,CAAxF;AACA,iBAAK5H,sBAAL,CAA4B8L,QAA5B,CAAqCsD,WAAW,CAAChT,IAAjD,EAAuD2T,MAAvD,EAA+DC,MAA/D;AACA,iBAAKhQ,sBAAL,CAA4BiM,SAA5B;AACA,iBAAKjM,sBAAL,CAA4BkM,MAA5B,CAAmC,KAAK/O,cAAL,CAAoByS,oBAAvD,EAA6E,KAAKzS,cAAL,CAAoB0S,eAAjG;AACA,iBAAK7P,sBAAL,CAA4BmM,MAA5B,CAAmC,KAAKhP,cAAL,CAAoB2S,kBAAvD,EAA2E,KAAK3S,cAAL,CAAoB0S,eAA/F;AACA,iBAAK7P,sBAAL,CAA4BwM,MAA5B;AACA,iBAAKxM,sBAAL,CAA4BoM,SAA5B;AACH;;;4DAEiC5F,c,EAAgB;AAC9C,iBAAKxG,sBAAL,CAA4BqJ,IAA5B,GAAmC,KAAK9P,MAAL,CAAYU,QAAZ,CAAqBE,cAArB,GAAsC,UAAzE;AACA,iBAAK6F,sBAAL,CAA4B8L,QAA5B,CAAqCtF,cAAc,CAAClL,SAAf,CAAyB6C,GAA9D,EAAmE,CAAnE,EAAsE,KAAKhB,cAAL,CAAoBmS,kBAApB,GAAyC,KAAKpS,aAAL,CAAmB0K,eAAnB,GAAqC,CAApJ;AACA,gBAAIqI,aAAa,GAAG,KAAKjQ,sBAAL,CAA4B6H,WAA5B,CAAwCrB,cAAc,CAACrI,GAAvD,EAA4DkJ,KAAhF;AACA,gBAAI6I,WAAW,GAAG,KAAK/S,cAAL,CAAoB0S,eAApB,GAAsC,KAAKtW,MAAL,CAAY+B,SAAZ,CAAsBC,2BAA5D,GAA0F,KAAK2B,aAAL,CAAmB0K,eAA/H;AACA,iBAAK5H,sBAAL,CAA4B8L,QAA5B,CAAqCtF,cAAc,CAACrI,GAApD,EAAyD,KAAKhB,cAAL,CAAoB2S,kBAApB,GAAyCG,aAAa,GAAG,CAAlH,EAAqHC,WAArH;AACA,gBAAIC,OAAO,GAAG,KAAKhT,cAAL,CAAoByS,oBAApB,GAA2C,KAAK1S,aAAL,CAAmB0K,eAA9D,GAAgF,KAAKrO,MAAL,CAAY+B,SAAZ,CAAsBC,2BAApH;AACA,iBAAKyE,sBAAL,CAA4B8L,QAA5B,CAAqC,CAArC,EAAwCqE,OAAxC,EAAiDD,WAAjD;AACH;;;8CAEmBxB,G,EAAK;AACrB,gBAAI,KAAKxR,aAAL,CAAmBV,UAAvB,EAAmC;AAC/B,mBAAK4T,wBAAL,CAA8B1B,GAA9B;AACA,mBAAK2B,sBAAL;;AAEA,kBAAI,KAAKnT,aAAL,CAAmBiS,mBAAnB,IAA0C,CAA9C,EAAiD;AAC7C,oBAAI,KAAKpK,SAAL,CAAe,KAAK7H,aAAL,CAAmBoT,aAAnB,CAAiC7F,CAAhD,EAAmD,CAAnD,EAAsD,KAAKvN,aAAL,CAAmB4K,cAAzE,CAAJ,EAA8F;AAC1F,uBAAK6G,sBAAL,GAA8B,IAA9B;AACA,uBAAK4B,0BAAL;AACH,iBAHD,MAGO;AACH,uBAAK5B,sBAAL,GAA8B,KAA9B;AACA,uBAAKpP,8BAAL;AACH;;AAED,oBAAI,KAAKkJ,SAAT,EAAoB;AAChB,uBAAK+H,gCAAL;AACH,iBAFD,MAEO,IAAI,CAAC,KAAKpI,YAAN,IAAsB,CAAC,KAAKqI,gBAAhC,EAAkD;AACrD,uBAAKC,SAAL,CAAehC,GAAf;AACH;AACJ;AACJ;AACJ;;;mDAEwBA,G,EAAK;AAC1B,iBAAKxR,aAAL,CAAmBoT,aAAnB,GAAmC,KAAKK,WAAL,CAAiBjC,GAAjB,EAAsB,KAAK7O,eAA3B,CAAnC;AACH;;;sCAEW6O,G,EAAKlO,M,EAAQ;AACrB,gBAAIoQ,IAAI,GAAGpQ,MAAM,CAACqQ,qBAAP,EAAX;AAEA,mBAAO;AACH5F,cAAAA,CAAC,EAAEyD,GAAG,CAACoC,OAAJ,GAAcF,IAAI,CAACG,IADnB;AAEHtG,cAAAA,CAAC,EAAEiE,GAAG,CAACsC,OAAJ,GAAcJ,IAAI,CAACK;AAFnB,aAAP;AAIH;;;mDAEwB;AACrB,iBAAK/T,aAAL,CAAmBiS,mBAAnB,GAAyC,CAAC,CAA1C;;AAEA,iBAAK,IAAI/K,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,KAAKlH,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAtE,EAA8E,EAAEyG,WAAhF,EAA6F;AACzF,kBAAIzH,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,CAAb;;AAEA,kBAAIzH,MAAJ,EAAY;AACR;AACA,oBAAI,KAAKuU,oBAAL,CAA0BvU,MAA1B,CAAJ,EAAuC;AACnC,uBAAKO,aAAL,CAAmBiS,mBAAnB,GAAyC/K,WAAzC;AACA,uBAAKlH,aAAL,CAAmB+R,oBAAnB,GAA0C,KAAK/R,aAAL,CAAmBoT,aAAnB,CAAiCrF,CAAjC,GAAqCtO,MAAM,CAACmN,MAAtF;AACA;AACH;AACJ;AACJ;AACJ;;;+CAEoBnN,M,EAAQ;AACzB,mBAAO,KAAKoI,SAAL,CAAe,KAAK7H,aAAL,CAAmBoT,aAAnB,CAAiCrF,CAAhD,EAAmDtO,MAAM,CAACmN,MAA1D,EAAkEnN,MAAM,CAACkN,IAAzE,CAAP;AACH;;;uDAE4B;AACzB,iBAAKrK,cAAL,GAAsB,SAAtB;AACH;;;6DAEkC;AAC/B,iBAAKD,8BAAL;AACA,iBAAKrC,aAAL,CAAmB4R,YAAnB,GAAkC,IAAlC;AACA,iBAAK5R,aAAL,CAAmBiU,aAAnB,GAAmC,IAAnC;AACA,iBAAKC,iCAAL;AACA,iBAAKC,uBAAL;;AAEA,gBAAI,KAAKlS,iBAAL,IAA0B,KAAKJ,QAAL,CAAcI,iBAAd,CAAgCC,KAA9D,EAAqE;AACjE,kBAAI,KAAKlC,aAAL,CAAmB4R,YAAvB,EAAqC;AACjC,oBAAI,KAAK1G,YAAL,IAAqB,KAAKpJ,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BE,QAAzE,EAAmF;AAC/E,uBAAKoS,oBAAL;AACH;;AAED,qBAAKC,kBAAL;AACH,eAND,MAMO;AACH,qBAAKzE,kBAAL;AACH;AACJ,aAVD,MAUO,IAAI,KAAK5P,aAAL,CAAmB6R,oBAAvB,EAA6C;AAChD,mBAAKyC,yCAAL;AACA,mBAAKC,sBAAL;AACH;AACJ;;;8DAEmC;AAChC,iBAAK,IAAIC,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,KAAKxU,aAAL,CAAmBE,eAAnB,CAAmCO,MAA3E,EAAmF,EAAE+T,WAArF,EAAkG;AAC9F,kBAAIC,MAAM,GAAG,KAAKzU,aAAL,CAAmBE,eAAnB,CAAmCsU,WAAnC,CAAb;;AAEA,kBAAI,KAAK3M,SAAL,CAAe,KAAK7H,aAAL,CAAmBoT,aAAnB,CAAiCrF,CAAhD,EAAmD0G,MAAM,CAAC7H,MAA1D,EAAkE6H,MAAM,CAAC9H,IAAzE,KACA,KAAK9E,SAAL,CAAe,KAAK7H,aAAL,CAAmBoT,aAAnB,CAAiC7F,CAAhD,EAAmDkH,MAAM,CAAC3F,MAA1D,EAAkE2F,MAAM,CAAC9G,IAAzE,CADJ,EACoF;AAChF,qBAAKrL,cAAL,GAAsB,SAAtB;AACA,qBAAKtC,aAAL,CAAmBiU,aAAnB,GAAmCQ,MAAnC;AACA;AACH;AACJ;AACJ;;;oDAEyB;AACtB,gBAAIrU,SAAJ;;AAEA,gBAAI,KAAK0B,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,kBAAItC,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBiS,mBAAjD,CAAb;AACA7R,cAAAA,SAAS,GAAG,KAAKyL,kCAAL,CAAwCpM,MAAxC,CAAZ;AACH,aAHD,MAGO;AACHW,cAAAA,SAAS,GAAG,KAAK2L,iCAAL,EAAZ;AACH;;AAED,mBAAO,KAAK2I,kCAAL,CAAwCtU,SAAxC,CAAP;AACH;;;6DAEkCA,S,EAAW;AAC1C,iBAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,SAAS,CAACK,MAA9B,EAAsC,EAAEZ,CAAxC,EAA2C;AACvC,kBAAI4I,KAAK,GAAGrI,SAAS,CAACP,CAAD,CAArB;;AAEA,kBAAI,KAAK8U,mBAAL,CAAyBlM,KAAzB,CAAJ,EAAqC;AACjC,uBAAO,IAAP;AACH;AACJ;;AAED,mBAAO,KAAP;AACH;;;8CAEmBA,K,EAAO;AACvB,gBAAI,KAAKZ,SAAL,CAAe,KAAK7H,aAAL,CAAmBoT,aAAnB,CAAiC7F,CAAhD,EAAmD9E,KAAK,CAAC8E,CAAzD,EAA4D9E,KAAK,CAAC8E,CAAN,GAAU,KAAKlR,MAAL,CAAYU,QAAZ,CAAqBO,kBAA3F,CAAJ,EAAoH;AAChH,mBAAK0C,aAAL,CAAmB4R,YAAnB,GAAkCnJ,KAAlC;AACA,mBAAK4K,0BAAL;AACA,qBAAO,IAAP;AACH;AACJ;;;iDAEsB;AACnB,gBAAI/J,cAAc,GAAG,KAAKtJ,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBiS,mBAAjD,CAArB;AACA,gBAAI7R,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;;AAEA,iBAAK,IAAIjD,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAG1I,SAAS,CAACK,MAAhD,EAAwD,EAAEqI,UAA1D,EAAsE;AAClE,kBAAIK,cAAc,GAAG/I,SAAS,CAAC0I,UAAD,CAAT,CAAsBH,YAAtB,CAAmC,CAAnC,EAAsCrJ,UAAtC,CAAiD,KAAKU,aAAL,CAAmBiS,mBAApE,CAArB;;AAEA,mBAAK,IAAI2C,mBAAmB,GAAG,CAA/B,EAAkCA,mBAAmB,GAAGtL,cAAc,CAACC,uBAAf,CAAuC9I,MAA/F,EAAuG,EAAEmU,mBAAzG,EAA8H;AAC1H,oBAAIhL,UAAU,GAAGN,cAAc,CAACC,uBAAf,CAAuCqL,mBAAvC,CAAjB;AACA,oBAAI5O,KAAK,GAAGmD,cAAc,CAAC1F,IAAf,CAAoBmG,UAApB,CAAZ;;AAEA,oBAAI5D,KAAJ,EAAW;AACP,sBAAI,KAAK6O,wBAAL,CAA8B7O,KAA9B,CAAJ,EAA0C;AACtC,yBAAKhG,aAAL,CAAmB8U,iBAAnB,GAAuClL,UAAvC;AACA;AACH;AACJ;AACJ;AACJ;AACJ;;;mDAEwB5D,K,EAAO;AAC5B,mBAAO,KAAK6B,SAAL,CAAe,KAAK7H,aAAL,CAAmBoT,aAAnB,CAAiCrF,CAAhD,EAAmD/H,KAAK,CAAC+H,CAAzD,EAA4D/H,KAAK,CAAC+H,CAAN,GAAU,KAAK1R,MAAL,CAAYU,QAAZ,CAAqBK,UAA3F,CAAP;AACH;;;+CAEoB;AAAA;;AACjB,iBAAKwS,kBAAL;AACA,iBAAK5M,4BAAL,CAAkCqM,WAAlC,GAAgD,KAAKhT,MAAL,CAAY8B,aAAZ,CAA0BH,KAA1E;;AAEA,gBAAI,KAAK8D,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAKgT,wBAAL,CAA8B,KAAK/U,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBiS,mBAAjD,CAA9B;AACH,aAFD,MAEO;AACH,mBAAKjS,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASyH,WAAT,EAAyB;AAC3D,gBAAA,OAAI,CAAC6N,wBAAL,CAA8BtV,MAA9B,EAAsCyH,WAAtC;AACH,eAFD;AAGH;;AAED,iBAAK8N,qBAAL;AACH;;;mDAEwB1L,c,EAAgBpC,W,EAAa;AAClD,gBAAI+N,eAAe,GAAG,KAAKC,sBAAL,CAA4B5L,cAA5B,EAA4C,KAAKtJ,aAAL,CAAmB4R,YAA/D,CAAtB;AACA,gBAAIuD,aAAJ;;AAEA,gBAAI,KAAKjK,YAAL,IAAqB,KAAKpJ,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BE,QAArE,IACAkF,WAAW,IAAI,IADf,IACuBA,WAAW,IAAI,KAAKlH,aAAL,CAAmBiS,mBAD7D,EACkF;AAC9EkD,cAAAA,aAAa,GAAG,KAAKC,qCAAL,CAA2C9L,cAA3C,EAA2DpC,WAA3D,CAAhB;AACH,aAHD,MAGO;AACHiO,cAAAA,aAAa,GAAG7L,cAAc,CAACsD,MAAf,GAAwB,KAAK5M,aAAL,CAAmB+R,oBAA3D;AACH;;AAED,iBAAKsD,qBAAL,CAA2B/L,cAA3B,EAA2C2L,eAA3C,EAA4DE,aAA5D;AACH;;;gEAEqC7L,c,EAAgBpC,W,EAAa;AAC/D,gBAAIoO,kBAAkB,GAAG,CAAzB;;AAEA,iBAAK,IAAIV,mBAAmB,GAAG,CAA/B,EAAkCA,mBAAmB,GAAGtL,cAAc,CAACC,uBAAf,CAAuC9I,MAA/F,EAAuG,EAAEmU,mBAAzG,EAA8H;AAC1H,kBAAIW,iBAAiB,GAAGjM,cAAc,CAACC,uBAAf,CAAuCqL,mBAAvC,CAAxB;;AAEA,kBAAI,KAAK/M,SAAL,CAAe,KAAK7H,aAAL,CAAmB8U,iBAAlC,EAAqDQ,kBAArD,EAAyEC,iBAAzE,CAAJ,EAAiG;AAC7F,oBAAInV,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;;AAEA,qBAAK,IAAIjD,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAG1I,SAAS,CAACK,MAAhD,EAAwD,EAAEqI,UAA1D,EAAsE;AAClE,sBAAIK,cAAc,GAAG/I,SAAS,CAAC0I,UAAD,CAAT,CAAsBH,YAAtB,CAAmC,CAAnC,EAAsCrJ,UAAtC,CAAiD4H,WAAjD,CAArB;AACA,sBAAIlB,KAAK,GAAGmD,cAAc,CAAC1F,IAAf,CAAoB6F,cAAc,CAACC,uBAAf,CAAuCqL,mBAAvC,CAApB,CAAZ;;AAEA,sBAAI5O,KAAJ,EAAW;AACP,2BAAOA,KAAK,CAAC+H,CAAb;AACH;AACJ;AACJ;;AAEDuH,cAAAA,kBAAkB,GAAGC,iBAArB;AACH;AACJ;;;iDAEsB9V,M,EAAQgJ,K,EAAO;AAClC,gBAAIwM,eAAe,GAAGxM,KAAK,CAAC8E,CAAN,GAAU,KAAKlR,MAAL,CAAYU,QAAZ,CAAqBU,mBAArB,GAA2C,CAA3E;AACA,iBAAKuF,4BAAL,CAAkC+L,SAAlC;AACA,iBAAK/L,4BAAL,CAAkCgM,MAAlC,CAAyCvP,MAAM,CAACmN,MAAhD,EAAwDqI,eAAxD;AACA,iBAAKjS,4BAAL,CAAkCiM,MAAlC,CAAyCxP,MAAM,CAACkN,IAAhD,EAAsDsI,eAAtD;AACA,iBAAKjS,4BAAL,CAAkCsM,MAAlC;AACA,iBAAKtM,4BAAL,CAAkCkM,SAAlC;AACA,mBAAO+F,eAAP;AACH;;;gDAEqBxV,M,EAAQwV,e,EAAiBE,a,EAAe;AAC1D,iBAAKnS,4BAAL,CAAkC+L,SAAlC;AACA,iBAAK/L,4BAAL,CAAkCgM,MAAlC,CAAyCmG,aAAzC,EAAwDF,eAAxD;AACA,iBAAKjS,4BAAL,CAAkCiM,MAAlC,CAAyCkG,aAAzC,EAAwD,KAAKnV,aAAL,CAAmB4R,YAAnB,CAAgCrE,CAAxF;AACA,iBAAKvK,4BAAL,CAAkCsM,MAAlC;AACA,iBAAKtM,4BAAL,CAAkCkM,SAAlC;AACH;;;kDAEuB;AACpB,iBAAK,IAAIhI,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,KAAKlH,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAtE,EAA8E,EAAEyG,WAAhF,EAA6F;AACzF,kBAAIoC,cAAc,GAAG,KAAKtJ,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,CAArB,CADyF,CAGzF;;AACA,kBAAI9G,SAAS,GAAG,KAAKyL,kCAAL,CAAwCvC,cAAxC,CAAhB;;AAEA,mBAAK,IAAIR,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAG1I,SAAS,CAACK,MAAhD,EAAwD,EAAEqI,UAA1D,EAAsE;AAClE,oBAAIK,cAAc,GAAG/I,SAAS,CAAC0I,UAAD,CAAT,CAAsBH,YAAtB,CAAmC,CAAnC,EAAsCrJ,UAAtC,CAAiD4H,WAAjD,CAArB;;AAEA,oBAAI,KAAKgE,YAAT,EAAuB;AACnB,uBAAK,IAAI0J,mBAAmB,GAAG,CAA/B,EAAkCA,mBAAmB,GAAGtL,cAAc,CAACC,uBAAf,CAAuC9I,MAA/F,EAAuG,EAAEmU,mBAAzG,EAA8H;AAC1H,wBAAI5O,KAAK,GAAGmD,cAAc,CAAC1F,IAAf,CAAoB6F,cAAc,CAACC,uBAAf,CAAuCqL,mBAAvC,CAApB,CAAZ;;AAEA,wBAAI5O,KAAJ,EAAW;AACP,0BAAI,KAAKwP,wCAAL,CAA8CxP,KAA9C,CAAJ,EAA0D;AACtD;AACH;AACJ;AACJ;AACJ,iBAVD,MAUO;AACH,uBAAK,IAAI4D,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGT,cAAc,CAAC1F,IAAf,CAAoBhD,MAA1D,EAAkE,EAAEmJ,UAApE,EAAgF;AAC5E,wBAAI5D,KAAK,GAAGmD,cAAc,CAAC1F,IAAf,CAAoBmG,UAApB,CAAZ;;AAEA,wBAAI,KAAK4L,wCAAL,CAA8CxP,KAA9C,CAAJ,EAA0D;AACtD;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;;mEAEwCA,K,EAAO;AAC5C,gBAAI,KAAK6O,wBAAL,CAA8B7O,KAA9B,CAAJ,EAA0C;AACtC,mBAAKhD,4BAAL,CAAkCmJ,IAAlC,GAAyC,YAAY,KAAK9P,MAAL,CAAYU,QAAZ,CAAqBG,YAAjC,GAAgD,UAAzF;AACA,mBAAK8F,4BAAL,CAAkCiL,SAAlC,GAA8C,OAA9C;AACA,kBAAI1J,IAAI,GAAG,KAAK8G,mBAAL,CAAyBrF,KAAK,CAACzB,IAAN,GAAa,IAAtC,CAAX;AACA,kBAAIgJ,CAAC,GAAG,KAAKvN,aAAL,CAAmB4K,cAAnB,GAAoC,KAAK5K,aAAL,CAAmBkM,cAAvD,GAAwE,KAAK7P,MAAL,CAAYU,QAAZ,CAAqBI,8BAArG;AACA,kBAAI4Q,CAAC,GAAGjN,IAAI,CAACG,GAAL,CAAS,CAAT,EAAY,KAAKjB,aAAL,CAAmBoT,aAAnB,CAAiCrF,CAAjC,GAAqC,KAAK/N,aAAL,CAAmBsL,WAAnB,GAAiC,CAAlF,CAAR;AACA,mBAAKtI,4BAAL,CAAkC4L,QAAlC,CAA2CrK,IAA3C,EAAiDwJ,CAAjD,EAAoDR,CAApD;AACA,qBAAO,IAAP;AACH,aARD,MAQO;AACH,qBAAO,KAAP;AACH;AACJ;;;sEAE2C;AAAA;;AACxC,iBAAKvN,aAAL,CAAmBgS,cAAnB,CAAkCyD,oBAAlC,GAAyD,KAAKzV,aAAL,CAAmBiS,mBAA5E;AACA,iBAAKjS,aAAL,CAAmBgS,cAAnB,CAAkC3B,kBAAlC,GAAuD,EAAvD;AACA,gBAAIlH,cAAc,GAAG,KAAKnJ,aAAL,CAAmBgS,cAAnB,CAAkCrJ,YAAlC,CAA+C,CAA/C,EAAkDrJ,UAAlD,CAA6D,KAAKU,aAAL,CAAmBiS,mBAAhF,CAArB;AACA,gBAAI3I,cAAc,GAAG,KAAKtJ,aAAL,CAAmBV,UAAnB,CAA8B,KAAKU,aAAL,CAAmBiS,mBAAjD,CAArB;AACA,gBAAIrF,MAAM,GAAGtD,cAAc,CAACsD,MAAf,GAAwB,KAAK5M,aAAL,CAAmB8R,oBAAxD;AACA,gBAAInF,IAAI,GAAGrD,cAAc,CAACsD,MAAf,GAAwB,KAAK5M,aAAL,CAAmB+R,oBAAtD;;AAEA,gBAAInF,MAAM,GAAGD,IAAb,EAAmB;AACf,kBAAI+I,IAAI,GAAG9I,MAAX;AACAA,cAAAA,MAAM,GAAGD,IAAT;AACAA,cAAAA,IAAI,GAAG+I,IAAP;AACH;;AAEDvM,YAAAA,cAAc,CAAC1F,IAAf,CAAoBjE,OAApB,CAA4B,UAACwG,KAAD,EAAQ4D,UAAR,EAAuB;AAC/C,kBAAI,OAAI,CAAC/B,SAAL,CAAe7B,KAAK,CAAC+H,CAArB,EAAwBnB,MAAxB,EAAgCD,IAAhC,CAAJ,EAA2C;AACvC,gBAAA,OAAI,CAAC3M,aAAL,CAAmBgS,cAAnB,CAAkC3B,kBAAlC,CAAqD3Q,IAArD,CAA0DkK,UAA1D;AACH;AACJ,aAJD;;AAMA,gBAAI,KAAK5J,aAAL,CAAmBgS,cAAnB,CAAkC3B,kBAAlC,CAAqD5P,MAArD,GAA8D,CAAlE,EAAqE;AACjE,mBAAKkV,2BAAL;AACH;AACJ;;;wDAE6B;AAC1B,gBAAI3D,cAAc,GAAG,KAAKhS,aAAL,CAAmBgS,cAAxC;AACA,gBAAIvS,MAAM,GAAGuS,cAAc,CAACrJ,YAAf,CAA4B,CAA5B,EAA+BrJ,UAA/B,CAA0C,KAAKU,aAAL,CAAmBiS,mBAA7D,CAAb;AACA,gBAAI5B,kBAAkB,GAAG2B,cAAc,CAAC3B,kBAAxC;AACA,gBAAIuF,UAAU,GAAGnW,MAAM,CAACgE,IAAP,CAAY4M,kBAAkB,CAAC,CAAD,CAA9B,CAAjB;AACA2B,YAAAA,cAAc,CAAC6D,kBAAf,GAAoC,KAAKxK,mBAAL,CAAyBuK,UAAU,CAACrR,IAAX,GAAkB,IAA3C,CAApC;AACA,gBAAIuR,QAAQ,GAAGrW,MAAM,CAACgE,IAAP,CAAY4M,kBAAkB,CAACA,kBAAkB,CAAC5P,MAAnB,GAA4B,CAA7B,CAA9B,CAAf;AACAuR,YAAAA,cAAc,CAAC+D,gBAAf,GAAkC,KAAK1K,mBAAL,CAAyByK,QAAQ,CAACvR,IAAT,GAAgB,IAAzC,CAAlC;AACH;;;mDAEwB;AAAA;;AACrB,iBAAKqL,kBAAL;AACA,iBAAK5M,4BAAL,CAAkCqM,WAAlC,GAAgD,KAAKhT,MAAL,CAAY8B,aAAZ,CAA0BH,KAA1E;AACA,iBAAKgF,4BAAL,CAAkCiL,SAAlC,GAA8C,KAAK5R,MAAL,CAAY8B,aAAZ,CAA0BH,KAAxE;;AAEA,gBAAI,KAAK8D,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,oBAAIW,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AAEAW,gBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzB,kBAAA,OAAI,CAACuN,4BAAL,CAAkCvN,KAAlC,EAAyC,CAACA,KAAK,CAACgN,oBAAP,CAAzC;AACH,iBAFD;AAGH,eAND;AAOH,aARD,MAQO;AACH,kBAAIrV,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;AAEA3L,cAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzB,gBAAA,OAAI,CAACuN,4BAAL,CAAkCvN,KAAlC,EAAyC2F,KAAK,CAACnK,IAAN,CAAWmK,KAAK,CAAC,OAAI,CAACpO,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA/B,CAAL,CAA4C4N,IAA5C,EAAX,CAAzC;AACH,eAFD;AAGH;AACJ;;;uDAE4B5F,K,EAAO4E,e,EAAiB;AAAA;;AACjD,gBAAI5E,KAAK,CAAC4H,kBAAN,IAA4B5H,KAAK,CAAC4H,kBAAN,CAAyB5P,MAAzB,GAAkC,CAAlE,EAAqE;AACjE4M,cAAAA,eAAe,CAAC7N,OAAhB,CAAwB,UAAC0H,WAAD,EAAiB;AACrC,oBAAIiC,cAAc,GAAGV,KAAK,CAACE,YAAN,CAAmB,CAAnB,EAAsBrJ,UAAtB,CAAiC4H,WAAjC,CAArB;AACA,oBAAIoC,cAAc,GAAG,OAAI,CAACtJ,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,CAArB;AACA,oBAAI0O,UAAJ,EAAgBE,QAAhB;AACA,oBAAIG,eAAe,GAAGxN,KAAK,CAAC4H,kBAAN,CAAyB,CAAzB,CAAtB;AACA,oBAAI6F,aAAa,GAAGzN,KAAK,CAAC4H,kBAAN,CAAyB5H,KAAK,CAAC4H,kBAAN,CAAyB5P,MAAzB,GAAkC,CAA3D,CAApB;;AAEA,oBAAI,OAAI,CAACyK,YAAL,IAAqBhE,WAAW,IAAIuB,KAAK,CAACgN,oBAA9C,EAAoE;AAChE,sBAAIH,kBAAkB,GAAG,CAAzB;;AACA,sBAAIlV,SAAS,GAAG,OAAI,CAAC2L,iCAAL,EAAhB;;AAEA,uBAAK,IAAI6I,mBAAmB,GAAG,CAA/B,EAAkCA,mBAAmB,GAAGtL,cAAc,CAACC,uBAAf,CAAuC9I,MAA/F,EAAuG,EAAEmU,mBAAzG,EAA8H;AAC1H,wBAAIW,iBAAiB,GAAGjM,cAAc,CAACC,uBAAf,CAAuCqL,mBAAvC,CAAxB;;AAEA,wBAAI,OAAI,CAAC/M,SAAL,CAAeoO,eAAf,EAAgCX,kBAAhC,EAAoDC,iBAApD,CAAJ,EAA4E;AACxEK,sBAAAA,UAAU,GAAG,OAAI,CAACO,wBAAL,CAA8Bb,kBAA9B,EAAkDlV,SAAlD,EAA6D8G,WAA7D,CAAb;AACH;;AAED,wBAAI,OAAI,CAACW,SAAL,CAAeqO,aAAf,EAA8BZ,kBAA9B,EAAkDC,iBAAlD,CAAJ,EAA0E;AACtEO,sBAAAA,QAAQ,GAAG,OAAI,CAACK,wBAAL,CAA8BZ,iBAA9B,EAAiDnV,SAAjD,EAA4D8G,WAA5D,CAAX;AACH;;AAEDoO,oBAAAA,kBAAkB,GAAGC,iBAArB;AACH;AAEJ,iBAlBD,MAkBO;AACHK,kBAAAA,UAAU,GAAGzM,cAAc,CAAC1F,IAAf,CAAoBwS,eAApB,CAAb;AACAH,kBAAAA,QAAQ,GAAG3M,cAAc,CAAC1F,IAAf,CAAoByS,aAApB,CAAX;AACH;;AAED,oBAAIN,UAAJ,EAAgB;AACZ,kBAAA,OAAI,CAACQ,0BAAL,CAAgC9M,cAAhC,EAAgDb,KAAhD,EAAuDmN,UAAvD,EAAmEE,QAAnE;AACH;AACJ,eAjCD;AAkCH;AACJ;;;mDAEwBlM,U,EAAYxJ,S,EAAW8G,W,EAAa;AACzD,iBAAK,IAAI4B,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAG1I,SAAS,CAACK,MAAhD,EAAwD,EAAEqI,UAA1D,EAAsE;AAClE,kBAAIlD,QAAQ,GAAGxF,SAAS,CAAC0I,UAAD,CAAT,CAAsBH,YAAtB,CAAmC,CAAnC,CAAf;AACA,kBAAI3C,KAAK,GAAGJ,QAAQ,CAACtG,UAAT,CAAoB4H,WAApB,EAAiCzD,IAAjC,CAAsCmG,UAAtC,CAAZ;;AAEA,kBAAI5D,KAAJ,EAAW;AACP,uBAAOA,KAAP;AACH;AACJ;AACJ;;;qDAE0BsD,c,EAAgBb,K,EAAOmN,U,EAAYE,Q,EAAU;AACpE,gBAAIhH,MAAM,GAAG,KAAKoG,sBAAL,CAA4B5L,cAA5B,EAA4Cb,KAA5C,CAAb;AACA,gBAAImE,MAAM,GAAGgJ,UAAU,CAAC7H,CAAxB;AACA,gBAAIpB,IAAI,GAAGmJ,QAAQ,CAAC/H,CAAT,GAAa,KAAK1R,MAAL,CAAYU,QAAZ,CAAqBK,UAA7C;AACA,gBAAI+M,KAAK,GAAGwC,IAAI,GAAGC,MAAnB;AACA,gBAAIxC,MAAM,GAAG3B,KAAK,CAAC8E,CAAN,GAAUuB,MAAvB;AACA,iBAAK9L,4BAAL,CAAkCkL,QAAlC,CAA2CtB,MAA3C,EAAmDkC,MAAnD,EAA2D3E,KAA3D,EAAkEC,MAAlE;AACH;;;4CAEiBoH,G,EAAK;AACnB,gBAAI,KAAKjG,SAAT,EAAoB;AAChB,kBAAI,KAAKvL,aAAL,CAAmBiU,aAAvB,EAAsC;AAClC,qBAAKoC,wBAAL,CAA8B,KAAKrW,aAAL,CAAmBiU,aAAnB,CAAiCxL,KAA/D;AACH,eAFD,MAEO;AACH,qBAAK6N,wCAAL;AACH;AACJ,aAND,MAMO,IAAI,CAAC,KAAKpL,YAAV,EAAwB;AAC3B,mBAAKqL,YAAL,CAAkB/E,GAAlB;AACH;AACJ;;;qEAE0C;AAAA;;AACvC,iBAAKvW,QAAL,CAAc,YAAM;AAChB,kBAAIub,qBAAqB,GAAG,KAA5B;;AAEA,kBAAI,OAAI,CAACvU,iBAAL,IAA0B,OAAI,CAACJ,QAAL,CAAcI,iBAAd,CAAgCC,KAA9D,EAAqE;AACjE,oBAAI,OAAI,CAAClC,aAAL,CAAmB4R,YAAvB,EAAqC;AACjC,kBAAA,OAAI,CAAC6E,uBAAL,CAA6B,OAAI,CAACzW,aAAL,CAAmB4R,YAAhD,EAA8D,IAA9D;;AACA4E,kBAAAA,qBAAqB,GAAG,IAAxB;AACH,iBAHD,MAGO;AACH,kBAAA,OAAI,CAACE,YAAL;AACH;AACJ,eAPD,MAOO,IAAI,OAAI,CAAC1W,aAAL,CAAmB6R,oBAAvB,EAA6C;AAChD,oBAAI8E,cAAc,GAAG,OAAI,CAAC3W,aAAL,CAAmB8R,oBAAnB,IAA2C,OAAI,CAAC9R,aAAL,CAAmB+R,oBAAnF;;AACA,gBAAA,OAAI,CAAC0E,uBAAL,CAA6B,OAAI,CAACzW,aAAL,CAAmBgS,cAAhD,EAAgE2E,cAAhE;;AACAH,gBAAAA,qBAAqB,GAAG,IAAxB;AACH;;AAED,cAAA,OAAI,CAAC/U,KAAL,CAAWmC,MAAX;;AAEA,kBAAI4S,qBAAJ,EAA2B;AACvB,gBAAA,OAAI,CAAC/F,yBAAL;;AACA,gBAAA,OAAI,CAACC,cAAL;AACH;;AAED,cAAA,OAAI,CAAC1Q,aAAL,CAAmB6R,oBAAnB,GAA0C,KAA1C;AACH,aAxBD;AAyBH;;;kDAEuBpJ,K,EAAOkO,c,EAAgB;AAC3C,gBAAI1F,UAAU,GAAGpW,CAAC,CAACwI,IAAF,CAAO,KAAKlD,UAAL,CAAgBC,SAAvB,EAAkC,UAACiH,MAAD,EAAY;AAC3D,qBAAOA,MAAM,CAAC6J,aAAP,IAAwBzI,KAA/B;AACH,aAFgB,CAAjB;;AAIA,gBAAIwI,UAAJ,EAAgB;AACZ,kBAAI0F,cAAJ,EAAoB;AAChBlO,gBAAAA,KAAK,CAAC2H,UAAN,GAAmB,KAAnB;;AAEAvV,gBAAAA,CAAC,CAAC+b,MAAF,CAAS,KAAKzW,UAAL,CAAgBC,SAAzB,EAAoC,UAACiH,MAAD,EAAY;AAC5C,yBAAOA,MAAM,CAAC6J,aAAP,IAAwBzI,KAA/B;AACH,iBAFD;AAGH;AACJ,aARD,MAQO;AACHA,cAAAA,KAAK,CAAC2H,UAAN,GAAmB,IAAnB;AACA,mBAAKY,eAAL,CAAqBvI,KAArB;AACH;;AAED,iBAAKoO,wBAAL;AACH;;;qDAE0B;AAAA;;AACvB,iBAAK9G,uBAAL,GAA+B,KAA/B;;AAEA,gBAAI,KAAKjO,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,mBAAK/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,oBAAIW,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AACA,gBAAA,OAAI,CAACqX,+BAAL,CAAqC1W,SAArC;AACH,eAHD;AAIH,aALD,MAKO;AACH,kBAAIA,SAAS,GAAG,KAAK2L,iCAAL,EAAhB;AACA,mBAAK+K,+BAAL,CAAqC1W,SAArC;AACH;AACJ;;;0DAE+BA,S,EAAW;AACvC,gBAAI2W,kBAAkB,GAAG,CAAzB;;AAEA,iBAAK,IAAIlX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,SAAS,CAACK,MAA9B,EAAsC,EAAEZ,CAAxC,EAA2C;AACvC,kBAAI4I,KAAK,GAAGrI,SAAS,CAACP,CAAD,CAArB;;AAEA,kBAAI4I,KAAK,CAAC2H,UAAV,EAAsB;AAClB,kBAAE2G,kBAAF;AACH;;AAED,kBAAIA,kBAAkB,IAAI,CAA1B,EAA6B;AACzB,qBAAKhH,uBAAL,GAA+B,IAA/B;AACA;AACH;AACJ;;AAAA;AACJ;;;2CAEgBoB,gB,EAAkB6F,S,EAAW;AAC1C,gBAAI1F,aAAa,GAAG,EAApB;AACAA,YAAAA,aAAa,CAAC1L,QAAd,GAAyBuL,gBAAgB,CAACvL,QAA1C;AACA0L,YAAAA,aAAa,CAACH,gBAAd,GAAiCA,gBAAjC;AACA,iBAAK8F,2BAAL,CAAiC3F,aAAjC,EAAgDH,gBAAhD,EAAkE6F,SAAlE;AACA,mBAAO1F,aAAP;AACH;;;sDAE2B;AAAA;;AACxB,iBAAKrW,QAAL,CAAc,YAAM;AAChB,cAAA,OAAI,CAAC8O,cAAL;;AACA,cAAA,OAAI,CAAC/J,aAAL,CAAmBE,eAAnB,GAAqC,EAArC;;AAEA,kBAAI,OAAI,CAAC4B,YAAL,IAAqB,OAAI,CAACD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,gBAAA,OAAI,CAAC/B,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9C,sBAAIW,SAAS,GAAG,OAAI,CAACyL,kCAAL,CAAwCpM,MAAxC,CAAhB;;AAEAW,kBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzB,oBAAA,OAAI,CAACyO,uBAAL,CAA6BzO,KAA7B,EAAoC,CAAChJ,MAAD,CAApC;AACH,mBAFD;AAGH,iBAND;AAOH,eARD,MAQO;AACH,oBAAIW,SAAS,GAAG,OAAI,CAAC2L,iCAAL,EAAhB;;AAEA3L,gBAAAA,SAAS,CAACZ,OAAV,CAAkB,UAACiJ,KAAD,EAAW;AACzB,kBAAA,OAAI,CAACyO,uBAAL,CAA6BzO,KAA7B,EAAoC,OAAI,CAACzI,aAAL,CAAmBV,UAAvD;AACH,iBAFD;AAGH;AACJ,aAnBD;AAoBH;;;kDAEuBmJ,K,EAAOnJ,U,EAAY;AAAA;;AACvC,gBAAImJ,KAAK,CAAC2H,UAAV,EAAsB;AAClB9Q,cAAAA,UAAU,CAACE,OAAX,CAAmB,UAACC,MAAD,EAAY;AAC3B,oBAAIgV,MAAM,GAAG,EAAb;AACAA,gBAAAA,MAAM,CAAChM,KAAP,GAAeA,KAAf;AACAgM,gBAAAA,MAAM,CAAC7H,MAAP,GAAgBnN,MAAM,CAACmN,MAAP,GAAgB,OAAI,CAACvQ,MAAL,CAAYU,QAAZ,CAAqBc,2BAArC,GAAmE4K,KAAK,CAACG,OAAzF;AACA6L,gBAAAA,MAAM,CAAC9H,IAAP,GAAc8H,MAAM,CAAC7H,MAAP,GAAgB,OAAI,CAACvQ,MAAL,CAAYU,QAAZ,CAAqBO,kBAAnD;AACAmX,gBAAAA,MAAM,CAAC3F,MAAP,GAAgBrG,KAAK,CAAC8E,CAAtB;AACAkH,gBAAAA,MAAM,CAAC9G,IAAP,GAAc8G,MAAM,CAAC3F,MAAP,GAAgB,OAAI,CAACzS,MAAL,CAAYU,QAAZ,CAAqBO,kBAAnD;AACA,gBAAA,OAAI,CAACsF,gBAAL,CAAsBqL,SAAtB,GAAkCxF,KAAK,CAACzK,KAAxC;;AACA,gBAAA,OAAI,CAAC4E,gBAAL,CAAsBsL,QAAtB,CAA+BuG,MAAM,CAAC7H,MAAtC,EAA8C6H,MAAM,CAAC3F,MAArD,EAA6D,OAAI,CAACzS,MAAL,CAAYU,QAAZ,CAAqBO,kBAAlF,EAAsG,OAAI,CAACjB,MAAL,CAAYU,QAAZ,CAAqBO,kBAA3H;;AACA,gBAAA,OAAI,CAAC0C,aAAL,CAAmBE,eAAnB,CAAmCR,IAAnC,CAAwC+U,MAAxC;AACH,eAVD;AAWH;AACJ;;;mDAEwBhM,K,EAAO;AAC5B,gBAAI,KAAK0O,sBAAL,IAA+B1O,KAAnC,EAA0C;AACtC,mBAAKiO,YAAL;AACA,mBAAKS,sBAAL,GAA8B1O,KAA9B;AACA,mBAAK2O,6BAAL;AACH;AACJ;;;yCAEc;AACX,iBAAKC,0BAAL;AACA,iBAAKC,uBAAL;AACH;;;uDAE4B;AACzB,gBAAI,KAAKC,6BAAT,EAAwC;AACpC,mBAAKrc,SAAL,CAAesc,MAAf,CAAsB,KAAKD,6BAA3B;;AAEA,kBAAI,KAAKE,yBAAT,EAAoC;AAChC,qBAAKA,yBAAL,CAA+BC,eAA/B,GAAiD,CAAjD;;AAEA,oBAAI,KAAKvX,UAAL,CAAgBwX,6BAApB,EAAmD;AAC/C,uBAAKxX,UAAL,CAAgBwX,6BAAhB,CAA8CnY,OAA9C,CAAsD,UAAC0R,aAAD,EAAmB;AACrEA,oBAAAA,aAAa,CAACtI,OAAd,GAAwB,CAAxB;AACH,mBAFD;AAGH;;AAED,qBAAK6H,yBAAL;AACH;;AAED,mBAAKgH,yBAAL,GAAiC,IAAjC;AACH;AACJ;;;oDAEyB;AACtB,gBAAI,KAAKG,0BAAT,EAAqC;AACjC,mBAAK1c,SAAL,CAAesc,MAAf,CAAsB,KAAKI,0BAA3B;;AAEA,kBAAI,KAAKT,sBAAT,EAAiC;AAC7B,qBAAKA,sBAAL,CAA4BU,YAA5B,GAA2C,CAA3C;AACA,qBAAKV,sBAAL,GAA8B,IAA9B;AACA,qBAAKW,qBAAL;AACH;AACJ;AACJ;;;0DAE+B;AAAA;;AAC5B,iBAAKC,0BAAL,GAAkC,KAAlC;AACA,iBAAKZ,sBAAL,CAA4BU,YAA5B,GAA2C,CAA3C;AAEA,iBAAKD,0BAAL,GAAkC,KAAK1c,SAAL,CAAe,YAAM;AACnD,kBAAI,OAAI,CAAC6c,0BAAT,EAAqC;AACjC,gBAAA,OAAI,CAACC,mCAAL;AACH,eAFD,MAEO;AACH,gBAAA,OAAI,CAACC,kCAAL;AACH;;AAED,cAAA,OAAI,CAACH,qBAAL;AACH,aARiC,EAQ/B,KAAKzb,MAAL,CAAYS,aARmB,CAAlC;AASH;;;gEAEqC;AAClC,gBAAI,KAAKqa,sBAAL,CAA4BU,YAA5B,IAA4C,CAAhD,EAAmD;AAC/C,mBAAKE,0BAAL,GAAkC,KAAlC;AACA,gBAAE,KAAKZ,sBAAL,CAA4BU,YAA9B;AACH,aAHD,MAGO;AACH,gBAAE,KAAKV,sBAAL,CAA4BU,YAA9B;AACH;AACJ;;;+DAEoC;AACjC,gBAAI,KAAKV,sBAAL,CAA4BU,YAA5B,IAA4C/W,IAAI,CAACC,KAAL,CAAW,KAAK1E,MAAL,CAAYmC,UAAZ,CAAuB0Z,oBAAvB,GAA8C,CAAzD,CAAhD,EAA6G;AACzG,mBAAKH,0BAAL,GAAkC,IAAlC;AACA,gBAAE,KAAKZ,sBAAL,CAA4BU,YAA9B;AACH,aAHD,MAGO;AACH,gBAAE,KAAKV,sBAAL,CAA4BU,YAA9B;AACH;AACJ;;;uCAEYrG,G,EAAK;AACd,iBAAKnP,8BAAL;;AAEA,gBAAI,KAAKkR,gBAAT,EAA2B;AACvB,mBAAKC,SAAL,CAAehC,GAAf;AACH;;AAED,iBAAK+B,gBAAL,GAAwB,CAAC,KAAKA,gBAA9B;AACH;;;oCAES/B,G,EAAK;AACX,iBAAK2G,aAAL;;AAEA,iBAAK,IAAItY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAIJ,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8BO,CAA9B,CAAb;;AAEA,kBAAIJ,MAAJ,EAAY;AACR;AACA,oBAAI,KAAKuU,oBAAL,CAA0BvU,MAA1B,CAAJ,EAAuC;AACnC,uBAAKiR,cAAL;AACA;AACH;AACJ;AACJ;AACJ;;;0CAEe;AAAA;;AACZ,gBAAI,KAAK1Q,aAAL,CAAmBoT,aAAvB,EAAsC;AAClC,mBAAKrJ,cAAL;AACA,kBAAIqO,IAAI,GAAG,KAAKC,gBAAL,EAAX;AACA,kBAAIC,WAAW,GAAGxX,IAAI,CAACG,GAAL,CAAS,KAAKjB,aAAL,CAAmB4K,cAA5B,EAA4C,KAAK5K,aAAL,CAAmBoT,aAAnB,CAAiC7F,CAAjC,GAAqC6K,IAAI,GAAG,CAAxF,CAAlB;AACA,mBAAKjY,UAAL,CAAgBoY,WAAhB,GAA8BzX,IAAI,CAACE,GAAL,CAASsX,WAAT,EAAsB,KAAKtY,aAAL,CAAmBoM,YAAnB,GAAkCgM,IAAxD,CAA9B;AACA,kBAAIA,IAAI,GAAG,KAAKC,gBAAL,EAAX;AACA,kBAAIG,MAAM,GAAG,KAAKC,kBAAL,EAAb;;AAEA,kBAAID,MAAM,IAAI,CAAd,EAAiB;AACb,qBAAK5V,gBAAL,CAAsByM,WAAtB,GAAoC,KAAKhT,MAAL,CAAY0B,SAAZ,CAAsBC,KAA1D;AAEA,qBAAKgC,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAAY;AAC9CA,kBAAAA,MAAM,CAACiZ,WAAP,GAAqBjZ,MAAM,CAACmN,MAAP,GAAgB4L,MAArC;;AACA,kBAAA,OAAI,CAAC5V,gBAAL,CAAsB+V,UAAtB,CAAiClZ,MAAM,CAACiZ,WAAxC,EAAqD,OAAI,CAACvY,UAAL,CAAgBoY,WAArE,EAAkFH,IAAlF,EAAwFA,IAAxF;AACH,iBAHD;AAIH;AACJ;AACJ;;;6CAEkB;AACf,mBAAOtX,IAAI,CAACE,GAAL,CAAS,KAAK3E,MAAL,CAAY0B,SAAZ,CAAsBE,aAAtB,GAAsC,CAA/C,EAAkD,KAAK+B,aAAL,CAAmBoM,YAAnB,GAAkC,KAAKpM,aAAL,CAAmB4K,cAAvG,CAAP;AACH;;;+CAEoB;AACjB,iBAAK,IAAI/K,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAIJ,MAAM,GAAG,KAAKO,aAAL,CAAmBV,UAAnB,CAA8BO,CAA9B,CAAb;;AAEA,kBAAIJ,MAAJ,EAAY;AACR,oBAAI,KAAKuU,oBAAL,CAA0BvU,MAA1B,CAAJ,EAAuC;AACnC,uBAAKO,aAAL,CAAmB+R,oBAAnB,GAA0C,KAAK/R,aAAL,CAAmBoT,aAAnB,CAAiCrF,CAAjC,GAAqCtO,MAAM,CAACmN,MAAtF;AACA,uBAAKzM,UAAL,CAAgByY,iBAAhB,GAAoC/Y,CAApC;AAEA,yBAAOiB,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAASxB,MAAM,CAACmN,MAAhB,EACZ,KAAK5M,aAAL,CAAmBoT,aAAnB,CAAiCrF,CAAjC,GAAqC,KAAK1R,MAAL,CAAY0B,SAAZ,CAAsBE,aAD/C,CAAT,EAEHwB,MAAM,CAACkN,IAAP,GAAc,KAAK0L,gBAAL,EAFX,IAEsC5Y,MAAM,CAACmN,MAFpD;AAGH;AACJ;AACJ;AACJ;;;2CAEgB;AAAA;;AACb,gBAAI,CAAC,KAAKrB,SAAV,EAAqB;AACjB,mBAAKsN,wBAAL;AACH;;AAED,gBAAK,KAAKtN,SAAL,IAAkB,KAAKpL,UAAL,CAAgBC,SAAhB,CAA0BK,MAA1B,GAAmC,CAAtD,IACC,CAAC,KAAK8K,SAAN,IAAmB,KAAKpL,UAAL,CAAgBsD,IAAhB,CAAqBhD,MAArB,GAA8B,CADtD,EAC0D;AACtD,mBAAKqP,SAAL,GAAiB,IAAjB;AAEA,mBAAK7U,QAAL,CAAc,YAAM;AAChB,gBAAA,OAAI,CAACiI,gBAAL,GAAwB,OAAI,CAAClD,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,OAAI,CAACpE,MAAL,CAAYmC,UAAZ,CAAuBK,eAA9D,GACpB,CAAC,OAAI,CAACmB,aAAL,CAAmBV,UAAnB,CAA8BmB,MAA9B,GAAuC,CAAxC,IAA6C,OAAI,CAACpE,MAAL,CAAYmC,UAAZ,CAAuBM,oBADxE;AAEA,gBAAA,OAAI,CAACmE,eAAL,GAAuB,CAAC,OAAI,CAAC9C,UAAL,CAAgBkR,gBAAhB,CAAiC5Q,MAAjC,GAA0C,CAA3C,IAAgD,OAAI,CAACqY,uBAAL,EAAvE;;AACA,gBAAA,OAAI,CAACrX,KAAL,CAAWmC,MAAX;;AAEA,oBAAImV,aAAa,GAAG,OAAI,CAACvW,cAAL,CAAoB,eAApB,CAApB;;AAEA,oBAAIuW,aAAJ,EAAmB;AACf,kBAAA,OAAI,CAAC5Y,UAAL,CAAgB6Y,cAAhB,GAAiCD,aAAa,CAACE,YAA/C;;AACA,kBAAA,OAAI,CAACC,qBAAL;;AACA,kBAAA,OAAI,CAACC,0BAAL;;AACA,kBAAA,OAAI,CAACC,kBAAL;;AACA,kBAAA,OAAI,CAACC,mBAAL;AACH;AACJ,eAfD;AAgBH,aApBD,MAoBO;AACH,mBAAKvJ,SAAL,GAAiB,KAAjB;AACH;AACJ;;;oDAEyB;AACtB,mBAAO,KAAKvE,SAAL,GAAiB,KAAKlP,MAAL,CAAYmC,UAAZ,CAAuBG,iBAAxC,GAA4D,KAAKtC,MAAL,CAAYmC,UAAZ,CAAuBI,mBAA1F;AACH;;;qDAE0B;AAAA;;AACvB,gBAAI,CAAC,KAAKuB,UAAL,CAAgBsD,IAArB,EAA2B;AACvB,mBAAKtD,UAAL,CAAgBsD,IAAhB,GAAuB,EAAvB;AACH;;AAED,iBAAKtD,UAAL,CAAgBsD,IAAhB,CAAqBhD,MAArB,GAA8B,CAA9B;AAEA,iBAAKT,aAAL,CAAmByD,IAAnB,CAAwBjE,OAAxB,CAAgC,UAAC2R,gBAAD,EAAsB;AAClD,kBAAI,OAAI,CAACmI,oBAAL,CAA0BnI,gBAA1B,CAAJ,EAAiD;AAC7C,gBAAA,OAAI,CAAChR,UAAL,CAAgBkR,gBAAhB,GAAmC,OAAI,CAACkI,yBAAL,CAA+BpI,gBAA/B,CAAnC;;AACA,oBAAIG,aAAa,GAAG,OAAI,CAACC,gBAAL,CAAsBJ,gBAAtB,EAAwC,OAAI,CAAChR,UAAL,CAAgBkR,gBAAxD,CAApB;;AACA,gBAAA,OAAI,CAAClR,UAAL,CAAgBsD,IAAhB,CAAqB/D,IAArB,CAA0B4R,aAA1B;AACH;AACJ,aAND;AAOH;;;+CAEoB1L,Q,EAAU;AAC3B,mBAAOA,QAAQ,CAAC2H,CAAT,IAAc,KAAKpN,UAAL,CAAgBoY,WAAhB,GAA8B,KAAKF,gBAAL,EAA5C,IACHzS,QAAQ,CAAC2H,CAAT,GAAa,KAAKvN,aAAL,CAAmB+M,sBAAhC,IAA0D,KAAK5M,UAAL,CAAgBoY,WAD9E;AAEH;;;oDAEyBpH,gB,EAAkB;AAAA;;AACxC,gBAAIqI,OAAO,GAAG,EAAd;;AAEA,iBAAK,IAAI3Z,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsR,gBAAgB,CAAC7R,UAAjB,CAA4BmB,MAAhD,EAAwD,EAAEZ,CAA1D,EAA6D;AACzD,kBAAIJ,MAAM,GAAG0R,gBAAgB,CAAC7R,UAAjB,CAA4BO,CAA5B,CAAb;;AAEA,kBAAIJ,MAAM,CAACgE,IAAP,CAAYhD,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,oBAAI6I,cAAc,GAAG,KAAKtJ,aAAL,CAAmBV,UAAnB,CAA8BO,CAA9B,CAArB;AAEAJ,gBAAAA,MAAM,CAACgE,IAAP,CAAYjE,OAAZ,CAAoB,UAACwG,KAAD,EAAQ7E,KAAR,EAAkB;AAClC,sBAAI,OAAI,CAAC0G,SAAL,CAAe7B,KAAK,CAAC+H,CAArB,EAAwBzE,cAAc,CAACoP,WAAvC,EAAoDpP,cAAc,CAACoP,WAAf,GAA6B,OAAI,CAACL,gBAAL,EAAjF,CAAJ,EAA+G;AAC3GmB,oBAAAA,OAAO,CAAC9Z,IAAR,CAAayB,KAAb;AACH;AACJ,iBAJD;AAMA;AACH;AACJ;;AAED,mBAAOqY,OAAP;AACH;;;sDAE2BlI,a,EAAeH,gB,EAAkB6F,S,EAAW;AACpE1F,YAAAA,aAAa,CAAChS,UAAd,GAA2B,EAA3B;AACA,iBAAKma,eAAL,CAAqBnI,aAArB,EAAoCH,gBAApC,EAAsD6F,SAAtD;AACA,iBAAK0C,wBAAL,CAA8BpI,aAA9B;AACH;;;0CAEeA,a,EAAeH,gB,EAAkB6F,S,EAAW;AACxD,iBAAKhX,aAAL,CAAmBV,UAAnB,CAA8BE,OAA9B,CAAsC,UAACC,MAAD,EAASyH,WAAT,EAAyB;AAC3D,kBAAIyS,WAAW,GAAG,EAAlB;AACAA,cAAAA,WAAW,CAAClW,IAAZ,GAAmB,EAAnB;AACAkW,cAAAA,WAAW,CAACC,SAAZ,GAAwB,EAAxB;AAEA5C,cAAAA,SAAS,CAACxX,OAAV,CAAkB,UAAC2B,KAAD,EAAW;AACzB,oBAAI6E,KAAK,GAAGmL,gBAAgB,CAAC7R,UAAjB,CAA4B4H,WAA5B,EAAyCzD,IAAzC,CAA8CtC,KAA9C,CAAZ;;AAEA,oBAAI6E,KAAJ,EAAW;AACP2T,kBAAAA,WAAW,CAAClW,IAAZ,CAAiB/D,IAAjB,CAAsBsG,KAAtB;AACH;AACJ,eAND;AAQAsL,cAAAA,aAAa,CAAChS,UAAd,CAAyBI,IAAzB,CAA8Bia,WAA9B;AACH,aAdD;AAeH;;;mDAEwB/T,Q,EAAU;AAAA;;AAC/BA,YAAAA,QAAQ,CAACtG,UAAT,CAAoBE,OAApB,CAA4B,UAACC,MAAD,EAASyH,WAAT,EAAyB;AACjD,cAAA,OAAI,CAAC7H,KAAL,CAAWC,UAAX,CAAsB4H,WAAtB,EAAmCvH,SAAnC,CAA6CH,OAA7C,CAAqD,YAAM;AACvD,oBAAIqa,KAAK,GAAG,EAAZ;AACAA,gBAAAA,KAAK,CAACC,SAAN,GAAkB,EAAlB;AACAra,gBAAAA,MAAM,CAACma,SAAP,CAAiBla,IAAjB,CAAsBma,KAAtB;AACH,eAJD;;AAMApa,cAAAA,MAAM,CAACgE,IAAP,CAAYjE,OAAZ,CAAoB,UAACwG,KAAD,EAAW;AAC3B,oBAAIF,KAAK,GAAGE,KAAK,CAACF,KAAlB;AAEArG,gBAAAA,MAAM,CAACma,SAAP,CAAiBpa,OAAjB,CAAyB,UAACqa,KAAD,EAAW;AAChCA,kBAAAA,KAAK,CAACC,SAAN,CAAgBpa,IAAhB,CAAqBoG,KAAK,GAAG,CAAR,GAAYA,KAAZ,GAAoB,CAAzC;AACAA,kBAAAA,KAAK,IAAI,OAAI,CAAC9F,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,EAA2Cd,UAApD;AACH,iBAHD;AAIH,eAPD;AAQH,aAfD;AAgBH;;;kDAEuB;AACpB,iBAAK,IAAIoH,aAAa,GAAG,CAAzB,EAA4BA,aAAa,GAAG,KAAKxN,aAAL,CAAmByD,IAAnB,CAAwBhD,MAApE,EAA4E,EAAE+M,aAA9E,EAA6F;AACzF,kBAAI5H,QAAQ,GAAG,KAAK5F,aAAL,CAAmByD,IAAnB,CAAwB+J,aAAxB,CAAf;AACA,kBAAI9G,GAAG,GAAG,KAAV;;AAEA,mBAAK,IAAIQ,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGtB,QAAQ,CAACtG,UAAT,CAAoBmB,MAA5D,EAAoE,EAAEyG,WAAtE,EAAmF;AAC/E,oBAAIzH,MAAM,GAAGmG,QAAQ,CAACtG,UAAT,CAAoB4H,WAApB,CAAb;AACA,oBAAI6S,SAAS,GAAG,KAAK5Z,UAAL,CAAgBkR,gBAAhB,CAAiC,CAAjC,CAAhB;AACA,oBAAI2I,OAAO,GAAG,KAAK7Z,UAAL,CAAgBkR,gBAAhB,CAAiC,KAAKlR,UAAL,CAAgBkR,gBAAhB,CAAiC5Q,MAAjC,GAA0C,CAA3E,CAAd;;AAEA,oBAAIhB,MAAM,CAACgE,IAAP,CAAYsW,SAAZ,KAA0Bta,MAAM,CAACgE,IAAP,CAAYuW,OAAZ,CAA9B,EAAoD;AAChD,uBAAKC,eAAL,GAAuB,KAAK5O,mBAAL,CAAyB5L,MAAM,CAACgE,IAAP,CAAYsW,SAAZ,EAAuBxV,IAAvB,GAA8B,IAAvD,CAAvB;AACA,uBAAK2V,aAAL,GAAqB,KAAK7O,mBAAL,CAAyB5L,MAAM,CAACgE,IAAP,CAAYuW,OAAZ,EAAqBzV,IAArB,GAA4B,IAArD,CAArB;AACAmC,kBAAAA,GAAG,GAAG,IAAN;AACA;AACH;AACJ;;AAED,kBAAIA,GAAJ,EAAS;AACL;AACH;AACJ;AACJ;;;uDAE4B;AACzB,iBAAKxJ,YAAL,GAAoB,KAAKb,MAAL,CAAYU,QAAZ,CAAqBG,YAAzC;AACA,iBAAK6N,0BAAL;AACA,gBAAIoP,YAAY,GAAG,KAAK3X,cAAL,CAAoB,YAApB,EAAkC4X,UAArD;AACA,gBAAIC,aAAa,GAAG,KAAK5X,eAAL,CAAqBkI,WAArB,CAAiC,KAAKsP,eAAtC,EAAuD9P,KAA3E;AACA,iBAAKmQ,kBAAL,GAA0BH,YAAY,GAAIE,aAAa,GAAG,CAA1D;AACA,iBAAKE,gBAAL,GAAwB,KAAKtX,eAAL,GAAuBoX,aAA/C;AACH;;;+CAEoB;AAAA;;AACjB,gBAAI,KAAK9O,SAAT,EAAoB;AAChB,mBAAKtQ,QAAL,CAAc,YAAM;AAChB,oBAAI,OAAI,CAAC6G,YAAL,IAAqB,OAAI,CAACD,QAAL,CAAcC,YAAd,CAA2BC,MAApD,EAA4D;AACxD,kBAAA,OAAI,CAACyY,qBAAL,GAA6B,CAAC,OAAI,CAACne,MAAL,CAAYmC,UAAZ,CAAuBic,UAAvB,GAAoC,OAAI,CAACpe,MAAL,CAAYmC,UAAZ,CAAuB0Z,oBAA5D,IACzB,OAAI,CAAClY,aAAL,CAAmBV,UAAnB,CAA8BmB,MADlC;AAEH,iBAHD,MAGO;AACH,kBAAA,OAAI,CAAC+Z,qBAAL,GAA6B,OAAI,CAACne,MAAL,CAAYmC,UAAZ,CAAuBic,UAAvB,GAAoC,OAAI,CAACpe,MAAL,CAAYmC,UAAZ,CAAuB0Z,oBAAxF;AACH;;AAED,gBAAA,OAAI,CAACwC,sBAAL,GAA8B,OAAI,CAACre,MAAL,CAAYmC,UAAZ,CAAuBic,UAArD;;AACA,gBAAA,OAAI,CAAChZ,KAAL,CAAWmC,MAAX;;AACA,gBAAA,OAAI,CAACkU,qBAAL;;AACA,gBAAA,OAAI,CAAC6C,qBAAL;AACH,eAZD;AAaH,aAdD,MAcO;AACH,mBAAKC,uBAAL;AACH;AACJ;;;kDAEuB;AAAA;;AACpB,iBAAKza,UAAL,CAAgBC,SAAhB,CAA0BZ,OAA1B,CAAkC,UAACiJ,KAAD,EAAQK,UAAR,EAAuB;AACrDL,cAAAA,KAAK,CAACE,YAAN,CAAmBnJ,OAAnB,CAA2B,UAACoG,QAAD,EAAW4H,aAAX,EAA6B;AACpD,oBAAIA,aAAa,IAAI,CAAjB,IAAsB/E,KAAK,CAACoS,WAAhC,EAA6C;AACzC,kBAAA,OAAI,CAACC,sBAAL,CAA4BrS,KAA5B,EAAmCK,UAAnC,EAA+ClD,QAA/C,EAAyD4H,aAAzD;AACH;AACJ,eAJD;AAKH,aAND;AAOH;;;iDAEsB/E,K,EAAOK,U,EAAYlD,Q,EAAU4H,a,EAAe;AAAA;;AAC/D,gBAAIlK,MAAM,GAAG,KAAKd,cAAL,CAAoB,4BAA4BsG,UAA5B,GAAyC,GAAzC,GAA+C0E,aAAnE,CAAb;AACA,gBAAIuN,OAAO,GAAG,KAAKrY,gBAAL,CAAsBY,MAAtB,CAAd;AACAyX,YAAAA,OAAO,CAAC7Q,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB5G,MAAM,CAAC6G,KAA/B,EAAsC7G,MAAM,CAAC8G,MAA7C;;AAEA,gBAAI,KAAKtI,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BC,MAAhD,IAA0D0G,KAAK,CAACoS,WAApE,EAAiF;AAC7EjV,cAAAA,QAAQ,CAACoV,mBAAT,GAA+B,EAA/B;AAEApV,cAAAA,QAAQ,CAACuL,gBAAT,CAA0B/Q,SAA1B,CAAoCZ,OAApC,CAA4C,UAACyb,aAAD,EAAgBC,kBAAhB,EAAuC;AAC/E,oBAAID,aAAa,CAAC7K,UAAlB,EAA8B;AAC1BxK,kBAAAA,QAAQ,CAACoV,mBAAT,CAA6Btb,IAA7B,CAAkCub,aAAlC;AACA,sBAAIlN,CAAC,GAAG,CAAC,OAAI,CAAC1R,MAAL,CAAYmC,UAAZ,CAAuBic,UAAvB,GAAoC,OAAI,CAACpe,MAAL,CAAYmC,UAAZ,CAAuB0Z,oBAA5D,IAAoFgD,kBAA5F;;AACA,kBAAA,OAAI,CAACC,6BAAL,CAAmCJ,OAAnC,EAA4CE,aAA5C,EAA2DlN,CAA3D;AACH;AACJ,eAND;AAOH,aAVD,MAUO;AACH,mBAAKoN,6BAAL,CAAmCJ,OAAnC,EAA4CtS,KAAK,CAACyI,aAAlD,EAAiE,CAAjE;AACH;AACJ;;;wDAE6B6J,O,EAAStS,K,EAAOsF,C,EAAG;AAC7C,gBAAItF,KAAK,IAAI,KAAK0O,sBAAlB,EAA0C;AACtCpJ,cAAAA,CAAC,IAAI,KAAKoJ,sBAAL,CAA4BU,YAAjC;AACH;;AAEDkD,YAAAA,OAAO,CAAC9M,SAAR,GAAoBxF,KAAK,CAACzK,KAA1B;AACA+c,YAAAA,OAAO,CAAC7M,QAAR,CAAiBH,CAAjB,EAAoB,CAApB,EAAuB,KAAK1R,MAAL,CAAYmC,UAAZ,CAAuBic,UAA9C,EAA0D,KAAKpe,MAAL,CAAYmC,UAAZ,CAAuBic,UAAjF;AACH;;;kDAEuB;AAAA;;AACpB,iBAAKta,UAAL,CAAgBC,SAAhB,CAA0BZ,OAA1B,CAAkC,UAACiJ,KAAD,EAAQK,UAAR,EAAuB;AACrDL,cAAAA,KAAK,CAACE,YAAN,CAAmBnJ,OAAnB,CAA2B,UAACoG,QAAD,EAAW4H,aAAX,EAA6B;AACpD,oBAAIA,aAAa,IAAI,CAAjB,IAAsB/E,KAAK,CAACoS,WAAhC,EAA6C;AACzC,kBAAA,OAAI,CAACO,4BAAL,CAAkC3S,KAAlC,EAAyCK,UAAzC,EAAqDlD,QAArD,EAA+D4H,aAA/D;AACH;AACJ,eAJD;AAKH,aAND;AAOH;;;uDAE4B/E,K,EAAOK,U,EAAYlD,Q,EAAU4H,a,EAAe;AACrE;AACA,gBAAI6N,eAAe,GAAG,KAAKlQ,kBAAL,EAAtB;AACA,gBAAI7H,MAAM,GAAG,KAAKgY,qBAAL,CAA2BxS,UAA3B,EAAuC0E,aAAvC,CAAb;AACA,iBAAK+N,6BAAL,CAAmCjY,MAAnC,EAA2CsC,QAA3C,EAAqDwI,KAAK,CAACnK,IAAN,CAAWmK,KAAK,CAACiN,eAAD,CAAL,CAAuBhN,IAAvB,EAAX,CAArD,EAAgG,KAAKyK,uBAAL,EAAhG,EAJqE,CAMrE;;AACA,gBAAIrQ,KAAK,CAACyI,aAAN,CAAoBb,kBAAxB,EAA4C;AACxC,kBAAI/M,MAAM,GAAG,KAAKd,cAAL,CAAoB,0CAA0CsG,UAA1C,GAAuD,GAAvD,GAA6D0E,aAAjF,CAAb;AACA,kBAAIpQ,UAAU,GAAG0D,IAAI,CAACyO,KAAL,CAAW,KAAKtM,eAAL,GAAuBwF,KAAK,CAACyI,aAAN,CAAoBb,kBAApB,CAAuC5P,MAAzE,CAAjB;AACA,mBAAK8a,6BAAL,CAAmCjY,MAAnC,EAA2CsC,QAA3C,EAAqD6C,KAAK,CAACyI,aAAN,CAAoBb,kBAAzE,EAA6FjT,UAA7F;AACH;AACJ;;;gDAEqB0L,U,EAAY0E,a,EAAe;AAC7C,mBAAO,KAAKhL,cAAL,CAAoB,sBAAsBsG,UAAtB,GAAmC,GAAnC,GAAyC0E,aAA7D,CAAP;AACH;;;wDAE6BlK,M,EAAQsC,Q,EAAU4V,c,EAAgBpe,U,EAAY;AACxE,gBAAI2d,OAAO,GAAG,KAAKrY,gBAAL,CAAsBY,MAAtB,CAAd;AACAyX,YAAAA,OAAO,CAAC7Q,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB5G,MAAM,CAAC6G,KAA/B,EAAsC7G,MAAM,CAAC8G,MAA7C;AACA,iBAAKqR,sBAAL,CAA4B7V,QAA5B,EAAsCmV,OAAtC,EAA+CS,cAA/C,EAA+Dpe,UAA/D;AACH;;;iDAEsBwI,Q,EAAUmV,O,EAASS,c,EAAgBpe,U,EAAY;AAAA;;AAClEwI,YAAAA,QAAQ,CAACtG,UAAT,CAAoBE,OAApB,CAA4B,UAACC,MAAD,EAASyH,WAAT,EAAyB;AACjDzH,cAAAA,MAAM,CAACma,SAAP,CAAiBpa,OAAjB,CAAyB,UAACqa,KAAD,EAAQ6B,UAAR,EAAuB;AAC5C;AACA,oBAAInO,CAAC,GAAG,CAAC,OAAI,CAAClR,MAAL,CAAYmC,UAAZ,CAAuBK,eAAvB,GAAyC,OAAI,CAACxC,MAAL,CAAYmC,UAAZ,CAAuBM,oBAAjE,IAAyFoI,WAAzF,GACJ,OAAI,CAAC7K,MAAL,CAAYmC,UAAZ,CAAuBK,eAD3B;AAEAkc,gBAAAA,OAAO,CAAChM,SAAR;AACAgM,gBAAAA,OAAO,CAAC/L,MAAR,CAAe,CAAf,EAAkBzB,CAAlB;AACA,oBAAIQ,CAAC,GAAG,CAAR;AACA,oBAAI4N,SAAS,GAAG,CAAhB;AACA,oBAAIC,aAAa,GAAG,CAApB;AAEAJ,gBAAAA,cAAc,CAAChc,OAAf,CAAuB,UAACqc,UAAD,EAAaC,aAAb,EAA+B;AAClD,sBAAIhW,KAAK,GAAG+T,KAAK,CAACC,SAAN,CAAgB+B,UAAhB,CAAZ;;AAEA,sBAAI/V,KAAK,IAAIiW,SAAb,EAAwB;AACpBhO,oBAAAA,CAAC,GAAG3Q,UAAU,GAAG0e,aAAjB;;AACA,oBAAA,OAAI,CAACE,uBAAL,CAA6BjB,OAA7B,EAAsCjV,KAAtC,EAA6C6V,SAA7C,EAAwDC,aAAxD,EAAuEF,UAAvE,EAAmF3N,CAAnF,EAAsFR,CAAtF,EACI,OAAI,CAACvN,aAAL,CAAmBV,UAAnB,CAA8B4H,WAA9B,EAA2Cd,UAD/C;;AAEAuV,oBAAAA,SAAS,GAAG5N,CAAZ;AACA6N,oBAAAA,aAAa,GAAG9V,KAAhB;AACH;AACJ,iBAVD;AAYAiV,gBAAAA,OAAO,CAAC9L,MAAR,CAAelB,CAAf,EAAkBR,CAAlB;AACAwN,gBAAAA,OAAO,CAAC9L,MAAR,CAAe,OAAI,CAAC9O,UAAL,CAAgB8b,WAA/B,EAA4C1O,CAA5C;AACAwN,gBAAAA,OAAO,CAAC7L,SAAR;AACA6L,gBAAAA,OAAO,CAAC9M,SAAR,GAAoB,OAAI,CAAC5O,KAAL,CAAWC,UAAX,CAAsB4H,WAAtB,EAAmCvH,SAAnC,CAA6C+b,UAA7C,CAApB;AACAX,gBAAAA,OAAO,CAAC5L,IAAR;AACH,eA3BD;AA4BH,aA7BD;AA8BH;;;oDAEyB;AAAA;;AACtB,iBAAKhP,UAAL,CAAgBsD,IAAhB,CAAqBjE,OAArB,CAA6B,UAACoG,QAAD,EAAW4H,aAAX,EAA6B;AACtD,kBAAIlK,MAAM,GAAG,OAAI,CAAC4Y,uBAAL,CAA6B1O,aAA7B,CAAb;;AACA,kBAAIuN,OAAO,GAAG,OAAI,CAACrY,gBAAL,CAAsBY,MAAtB,CAAd;;AACAyX,cAAAA,OAAO,CAAC7Q,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB5G,MAAM,CAAC6G,KAA/B,EAAsC7G,MAAM,CAAC8G,MAA7C;;AACA,cAAA,OAAI,CAACqR,sBAAL,CAA4B7V,QAA5B,EAAsCmV,OAAtC,EAA+C3M,KAAK,CAACnK,IAAN,CAAWmK,KAAK,CAAC,OAAI,CAACjD,kBAAL,EAAD,CAAL,CAAiCkD,IAAjC,EAAX,CAA/C,EAAoG,OAAI,CAAChS,MAAL,CAAYmC,UAAZ,CAAuBI,mBAA3H;AACH,aALD;AAMH;;;kDAEuB4O,a,EAAe;AACnC,mBAAO,KAAKhL,cAAL,CAAoB,sBAAsBgL,aAA1C,CAAP;AACH;;;kDAEuBuN,O,EAASjV,K,EAAO6V,S,EAAWC,a,EAAeF,U,EAAY3N,C,EAAGR,C,EAAGnH,U,EAAY;AAC5F,gBAAIN,KAAK,IAAI,CAAb,EAAgB;AACZ;AACAiV,cAAAA,OAAO,CAAC9L,MAAR,CAAe0M,SAAf,EAA0BpO,CAA1B;AACH,aAHD,MAGO;AACH;AACA,kBAAImO,UAAU,GAAG,CAAb,IAAkBE,aAAa,IAAI,CAAvC,EAA0C;AACtCb,gBAAAA,OAAO,CAAC9L,MAAR,CAAelB,CAAf,EAAkBR,CAAlB;AACH;;AAED,kBAAIzH,KAAK,IAAIM,UAAb,EAAyB;AACrB2U,gBAAAA,OAAO,CAAC9L,MAAR,CAAelB,CAAf,EAAkBR,CAAC,GAAG,KAAKlR,MAAL,CAAYmC,UAAZ,CAAuBK,eAA7C;AACH,eAFD,MAEO;AACHkc,gBAAAA,OAAO,CAAC9L,MAAR,CAAelB,CAAf,EAAkBR,CAAC,GAAGzH,KAAK,GAAG,KAAKzJ,MAAL,CAAYmC,UAAZ,CAAuBK,eAA/B,GAAiDuH,UAAvE;AACH;AACJ;AACJ;;;gDAEqB;AAClB,gBAAI,KAAKmF,SAAT,EAAoB;AAChB,kBAAI,KAAKvL,aAAL,CAAmB4R,YAAnB,IAAmC,KAAK5R,aAAL,CAAmB4R,YAAnB,CAAgCxB,UAAvE,EAAmF;AAC/E,oBAAI+L,QAAQ,GAAG,CAAf;AAEA,qBAAKhc,UAAL,CAAgBC,SAAhB,CAA0BZ,OAA1B,CAAkC,UAACiJ,KAAD,EAAW;AACzC,sBAAIA,KAAK,CAACoS,WAAV,EAAuB;AACnBsB,oBAAAA,QAAQ,IAAI1T,KAAK,CAACE,YAAN,CAAmBlI,MAA/B;AACH,mBAFD,MAEO;AACH,sBAAE0b,QAAF;AACH;AACJ,iBAND;AAQA,qBAAKhZ,mBAAL,CAAyBiZ,SAAzB,GAAqC,KAAKjc,UAAL,CAAgB6Y,cAAhB,GAAiCmD,QAAtE;AACH;AACJ,aAdD,MAcO;AACH,mBAAKE,gBAAL;AACH;AACJ;;;6CAEkB;AACf,gBAAIzW,QAAQ,GAAG,KAAK0W,kBAAL,EAAf;;AAEA,gBAAI1W,QAAJ,EAAc;AACV,mBAAK,IAAI/F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKM,UAAL,CAAgBsD,IAAhB,CAAqBhD,MAAzC,EAAiD,EAAEZ,CAAnD,EAAsD;AAClD,oBAAI0c,kBAAkB,GAAG,KAAKpc,UAAL,CAAgBsD,IAAhB,CAAqB5D,CAArB,CAAzB;;AAEA,oBAAI+F,QAAQ,CAACA,QAAT,IAAqB2W,kBAAkB,CAAC3W,QAA5C,EAAsD;AAClD2W,kBAAAA,kBAAkB,CAACnM,UAAnB,GAAgC,IAAhC;AACA,uBAAKjN,mBAAL,CAAyBiZ,SAAzB,GAAqC,KAAKjc,UAAL,CAAgB6Y,cAAhB,GAAiCnZ,CAAtE;AACH,iBAHD,MAGO;AACH0c,kBAAAA,kBAAkB,CAACnM,UAAnB,GAAgC,KAAhC;AACH;AACJ;AACJ;AACJ;;;+CAEoB;AACjB,iBAAK,IAAIvQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmByD,IAAnB,CAAwBhD,MAA5C,EAAoD,EAAEZ,CAAtD,EAAyD;AACrD,kBAAI+F,QAAQ,GAAG,KAAK5F,aAAL,CAAmByD,IAAnB,CAAwB5D,CAAxB,CAAf;;AAEA,kBAAI,KAAKgI,SAAL,CAAe,KAAK7H,aAAL,CAAmBoT,aAAnB,CAAiC7F,CAAhD,EAAmD3H,QAAQ,CAAC2H,CAAT,GAAa,KAAKlR,MAAL,CAAYU,QAAZ,CAAqBM,oBAArF,EAA2GuI,QAAQ,CAAC2H,CAApH,CAAJ,EAA4H;AACxH,uBAAO3H,QAAP;AACH;AACJ;AACJ;;;gDAEqB6C,K,EAAO7C,Q,EAAU;AACnC,gBAAI,KAAK9D,YAAL,IAAqB,KAAKD,QAAL,CAAcC,YAAd,CAA2BE,QAAhD,IAA4D,CAACyG,KAAK,CAACoS,WAAvE,EAAoF;AAChF,mBAAK1a,UAAL,CAAgBwX,6BAAhB,GAAgD,CAAClP,KAAK,CAACyI,aAAP,CAAhD;AACA,mBAAKsL,2BAAL,CAAiC/T,KAAjC;AACH,aAHD,MAGO;AACH,mBAAKtI,UAAL,CAAgBwX,6BAAhB,GAAgD/R,QAAQ,CAACoV,mBAAzD;AACA,mBAAKwB,2BAAL,CAAiC/T,KAAjC;AACH;AACJ;;;sDAE2BA,K,EAAO;AAC/B,gBAAI,KAAKgP,yBAAL,IAAkChP,KAAtC,EAA6C;AACzC,mBAAKiO,YAAL;AACA,mBAAKe,yBAAL,GAAiChP,KAAjC;AACA,mBAAKgU,gCAAL;AACH;AACJ;;;6DAEkC;AAAA;;AAC/B,iBAAKC,6BAAL,GAAqC,KAArC;AACA,iBAAKjF,yBAAL,CAA+BC,eAA/B,GAAiD,CAAjD;AAEA,iBAAKH,6BAAL,GAAqC,KAAKrc,SAAL,CAAe,YAAM;AACtD,kBAAI,OAAI,CAACwhB,6BAAT,EAAwC;AACpC,gBAAA,OAAI,CAACC,sCAAL;AACH,eAFD,MAEO;AACH,gBAAA,OAAI,CAACC,qCAAL;AACH;;AAED,kBAAI,OAAI,CAACzc,UAAL,CAAgBwX,6BAApB,EAAmD;AAC/C,gBAAA,OAAI,CAACxX,UAAL,CAAgBwX,6BAAhB,CAA8CnY,OAA9C,CAAsD,UAAC0R,aAAD,EAAmB;AACrEA,kBAAAA,aAAa,CAACtI,OAAd,GAAwB,OAAI,CAAC6O,yBAAL,CAA+BC,eAAvD;AACH,iBAFD;AAGH;;AAED,cAAA,OAAI,CAACjH,yBAAL;AACH,aAdoC,EAclC,KAAKpU,MAAL,CAAYS,aAdsB,CAArC;AAeH;;;mEAEwC;AACrC,gBAAI,KAAK2a,yBAAL,CAA+BC,eAA/B,IAAkD,CAAtD,EAAyD;AACrD,mBAAKgF,6BAAL,GAAqC,KAArC;AACA,gBAAE,KAAKjF,yBAAL,CAA+BC,eAAjC;AACH,aAHD,MAGO;AACH,gBAAE,KAAKD,yBAAL,CAA+BC,eAAjC;AACH;AACJ;;;kEAEuC;AACpC,gBAAI,KAAKD,yBAAL,CAA+BC,eAA/B,IAAkD5W,IAAI,CAACC,KAAL,CAAW,KAAK1E,MAAL,CAAYU,QAAZ,CAAqBc,2BAArB,GAAmD,CAA9D,CAAtD,EAAwH;AACpH,mBAAK6e,6BAAL,GAAqC,IAArC;AACA,gBAAE,KAAKjF,yBAAL,CAA+BC,eAAjC;AACH,aAHD,MAGO;AACH,gBAAE,KAAKD,yBAAL,CAA+BC,eAAjC;AACH;AACJ;;;oCAESjP,K,EAAOoU,K,EAAO;AAAA;;AACpBA,YAAAA,KAAK,CAACC,cAAN;AAEA,iBAAK7hB,QAAL,CAAc,YAAM;AAChBwN,cAAAA,KAAK,CAACoS,WAAN,GAAoB,CAACpS,KAAK,CAACoS,WAA3B;;AACA,cAAA,OAAI,CAACpZ,KAAL,CAAWmC,MAAX;;AACA,cAAA,OAAI,CAACwV,kBAAL;AACH,aAJD;AAKH;;;sCAEWxT,Q,EAAU4L,G,EAAK1I,U,EAAY0E,a,EAAe;AAClD,gBAAI,KAAKjC,SAAT,EAAoB;AAChB,mBAAKpL,UAAL,CAAgBC,SAAhB,CAA0BZ,OAA1B,CAAkC,UAACiJ,KAAD,EAAW;AACzCA,gBAAAA,KAAK,CAACE,YAAN,CAAmBnJ,OAAnB,CAA2B,UAACoG,QAAD,EAAc;AACrCA,kBAAAA,QAAQ,CAACwK,UAAT,GAAsB,KAAtB;AACH,iBAFD;AAGH,eAJD;AAKH,aAND,MAMO;AACH,mBAAKjQ,UAAL,CAAgBsD,IAAhB,CAAqBjE,OAArB,CAA6B,UAAC8R,aAAD,EAAmB;AAC5CA,gBAAAA,aAAa,CAAClB,UAAd,GAA2B,KAA3B;AACH,eAFD;AAGH;;AAEDxK,YAAAA,QAAQ,CAACwK,UAAT,GAAsB,IAAtB;AACA,gBAAI9M,MAAM,GAAG,KAAKgY,qBAAL,CAA2BxS,UAA3B,EAAuC0E,aAAvC,CAAb;AACA,iBAAKuP,SAAL,CAAenX,QAAf,EAAyB4L,GAAzB,EAA8B1I,UAA9B,EAA0C0E,aAA1C,EAAyDlK,MAAzD;AACH;;;oCAESsC,Q,EAAU4L,G,EAAKlO,M,EAAQ;AAC7B,gBAAI0Z,QAAQ,GAAG,KAAKvJ,WAAL,CAAiBjC,GAAjB,EAAsBlO,MAAtB,CAAf;AACA,gBAAI2Z,YAAY,GAAG,KAAK5gB,MAAL,CAAYmC,UAAZ,CAAuBK,eAAvB,GAAyC,KAAKxC,MAAL,CAAYmC,UAAZ,CAAuBM,oBAAnF;;AAEA,iBAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKG,aAAL,CAAmBV,UAAnB,CAA8BmB,MAAlD,EAA0D,EAAEZ,CAA5D,EAA+D;AAC3D,kBAAI,KAAKgI,SAAL,CAAemV,QAAQ,CAACzP,CAAxB,EAA2B1N,CAAC,GAAGod,YAA/B,EAA6C,CAACpd,CAAC,GAAG,CAAL,IAAUod,YAAvD,CAAJ,EAA0E;AACtE,oBAAIxd,MAAM,GAAG,KAAKJ,KAAL,CAAWC,UAAX,CAAsBO,CAAtB,CAAb;;AAEA,oBAAIJ,MAAM,CAACyd,QAAP,IAAmBzd,MAAM,CAACyd,QAAP,IAAmB,EAA1C,EAA8C;AAC1CC,kBAAAA,MAAM,CAACjY,IAAP,CAAYzF,MAAM,CAACyd,QAAP,GAAkB,oBAAlB,GAAyCtX,QAAQ,CAACA,QAA9D,EACIA,QAAQ,CAACA,QADb,EACuB,0CADvB;AAEH;;AAED;AACH;AACJ;AACJ;;;qCAEUzE,K,EAAOqQ,G,EAAK;AACnB,gBAAI5L,QAAQ,GAAG,KAAKzF,UAAL,CAAgBsD,IAAhB,CAAqBtC,KAArB,CAAf;AACAyE,YAAAA,QAAQ,CAACwK,UAAT,GAAsB,IAAtB;AACA,gBAAI9M,MAAM,GAAG,KAAK4Y,uBAAL,CAA6B/a,KAA7B,CAAb;AACA,iBAAK4b,SAAL,CAAenX,QAAf,EAAyB4L,GAAzB,EAA8BlO,MAA9B;AACH;;;uCAEY7D,M,EAAQ;AACjB5E,YAAAA,CAAC,CAAC+b,MAAF,CAAS,KAAKvX,KAAL,CAAWC,UAApB,EAAgC,UAAC+H,MAAD,EAAY;AACxC,qBAAOA,MAAM,IAAI5H,MAAjB;AACH,aAFD;AAGH;;;sCAEW;AACR,gBAAIA,MAAM,GAAG,EAAb;AACAA,YAAAA,MAAM,CAACzB,KAAP,GAAe,SAAf;AACA,iBAAKqB,KAAL,CAAWC,UAAX,CAAsBI,IAAtB,CAA2BD,MAA3B;AACH;;;;QAnlF4B9E,gB;;AAslFjCG,MAAAA,WAAW,CAACsiB,WAAZ,GAA0B,aAA1B","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, $interval, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.$interval = $interval;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n\n        this.initialiseConfig();\n        this.initialisePanelDefaults();\n        this.initialisePredefinedMetricOptionList();\n        this.initialiseMetricsColorList();\n        this.initialiseStartingVariables();\n\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n    }\n\n    initialiseConfig() {\n        this.initialiseGeneralConfig();\n        this.initialiseOverviewConfig();\n        this.initialiseFocusAreaConfig();\n        this.initialiseHistogramConfig();\n        this.initialiseTimeIndicatorConfig()\n        this.initialiseHistogramConfig();\n        this.initialiseFocusGraphConfig();\n    }\n\n    initialiseGeneralConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            dateFormat: \"DD/MM/YY HH:mm:ss\",\n            colorCount: 4,\n            maxLuminanceChange: 0.8,\n            marginBetweenOverviewAndFocus: 20,\n            groupingThresholdCount: 50,\n            startingGreyColor: 240,\n            endingGrayColor: 80,\n            intervalTimer: 70\n        }\n    }\n\n    initialiseOverviewConfig() {\n        this.config.overview = {\n            topAndBottomPadding: 20,\n            metricFontSize: 12,\n            timeFontSize: 10,\n            marginBetweenLabelsAndOverview: 10,\n            pointWidth: 1,\n            ungroupedPointHeight: 1,\n            groupedPointHeight: 5,\n            compressedMarginBetweenMetrics: 100,\n            decompressedMarginBetweenMetrics: 25,\n            marginBetweenGroups: 10,\n            groupBarWidth: 9,\n            singleAttributeGroupSizeWidth: 1,\n            multipleAttributeGroupSizeWidth: 2,\n            marginBetweenMarkerAndGroup: 15,\n            marginBetweenMetricAndGroupSize: 30\n        }\n    }\n\n    initialiseFocusAreaConfig() {\n        this.config.focusArea = {\n            color: \"Aqua\",\n            focusAreaSize: 20,\n            xCrossSize: 15\n        }\n    }\n\n    initialiseTimeIndicatorConfig() {\n        this.config.timeIndicator = {\n            color: \"DarkGray\"\n        }\n    }\n\n    initialiseHistogramConfig() {\n        this.config.histogram = {\n            marginBetweenAxesAndNumbers: 10,\n            verticalAxisLenghth: 500,\n            barWidth: 5\n        }\n    }\n\n    initialiseFocusGraphConfig() {\n        this.config.focusGraph = {\n            maxWidth: 10000,\n            maxHeight: 10000,\n            groupedPointWidth: 8,\n            ungroupedPointWidth: 35,\n            metricMaxHeight: 30,\n            marginBetweenMetrics: 10,\n            maxHeight: 10000,\n            markerSize: 20,\n            marginBetweenMarkers: 20\n        }\n    }\n\n    initialisePanelDefaults() {\n        this.panelDefaults = {\n            predefinedMetricList: [\n                {\n                    name: \"CPU\",\n                    unit: \"%\",\n                    query: \"avg by (instance) (node_load1{job='node'}) * 100 / count by (instance) (count by (instance, cpu) (node_cpu_seconds_total{job='node'}))\"\n                },\n\n                {\n                    name: \"Memory\",\n                    unit: \"%\",\n                    query: \"100 - (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'} - node_memory_MemFree_bytes{job='node'} - node_memory_Cached_bytes{job='node'}) * 100 / (node_memory_MemTotal_bytes{job='node'} + node_memory_Buffers_bytes{job='node'})\",\n                },\n\n                {\n                    name: \"Disk\",\n                    unit: \"%\",\n                    query: \"100 - (sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)', mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})) * 100 / (sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'}))\",\n                },\n\n                {\n                    name: \"Network\",\n                    unit: \"MiB\",\n                    query: \"sum by (instance) (rate(node_network_receive_bytes_total{job='node',device!~'^(?: docker | vboxnet | veth | lo).*'}[5m])) / 1048576\",\n                },\n\n                {\n                    name: \"Disk Temperature\",\n                    unit: \"°C\",\n                    query: \"avg by (instance) (smartmon_temperature_celsius_raw_value{job='node',smart_id='194'})\",\n                }\n            ]\n        };\n\n        //   this.panel.predefinedMetricList = this.panelDefaults.predefinedMetricList;\n        //   this.panel.metricList = this.panel.predefinedMetricList;\n        _.defaults(this.panel, this.panelDefaults);\n\n        if (!this.panel.metricList) {\n            this.panel.metricList = this.panel.predefinedMetricList;\n        }\n    }\n\n    initialisePredefinedMetricOptionList() {\n        this.predefinedMetricOptionList = [];\n\n        this.panelDefaults.predefinedMetricList.forEach((metric) => {\n            this.predefinedMetricOptionList.push(metric.name);\n        });\n    }\n\n    initialiseMetricsColorList() {\n        if (this.panel.metricList) {\n            this.panel.metricList.forEach((metric) => {\n                metric.colorList = [];\n                metric.colorList.push(metric.color);\n                var luminanceChange = -this.config.maxLuminanceChange / this.config.colorCount;\n\n                for (var i = 0; i < this.config.colorCount - 1; ++i) {\n                    var color = this.changeColorLuminance(metric.color, i * luminanceChange);\n                    metric.colorList.push(color);\n                }\n            });\n        }\n    }\n\n    initialiseStartingVariables() {\n        this.firstLoad = true;\n        this.overviewModel = {};\n        this.histogramModel = {};\n        this.overviewModel.groupMarkerList = [];\n        this.focusModel = {};\n        this.focusModel.groupList = [];\n    }\n\n    changeColorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n\n        lum = lum || 0;\n        var rgb = \"#\", c, i;\n\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    }\n\n    selectPredefinedMetric(index) {\n        var metric = this.panel.metricList[index];\n\n        if (!metric.isCustom) {\n            for (var i = 0; i < this.panel.predefinedMetricList.length; ++i) {\n                var predefinedMetric = this.panel.predefinedMetricList[i];\n\n                if (metric.name == predefinedMetric.name) {\n                    this.panel.metricList[index] = JSON.parse(JSON.stringify(predefinedMetric));\n                    break;\n                }\n            }\n        }\n    }\n\n    link(scope, elem) {\n        this.scope = scope;\n        this.elem = elem;\n\n        this.initialiseControl();\n        this.initialiseUIElements();\n    }\n\n    initialiseControl() {\n        this.enumList = {\n            groupingMode: {\n                SINGLE: \"1\",\n                MULTIPLE: \"2\",\n            },\n\n            timeHighlightMode: {\n                POINT: \"1\",\n                RANGE: \"2\"\n            }\n        };\n\n        this.groupingMode = this.enumList.groupingMode.SINGLE;\n        this.groupingThreshold = 0;\n        this.timeHighlightMode = this.enumList.timeHighlightMode.POINT;\n        this.initialiseOverviewCanvasCursor();\n    }\n\n    initialiseOverviewCanvasCursor() {\n        this.overviewCursor = \"crosshair\";\n    }\n\n    initialiseUIElements() {\n        // overview\n        this.overviewCanvas = this.getElementByID(\"overviewCanvas\");\n        this.overviewContext = this.getCanvasContext(this.overviewCanvas);\n\n        // focus area + overview group markers\n        this.focusAreaCanvas = this.getElementByID(\"focusAreaCanvas\");\n        this.focusAreaContext = this.getCanvasContext(this.focusAreaCanvas);\n\n        // histogram\n        this.histogramCanvas = this.getElementByID(\"histogramCanvas\");\n        this.histogramCanvasContext = this.getCanvasContext(this.histogramCanvas);\n\n        // overview time indicator\n        this.overviewTimeIndicatorCanvas = this.getElementByID(\"overviewTimeIndicatorCanvas\");\n        this.overviewTimeIndicatorContext = this.getCanvasContext(this.overviewTimeIndicatorCanvas);\n\n        // focus graph\n        this.focusGraphWidth = this.config.focusGraph.maxWidth;\n        this.focusGraphHeight = this.config.focusGraph.maxHeight;\n        this.focusGraphContainer = this.getElementByID(\"focusGraphContainer\");\n    }\n\n    getElementByID(id) {\n        var find = this.elem.find(\"#\" + id);\n        return find[0];\n    }\n\n    getCanvasContext(canvas) {\n        return canvas.getContext(\"2d\");\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/buw-heatmap-panel/editor.html', 2);\n    }\n\n    onDataReceived(data) {\n        this.load();\n    }\n\n    load() {\n        this.$timeout(() => {\n            this.isLoading = true;\n\n            this.scope.$apply();\n\n            this.overviewModel.metricList = [];\n\n            this.panel.metricList.forEach(() => {\n                this.overviewModel.metricList.push(null);\n            });\n\n            this.loadCount = 0;\n            this.fromDate = this.getDateInSeconds(this.timeSrv.timeRange().from._d);\n            this.toDate = this.getDateInSeconds(this.timeSrv.timeRange().to._d);\n\n            this.panel.metricList.forEach((metric, index) => {\n                this.getDataFromAPI(metric.query, index);\n            });\n\n            this.processRawData();\n        });\n    }\n\n    getDateInSeconds(date) {\n        return Math.round(date.getTime() / 1000);\n    }\n\n    getDataFromAPI(query, index) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            // received response\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    var metric = {}\n                    metric.data = JSON.parse(xmlHttp.responseText).data.result;\n                    this.overviewModel.metricList[index] = metric;\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(query) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=60\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.overviewModel.metricList.length) {\n                this.processRawData.bind(this)();\n            } else {\n                this.isLoading = false;\n\n                if (!this.overviewModel.metricList.includes(null)) {\n                    this.convertDataToFloat();\n                    this.initialiseMetricMinMaxTotal();\n                    this.initialiseColorMap();\n                    this.initialiseOverviewData();\n                    this.initialiseOverviewGroups();\n                    this.initialiseCompressedTimeIndexes();\n                    this.renderOverview();\n                }\n            }\n        }, 100);\n    }\n\n    convertDataToFloat() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.data.forEach((instance) => {\n                instance.values.forEach((value) => {\n                    value[0] = parseFloat(value[0]);\n                    value[1] = Math.round(parseFloat(value[1]));\n                });\n            });\n        });\n    }\n\n    initialiseMetricMinMaxTotal() {\n        this.overviewModel.metricList.forEach((metric) => {\n            metric.min = -1;\n            metric.max = -1;\n\n            metric.data.forEach((instance) => {\n                instance.values.forEach((point) => {\n                    this.checkAndSetOverviewMinMax(metric, point);\n                });\n\n                if (metric.max > 100) {\n                    console.log(instance.metric.instance);\n                }\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseColorMap() {\n        this.overviewModel.metricList.forEach((metric, index) => {\n            var colorList = this.panel.metricList[index].colorList;\n            metric.layerRange = metric.max / colorList.length;\n\n            // map a range of values to a color\n            metric.colorMap = this.getColorMap(metric, colorList);\n        });\n    }\n\n    getColorMap(metric, colorList) {\n        var colorMap = new Map();\n\n        for (var i = 0; i < colorList.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            threshold.average = (threshold.max + threshold.min) / 2;\n            colorMap.set(threshold, colorList[i]);\n        }\n\n        return colorMap;\n    }\n\n    initialiseOverviewData() {\n        this.overviewModel.data = [];\n        this.sortOverviewData();\n        this.populateOverviewDataAndInitialiseHistogramData();\n        this.calculateInstanceMetricTotalMinMax();\n    }\n\n    sortOverviewData() {\n        this.overviewModel.data.sort((first, second) => {\n            for (var i = 0; i < first.metricList.length; ++i) {\n                if (first.metricList[i].total != second.metricList[i].total) {\n                    return first.metricList[i].total - second.metricList[i].total;\n                }\n            }\n\n            return 0;\n        });\n    }\n\n    populateOverviewDataAndInitialiseHistogramData() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            metric.histogram = {};\n            metric.histogram.data = new Map();\n\n            metric.data.forEach((metricInstance) => {\n                var newInstance = _.find(this.overviewModel.data, (search) => {\n                    return metricInstance.metric.instance == search.instance;\n                });\n\n                if (!newInstance) {\n                    newInstance = this.initaliseNewInstance(metricInstance);\n                }\n\n                metricInstance.values.forEach((value) => {\n                    var point = {};\n                    point.date = value[0];\n                    point.value = value[1];\n                    newInstance.metricList[metricIndex].data.push(point);\n\n                    if (metric.histogram.data.has(point.value)) {\n                        var occurences = metric.histogram.data.get(point.value);\n                        metric.histogram.data.set(point.value, occurences + 1);\n                    } else {\n                        metric.histogram.data.set(point.value, 1);\n                    }\n                });\n            });\n\n            metric.histogram.data = new Map([...metric.histogram.data].sort((first, second) => {\n                return first[1] - second[2];\n            }));\n\n            this.setHistogramMinMax(metric.histogram);\n        });\n    }\n\n    setHistogramMinMax(histogram) {\n        histogram.min = -1;\n        histogram.max = -1;\n\n        histogram.data.forEach((occurences, value) => {\n            if (histogram.min == -1) {\n                histogram.min = occurences;\n                histogram.max = occurences;\n            } else {\n                if (histogram.min > occurences) {\n                    histogram.min = occurences;\n                }\n\n                if (histogram.max < occurences) {\n                    histogram.max = occurences;\n                }\n            }\n        });\n    }\n\n    initaliseNewInstance(metricInstance) {\n        var newInstance = {};\n        newInstance.instance = metricInstance.metric.instance;\n\n        newInstance.metricList = [];\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = {};\n            metric.data = [];\n            newInstance.metricList.push(metric);\n        }\n\n        this.overviewModel.data.push(newInstance);\n        return newInstance;\n    }\n\n    calculateInstanceMetricTotalMinMax() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.metricList.forEach((metric, metricIndex) => {\n                metric.total = 0;\n                metric.min = -1;\n                metric.max = -1;\n\n                metric.data.forEach((point) => {\n                    // sum the \"threshold\" average of each data point instead of the actual value of the data point \n                    metric.total += this.getThresholdAverage(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n\n                    if (metric.min == -1 || point.value < metric.min) {\n                        metric.min = point.value;\n                    }\n\n                    if (metric.max == -1 || point.value > metric.max) {\n                        metric.max = point.value;\n                    }\n                })\n            });\n        });\n    }\n\n    getThresholdAverage(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = threshold.average;\n            }\n        });\n\n        return result;\n    }\n\n    isBetween(target, start, end) {\n        return start <= target && target <= end;\n    }\n\n    initialiseOverviewGroups() {\n        this.initialiseSingleAttributeGroups();\n        this.initialiseMultiAttributeGroups();\n    }\n\n    initialiseSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.initialiseMetricSingleAttributeGroups(metric, metricIndex);\n            this.initialiseSingleAttributeGroupsColor(metric, metricIndex);\n        });\n\n        this.initialiseSingleAttributeInstanceGroupList();\n    }\n\n    initialiseMetricSingleAttributeGroups(metric, metricIndex) {\n        metric.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold);\n\n            groupList.sort((first, second) => {\n                return first.total - second.total;\n            });\n\n            metric.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n    }\n\n    populateSingleAttributeGroupList(groupList, metricIndex, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = _.find(groupList, (search) => {\n                var min = search.total * (1 - thresholdValue);\n                var max = search.total * (1 + thresholdValue);\n                return this.isBetween(instance.metricList[metricIndex].total, min, max);\n            });\n\n            if (!group) {\n                group = this.initialiseNewSingleAttributeGroups(instance, metricIndex);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n        });\n    }\n\n    initialiseNewSingleAttributeGroups(instance, metricIndex) {\n        var group = {};\n        group.instanceList = [];\n        group.markerX = 0;\n        group.total = instance.metricList[metricIndex].total;\n        return group;\n    }\n\n    initialiseSingleAttributeGroupsColor(metric, metricIndex) {\n        var originalColor = this.panel.metricList[metricIndex].colorList[0];\n\n        metric.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = -this.config.maxLuminanceChange / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                group.color = this.changeColorLuminance(originalColor, groupIndex * luminanceChange);\n            });\n        });\n    }\n\n    initialiseSingleAttributeInstanceGroupList() {\n        this.overviewModel.data.forEach((instance) => {\n            instance.groupList = [];\n\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                for (var i = 0; i < metric.thresholdGroupListMap.length; ++i) {\n                    var group = metric.thresholdGroupListMap[i];\n\n                    if (instance.metricList[metricIndex].total == group.total) {\n                        instance.groupList.push(group);\n                        break;\n                    }\n                }\n            });\n        });\n    }\n\n    initialiseMultiAttributeGroups() {\n        this.overviewModel.thresholdGroupListMap = new Map();\n\n        for (var groupingThreshold = 0; groupingThreshold <= this.config.groupingThresholdCount; ++groupingThreshold) {\n            var groupList = [];\n            this.populateMultiAttributeGroupList(groupList, groupingThreshold);\n            this.overviewModel.thresholdGroupListMap.set(groupingThreshold, groupList);\n        }\n\n        this.initialiseMultiAttributeGroupsColor();\n    }\n\n    populateMultiAttributeGroupList(groupList, groupingThreshold) {\n        var thresholdValue = groupingThreshold * 0.01;\n\n        this.overviewModel.data.forEach((instance) => {\n            var group = this.findExistingMultiAttributeGroup(groupList, thresholdValue, instance);\n\n            if (!group) {\n                group = this.initialiseNewMultiAttributeGroup(instance);\n                groupList.push(group);\n            }\n\n            group.instanceList.push(instance);\n\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = group.metricList[i];\n                metric.total = (metric.total * (group.instanceList.length - 1) + instance.metricList[i].total) / group.instanceList.length;\n            }\n        });\n    }\n\n    findExistingMultiAttributeGroup(groupList, thresholdValue, instance) {\n        var group = _.find(groupList, (search) => {\n            for (var i = 0; i < instance.metricList.length; ++i) {\n                var metric = search.metricList[i];\n                var min = metric.total * (1 - thresholdValue);\n                var max = metric.total * (1 + thresholdValue);\n\n                if (!this.isBetween(instance.metricList[i].total, min, max)) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        return group;\n    }\n\n    initialiseNewMultiAttributeGroup(instance) {\n        var group = {};\n        group.metricList = [];\n        group.instanceList = [];\n        group.markerX = 0;\n\n        instance.metricList.forEach((instanceMetric) => {\n            var groupMetric = {};\n            groupMetric.total = instanceMetric.total;\n            group.metricList.push(groupMetric);\n        });\n\n        return group;\n    }\n\n    initialiseMultiAttributeGroupsColor() {\n        this.overviewModel.thresholdGroupListMap.forEach((groupList) => {\n            var luminanceChange = (this.config.startingGreyColor - this.config.endingGrayColor) / groupList.length;\n\n            groupList.forEach((group, groupIndex) => {\n                var greyValue = Math.round(this.config.startingGreyColor - luminanceChange * groupIndex);\n                group.color = \"rgba(\" + greyValue + \", \" + greyValue + \", \" + greyValue + \", 1)\";\n            });\n        })\n    }\n\n    initialiseCompressedTimeIndexes() {\n        this.overviewModel.metricList.forEach((overviewMetric, metricIndex) => {\n            overviewMetric.compressedTimeIndexList = [0];\n\n            this.overviewModel.data.forEach((instance) => {\n                this.initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex);\n            });\n\n            this.overviewModel.data.forEach((instance) => {\n                var instanceMetric = instance.metricList[metricIndex];\n\n                instanceMetric.compressedIndexRangeList.forEach((range) => {\n                    if (!overviewMetric.compressedTimeIndexList.includes(range.end)) {\n                        overviewMetric.compressedTimeIndexList.push(range.end);\n                    }\n                });\n            });\n\n            overviewMetric.compressedTimeIndexList.sort((first, second) => {\n                return first - second;\n            });\n        });\n    }\n\n    initialiseInstanceCompressedTimeRangeList(instance, overviewMetric, metricIndex) {\n        var instanceMetric = instance.metricList[metricIndex];\n        instanceMetric.compressedIndexRangeList = [];\n        var presviousRange;\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            var thresholdAverage = this.getThresholdAverage(point.value, overviewMetric.colorMap);\n\n            if (pointIndex == 0) {\n                presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n            } else {\n                if (thresholdAverage != presviousRange.value || pointIndex == instanceMetric.data.length - 1) {\n                    presviousRange.end = pointIndex;\n\n                    if (thresholdAverage != presviousRange.value) {\n                        presviousRange = this.initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage);\n                    }\n                }\n            }\n        });\n    }\n\n    initialiseNewCompressedTimeRange(instanceMetric, thresholdAverage) {\n        var range = {};\n        instanceMetric.compressedIndexRangeList.push(range);\n        range.value = thresholdAverage;\n        range.end = 0;\n        return range;\n    }\n\n    renderOverview() {\n        if (this.overviewModel.data.length > 0) {\n            this.clearFocusArea();\n            this.drawOverview();\n        }\n    }\n\n    clearFocusArea() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n    }\n\n    drawOverview() {\n        this.$timeout(() => {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.setOverviewCanvasSize();\n            this.focusGraphMarginTop = this.overviewCanvasHeight + this.config.marginBetweenOverviewAndFocus;\n            this.scope.$apply();\n            this.drawOverviewData();\n        });\n    }\n\n    setOverviewCanvasSize() {\n        this.setOverviewContextLabelFont();\n        this.overviewModel.labelTextHeight = this.overviewContext.measureText(\"M\").width;\n        this.overviewModel.overviewStartY = this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        this.setOverviewWidth();\n        this.setOverviewHeight();\n    }\n\n    setOverviewWidth() {\n        this.setOverviewContextTimeFont();\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.overviewWidth = this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length +\n            marginBetweenMetrics * (this.overviewModel.metricList.length - 1);\n\n        // total width of overiew graph\n        if (this.isCompressed) {\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewModel.overviewWidth += metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            });\n        } else {\n            this.overviewModel.overviewWidth += this.getMaxMetricLength() * this.overviewModel.metricList.length * this.config.overview.pointWidth;\n        }\n\n        this.overviewCanvasWidth = this.overviewModel.overviewWidth;\n        this.overviewModel.toDate = this.convertDateToString(this.toDate * 1000);\n        this.overviewModel.toDateWidth = this.overviewContext.measureText(this.overviewModel.toDate).width;\n\n        if (this.isGrouped) {\n            this.setGroupedOverviewCanvasWidth();\n        } else {\n            this.overviewCanvasWidth += this.overviewModel.toDateWidth / 2;\n        }\n    }\n\n    getMarginBetweenMetrics() {\n        var marginBetweenMetrics;\n\n        if (this.isGrouped) {\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n            } else {\n                marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n            }\n        } else if (this.isCompressed) {\n            marginBetweenMetrics = this.config.overview.compressedMarginBetweenMetrics;\n        } else {\n            marginBetweenMetrics = this.config.overview.decompressedMarginBetweenMetrics;\n        }\n\n        return marginBetweenMetrics;\n    }\n\n    getMaxMetricLength() {\n        var length = 0;\n\n        this.overviewModel.metricList.forEach((metric) => {\n            var instanceWithMostPoints = _.maxBy(metric.data, (point) => {\n                return point.values.length;\n            });\n\n            length = instanceWithMostPoints.values.length;\n        });\n\n        return length;\n    }\n\n    setGroupedOverviewCanvasWidth() {\n        this.overviewCanvasWidth += this.config.overview.marginBetweenMarkerAndGroup * this.overviewModel.metricList.length;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize * this.overviewModel.metricList.length;\n\n            this.overviewModel.metricList.forEach((metric) => {\n                this.overviewCanvasWidth += this.getMaxGroupSizeBarLength(metric) * this.config.overview.singleAttributeGroupSizeWidth;\n            });\n        } else {\n            this.overviewCanvasWidth += this.config.overview.marginBetweenMetricAndGroupSize +\n                this.getMaxMultiAttributeGroupSize() * this.config.overview.multipleAttributeGroupSizeWidth;\n        }\n    }\n\n    getMaxGroupSizeBarLength(metric) {\n        var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n        var largestGroup = _.maxBy(groupList, (group) => {\n            return group.instanceList.length;\n        });\n\n        return largestGroup.instanceList.length * this.config.overview.singleAttributeGroupSizeWidth;\n    }\n\n    getCurrentSingleAttributeGroupList(metric) {\n        return metric.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    getMaxMultiAttributeGroupSize() {\n        var result = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            if (group.instanceList.length > result) {\n                result = group.instanceList.length;\n            }\n        });\n\n        return result;\n    }\n\n    getCurrentMultiAttributeGroupList() {\n        return this.overviewModel.thresholdGroupListMap.get(this.groupingThreshold);\n    }\n\n    setOverviewHeight() {\n        // height of tallest graph\n        if (this.isGrouped) {\n            var groupCount = this.getMaxGroupCount();\n            this.overviewModel.overviewHeight = groupCount * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        } else {\n            this.overviewModel.overviewHeight = this.overviewModel.data.length * this.config.overview.ungroupedPointHeight;\n        }\n\n        // 2 = Metric and time labels\n        this.overviewCanvasHeight = this.overviewModel.overviewHeight +\n            (this.overviewModel.labelTextHeight + this.config.overview.marginBetweenLabelsAndOverview) * 2;\n    }\n\n    getMaxGroupCount() {\n        var groupCount = 0;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                var length = groupList.length;\n\n                if (length > groupCount) {\n                    groupCount = length;\n                }\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            groupCount = groupList.length;\n        }\n\n        return groupCount;\n    }\n\n    setOverviewContextLabelFont() {\n        this.overviewContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n    }\n\n    drawOverviewData() {\n        this.overviewModel.overviewEndY = 0;\n        this.setOverviewMetricStartXAndEndX();\n\n        if (this.isGrouped) {\n            this.drawGroupedOverview();\n        } else {\n            this.drawUngroupedOverview();\n        }\n\n        this.drawMetricLabels();\n        this.drawToDateLabel();\n    }\n\n    setOverviewMetricStartXAndEndX() {\n        var marginBetweenMetrics = this.getMarginBetweenMetrics();\n\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            this.setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics);\n\n            if (this.isCompressed) {\n                metric.endX = metric.startX + metric.compressedTimeIndexList.length * this.config.overview.pointWidth;\n            } else {\n                metric.endX = metric.startX + this.getMaxMetricLength() * this.config.overview.pointWidth;\n            }\n        });\n    }\n\n    setOverviewMetricStartX(metric, metricIndex, marginBetweenMetrics) {\n        if (metricIndex > 0) {\n            var previousMetric = this.overviewModel.metricList[metricIndex - 1];\n            metric.startX = previousMetric.endX + marginBetweenMetrics;\n\n            if (this.isGrouped) {\n                metric.startX += this.config.overview.marginBetweenMarkerAndGroup;\n\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(previousMetric);\n                    metric.startX += maxGroupSizeBarLength + this.config.overview.marginBetweenMetricAndGroupSize;\n                }\n            }\n        } else {\n            metric.startX = this.config.overview.marginBetweenMarkerAndGroup;\n        }\n    }\n\n    drawGroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.groupedPointHeight;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingeAttributeGroupedOverview();\n        } else {\n            this.drawMultiAttributeGroupedOverview();\n        }\n\n        this.drawGroupSize();\n    }\n\n    drawSingeAttributeGroupedOverview() {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupOverviewWrapper(group, groupIndex, [metricIndex]);\n            });\n\n            this.drawMetricSeparator(metric);\n        });\n    }\n\n    drawGroupOverviewWrapper(group, groupIndex, metricIndexList) {\n        var instance = group.instanceList[0];\n        this.drawOverviewInstance(instance, groupIndex, this.config.overview.groupedPointHeight, this.config.overview.marginBetweenGroups, metricIndexList);\n        group.y = instance.y;\n    }\n\n    drawOverviewInstance(instance, instanceIndex, pointHeight, marginBetweenInstances, metricIndexList) {\n        instance.y = this.overviewModel.overviewStartY + instanceIndex * (pointHeight + marginBetweenInstances);\n        var endY = instance.y + pointHeight;\n\n        if (endY > this.overviewModel.overviewEndY) {\n            this.overviewModel.overviewEndY = endY;\n        }\n\n        metricIndexList.forEach((metricIndex) => {\n            this.drawOverviewInstancePoints(instance, metricIndex, pointHeight);\n        });\n    }\n\n    drawOverviewInstancePoints(instance, metricIndex, pointHeight) {\n        var overviewMetric = this.overviewModel.metricList[metricIndex];\n        var instanceMetric = instance.metricList[metricIndex];\n\n        if (this.isCompressed) {\n            overviewMetric.compressedTimeIndexList.forEach((pointIndex, rangeIndex) => {\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, rangeIndex,\n                        this.config.overview.pointWidth, pointHeight);\n                }\n            });\n        } else {\n            instanceMetric.data.forEach((point, pointIndex) => {\n                this.drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, this.config.overview.pointWidth, pointHeight);\n            });\n        }\n    }\n\n    drawOverviewInstancePoint(instance, metricIndex, overviewMetric, point, pointIndex, pointWidth, pointHeight) {\n        point.x = overviewMetric.startX + pointIndex * pointWidth;\n        point.color = this.getColorFromMap(point.value, this.overviewModel.metricList[metricIndex].colorMap);\n        this.overviewContext.fillStyle = point.color;\n        this.overviewContext.fillRect(point.x, instance.y, pointWidth, pointHeight);\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (this.isBetween(value, threshold.min, threshold.max)) {\n                result = color;\n            }\n        });\n\n        return result;\n    }\n\n    drawMultiAttributeGroupedOverview() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawGroupOverviewWrapper(group, groupIndex, metricIndexList);\n        });\n\n        this.drawMetricSeparator(this.overviewModel.metricList[this.overviewModel.metricList.length - 1]);\n    }\n\n    getAllMetricIndexList() {\n        return Array.from(Array(this.overviewModel.metricList.length).keys());\n    }\n\n    drawGroupSize() {\n        this.setOverviewContextLabelFont();\n        var label = \"Groups size\";\n        var labelWidth = this.overviewContext.measureText(label).width;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawSingleAttributeGroupSize(labelWidth);\n        } else {\n            this.drawMultipleAttributeGroupSize(labelWidth);\n        }\n    }\n\n    drawSingleAttributeGroupSize(labelWidth) {\n        this.overviewModel.metricList.forEach((metric) => {\n            var startX = metric.endX + this.config.overview.marginBetweenMetricAndGroupSize;\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            groupList.forEach((group, groupIndex) => {\n                this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.singleAttributeGroupSizeWidth);\n            });\n\n            this.drawGroupSizeLabel((startX * 2 + maxGroupSizeBarLength - labelWidth) / 2);\n        });\n    }\n\n    drawGroupSizeLabel(x) {\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(\"Groups size\", x, this.overviewModel.labelTextHeight);\n    }\n\n    drawGroupSizeWrapper(startX, group, groupIndex, groupSizeWidth) {\n        var endX = startX + group.instanceList.length * groupSizeWidth;\n        var startY = this.overviewModel.overviewStartY +\n            groupIndex * (this.config.overview.groupedPointHeight + this.config.overview.marginBetweenGroups);\n        var endY = startY + this.config.overview.groupedPointHeight;\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(startX, startY);\n        this.overviewContext.lineTo(endX, startY);\n        this.overviewContext.lineTo(endX, endY);\n        this.overviewContext.lineTo(startX, endY);\n        this.overviewContext.closePath();\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fill();\n        return endX;\n    }\n\n    drawMultipleAttributeGroupSize(labelWidth) {\n        var startX = this.overviewModel.overviewWidth + this.config.overview.marginBetweenMetricAndGroupSize + labelWidth / 2;\n        var maxEndX = 0;\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group, groupIndex) => {\n            var endX = this.drawGroupSizeWrapper(startX, group, groupIndex, this.config.overview.multipleAttributeGroupSizeWidth);\n\n            if (endX > maxEndX) {\n                maxEndX = endX;\n            }\n        });\n\n        this.drawGroupSizeLabel((startX + maxEndX - labelWidth) / 2);\n    }\n\n    drawMetricSeparator(metric) {\n        this.overviewContext.strokeStyle = \"gray\";\n        var x = metric.endX + this.config.overview.decompressedMarginBetweenMetrics / 2;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var maxGroupSizeBarLength = this.getMaxGroupSizeBarLength(metric);\n            x += this.config.overview.marginBetweenMetricAndGroupSize + maxGroupSizeBarLength;\n        }\n\n        this.overviewContext.beginPath();\n        this.overviewContext.moveTo(x, this.overviewModel.overviewStartY);\n        this.overviewContext.lineTo(x, this.overviewModel.overviewStartY + this.overviewModel.overviewHeight);\n        this.overviewContext.stroke();\n        this.overviewContext.closePath();\n    }\n\n    drawUngroupedOverview() {\n        this.overviewModel.overviewInstanceHeight = this.config.overview.ungroupedPointHeight;\n\n        this.overviewModel.data.forEach((instance, instanceIndex) => {\n            var metricIndexList = this.getAllMetricIndexList();\n            this.drawOverviewInstance(instance, instanceIndex, this.config.overview.ungroupedPointHeight, 0, metricIndexList);\n        });\n\n        if (!this.isCompressed) {\n            // this.drawGroupBars();\n        }\n    }\n\n    drawGroupBars() {\n        for (var i = 1; i < this.overviewModel.metricList.length; ++i) {\n            var x = this.overviewModel.metricList[i].startX - this.config.overview.decompressedMarginBetweenMetrics / 2 -\n                Math.floor(this.config.overview.groupBarWidth / 2);\n            this.drawGroupBarAtPosition(x);\n        }\n    }\n\n    drawGroupBarAtPosition(x) {\n        var y = this.overviewModel.overviewStartY;\n\n        this.overviewModel.thresholdGroupListMap.forEach((group) => {\n            this.overviewContext.fillStyle = group.color;\n            var height = group.instanceList.length * this.config.overview.ungroupedPointHeight;\n            this.overviewContext.fillRect(x, y, this.config.overview.groupBarWidth, height);\n            y += height;\n        });\n    }\n\n    drawMetricLabels() {\n        this.setOverviewContextLabelFont();\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n            var label = this.panel.metricList[metricIndex].name;\n            var width = this.overviewContext.measureText(label).width;\n            this.overviewContext.fillStyle = this.getMetricDarkestColor(this.panel.metricList[metricIndex]);\n            this.overviewContext.fillText(label, (metric.startX + metric.endX - width) / 2, this.overviewModel.labelTextHeight);\n        }\n    }\n\n    getMetricDarkestColor(metric) {\n        var colorList = metric.colorList;\n        return colorList[colorList.length - 1];\n    }\n\n    drawToDateLabel() {\n        this.setOverviewContextTimeFont();\n        var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n        var metric = this.overviewModel.metricList[this.overviewModel.metricList.length - 1];\n        this.overviewContext.fillStyle = \"black\";\n        this.overviewContext.fillText(this.overviewModel.toDate, metric.endX - this.overviewModel.toDateWidth / 2, y);\n    }\n\n    setOverviewContextTimeFont() {\n        this.overviewContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n    }\n\n    convertDateToString(date) {\n        return moment(date).format(this.config.dateFormat);\n    }\n\n    selectOverviewMode() {\n        this.drawOverview();\n    }\n\n    selectGroupingMode() {\n        this.changeGroupingSelection();\n    }\n\n    changeGroupingSelection() {\n        this.drawOverview();\n        this.clearFocusArea();\n        this.clearTimeIndicator();\n        this.deselectAllGroups();\n        this.showFocus = false;\n        this.showMergeSelectedGroups = false;\n    }\n\n    deselectAllGroups() {\n        this.focusModel.groupList = [];\n        this.deselectSingleAttributeGroups();\n        this.deselectMultiAttributeGroups();\n    }\n\n    deselectSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            if (metric.originalGroupList) {\n                metric.thresholdGroupListMap.set(this.previousGroupThreshold, metric.originalGroupList);\n                metric.originalGroupList = null;\n            }\n\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            if (groupList) {\n                groupList.forEach((group) => {\n                    group.isSelected = false;\n                    group.timeRangeIndexList = null;\n                });\n            }\n        });\n    }\n\n    deselectMultiAttributeGroups() {\n        if (this.overviewModel.originalGroupList) {\n            this.overviewModel.thresholdGroupListMap.set(this.previousGroupThreshold, this.overviewModel.originalGroupList);\n            this.overviewModel.originalGroupList = null;\n        }\n\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        groupList.forEach((group) => {\n            group.isSelected = false;\n            group.timeRangeIndexList = null;\n        });\n    }\n\n    changeGroupingThreshold() {\n        this.changeGroupingSelection();\n    }\n\n    groupUngroup() {\n        this.isGrouped = !this.isGrouped;\n        this.changeGroupingSelection();\n    }\n\n    mergeSelectedGroups() {\n        this.previousGroupThreshold = this.groupingThreshold;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.mergeSingleAttributeGroups();\n        } else {\n            this.mergeMultipleAttributeGroups();\n        }\n\n        this.mergeFocusGroupList();\n        this.showMergeSelectedGroups = false;\n        this.drawOverview();\n        this.drawSelectedGroupsMarkers();\n        this.drawFocusGraph();\n    }\n\n    mergeSingleAttributeGroups() {\n        this.overviewModel.metricList.forEach((metric) => {\n            var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n            if (!metric.originalGroupList) {\n                metric.originalGroupList = [];\n\n                groupList.forEach((group) => {\n                    metric.originalGroupList.push(group);\n                });\n            }\n\n            this.mergeSelectedGroupsWrapper(groupList);\n        });\n    }\n\n    mergeSelectedGroupsWrapper(groupList) {\n        var currentGroupList = [];\n\n        groupList.forEach((group) => {\n            currentGroupList.push(group);\n        });\n\n        groupList.length = 0;\n        this.populateMergedGroupList(currentGroupList, groupList);\n    }\n\n    populateMergedGroupList(currentGroupList, groupList) {\n        var mergedGroup;\n\n        currentGroupList.forEach((group) => {\n            if (group.isSelected) {\n                if (mergedGroup) {\n                    group.instanceList.forEach((instance) => {\n                        mergedGroup.instanceList.push(instance)\n                    });\n                } else {\n                    mergedGroup = JSON.parse(JSON.stringify(group));\n                    groupList.push(mergedGroup);\n                }\n            } else {\n                groupList.push(group);\n            }\n        });\n    }\n\n    mergeFocusGroupList() {\n        this.focusModel.groupList = [];\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                this.mergeFocusGroupListWrapper(groupList);\n            })\n        } else {\n            this.mergeFocusGroupListWrapper(this.getCurrentMultiAttributeGroupList());\n        }\n    }\n\n    mergeFocusGroupListWrapper(groupList) {\n        groupList.forEach((group) => {\n            if (group.isSelected) {\n                this.addGroupToFocus(group);\n            }\n        });\n    }\n\n    addGroupToFocus(group) {\n        var focusGroup = {};\n        focusGroup.instanceList = [];\n        focusGroup.overviewGroup = group;\n\n        group.instanceList.forEach((overviewInstance) => {\n            var metricWithMostData = _.maxBy(overviewInstance.metricList, (metric) => {\n                return metric.data.length;\n            });\n\n            this.focusModel.focusedIndexList = Array.from(Array(metricWithMostData.data.length).keys());\n            var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n            focusGroup.instanceList.push(focusInstance);\n        });\n\n        this.focusModel.groupList.push(focusGroup);\n    }\n\n    mergeMultipleAttributeGroups() {\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        if (!this.overviewModel.originalGroupList) {\n            this.overviewModel.originalGroupList = [];\n\n            groupList.forEach((group) => {\n                this.overviewModel.originalGroupList.push(group);\n            });\n        }\n\n        this.mergeSelectedGroupsWrapper(groupList);\n    }\n\n    compressDecompress() {\n        this.isCompressed = !this.isCompressed;\n        this.changeGroupingSelection();\n    }\n\n    selectTimeHighlightMode() {\n        this.clearTimeIndicator();\n\n        if (this.overviewModel.thresholdGroupListMap) {\n            this.overviewModel.thresholdGroupListMap.forEach((group) => {\n                group.timeRangeIndexList = [];\n            });\n        }\n\n        if (this.overviewModel.metricList) {\n            this.overviewModel.metricList.forEach((metric) => {\n                metric.thresholdGroupListMap.forEach((group) => {\n                    group.timeRangeIndexList = [];\n                });\n            });\n        }\n    }\n\n    clearTimeIndicator() {\n        this.overviewTimeIndicatorContext.clearRect(0, 0, this.overviewTimeIndicatorCanvas.width, this.overviewTimeIndicatorCanvas.height);\n    }\n\n    mouseDownOnOverview(evt) {\n        if (this.isSelectingMetricLabel) {\n            this.showHistogram = true;\n            this.drawHistogram();\n        } else if (this.isGrouped && this.overviewModel.hoveredGroup && this.timeHighlightMode == this.enumList.timeHighlightMode.RANGE) {\n            this.overviewModel.isSelectingTimeRange = true;\n            this.overviewModel.timeRangeStartOffset = this.overviewModel.mousePositionXOffset;\n            this.overviewModel.timeRangeGroup = this.overviewModel.hoveredGroup;\n        }\n    }\n\n    drawHistogram() {\n        this.histogramCanvasContext.clearRect(0, 0, this.histogramCanvas.width, this.histogramCanvas.height);\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var panelMetric = this.panel.metricList[this.overviewModel.selectedMetricIndex];\n        this.drawHistogramAxes(overviewMetric, panelMetric);\n    }\n\n    drawHistogramAxes(overviewMetric, panelMetric) {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.histogramModel.verticalAxisStartY = this.overviewModel.labelTextHeight + this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillStyle = \"black\";\n        this.histogramCanvasContext.strokeStyle = \"black\";\n        this.histogramCanvasContext.font = \"bold \" + this.config.overview.metricFontSize + \"px Arial\";\n        this.drawHistogramVerticalAxis(overviewMetric);\n        this.drawHistogramHorizontalAxis(overviewMetric, panelMetric);\n        this.drawHistogramMaxValueAndOccurence(overviewMetric);\n    }\n\n    drawHistogramVerticalAxis(overviewMetric) {\n        var occurences = \"occurences\";\n        var maxOccurenceWidth = this.histogramCanvasContext.measureText(overviewMetric.histogram.max).width;\n        var verticalLabelWidth = this.histogramCanvasContext.measureText(occurences).width;\n        this.histogramModel.horizontalAxisStartX = maxOccurenceWidth + this.config.histogram.marginBetweenAxesAndNumbers + verticalLabelWidth / 2;\n        this.histogramCanvasContext.fillText(occurences, this.histogramModel.horizontalAxisStartX - verticalLabelWidth / 2, this.overviewModel.labelTextHeight);\n        this.histogramModel.horizontalAxisY = this.histogramModel.verticalAxisStartY + this.config.histogram.verticalAxisLenghth;\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.verticalAxisStartY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramHorizontalAxis(overviewMetric, panelMetric) {\n        this.histogramModel.horizontalAxisEndX = this.histogramModel.horizontalAxisStartX + this.config.histogram.barWidth * overviewMetric.max;\n        var labelX = this.histogramModel.horizontalAxisEndX + this.config.histogram.marginBetweenAxesAndNumbers;\n        var labelY = this.histogramModel.horizontalAxisY + this.overviewModel.labelTextHeight / 2;\n        this.histogramCanvasContext.fillText(panelMetric.unit, labelX, labelY);\n        this.histogramCanvasContext.beginPath();\n        this.histogramCanvasContext.moveTo(this.histogramModel.horizontalAxisStartX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.lineTo(this.histogramModel.horizontalAxisEndX, this.histogramModel.horizontalAxisY);\n        this.histogramCanvasContext.stroke();\n        this.histogramCanvasContext.closePath();\n    }\n\n    drawHistogramMaxValueAndOccurence(overviewMetric) {\n        this.histogramCanvasContext.font = this.config.overview.metricFontSize + \"px Arial\";\n        this.histogramCanvasContext.fillText(overviewMetric.histogram.max, 0, this.histogramModel.verticalAxisStartY + this.overviewModel.labelTextHeight / 2);\n        var maxValueWidth = this.histogramCanvasContext.measureText(overviewMetric.max).width;\n        var valueLabelY = this.histogramModel.horizontalAxisY + this.config.histogram.marginBetweenAxesAndNumbers + this.overviewModel.labelTextHeight;\n        this.histogramCanvasContext.fillText(overviewMetric.max, this.histogramModel.horizontalAxisEndX - maxValueWidth / 2, valueLabelY);\n        var originX = this.histogramModel.horizontalAxisStartX - this.overviewModel.labelTextHeight - this.config.histogram.marginBetweenAxesAndNumbers;\n        this.histogramCanvasContext.fillText(0, originX, valueLabelY);\n    }\n\n    moveMouseOnOverview(evt) {\n        if (this.overviewModel.metricList) {\n            this.setOverviewMousePosition(evt);\n            this.setSelectedMetricIndex();\n\n            if (this.overviewModel.selectedMetricIndex >= 0) {\n                if (this.isBetween(this.overviewModel.mousePosition.y, 0, this.overviewModel.overviewStartY)) {\n                    this.isSelectingMetricLabel = true;\n                    this.setOverviewCursorToPointer();\n                } else {\n                    this.isSelectingMetricLabel = false;\n                    this.initialiseOverviewCanvasCursor();\n                }\n\n                if (this.isGrouped) {\n                    this.handleMouseMoveOnGroupedOverview();\n                } else if (!this.isCompressed && !this.focusAreaIsFixed) {\n                    this.drawFocus(evt);\n                }\n            }\n        }\n    }\n\n    setOverviewMousePosition(evt) {\n        this.overviewModel.mousePosition = this.getMousePos(evt, this.focusAreaCanvas);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    setSelectedMetricIndex() {\n        this.overviewModel.selectedMetricIndex = -1;\n\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var metric = this.overviewModel.metricList[metricIndex];\n\n            if (metric) {\n                // only check if mouse is on a metric graph\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.selectedMetricIndex = metricIndex;\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    break;\n                }\n            }\n        }\n    }\n\n    checkMouseIsInMetric(metric) {\n        return this.isBetween(this.overviewModel.mousePosition.x, metric.startX, metric.endX);\n    }\n\n    setOverviewCursorToPointer() {\n        this.overviewCursor = \"pointer\";\n    }\n\n    handleMouseMoveOnGroupedOverview() {\n        this.initialiseOverviewCanvasCursor();\n        this.overviewModel.hoveredGroup = null;\n        this.overviewModel.hoveredMarker = null;\n        this.checkAndSetSelectedOverviewMarker();\n        this.checkAndSetHoveredGroup()\n\n        if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n            if (this.overviewModel.hoveredGroup) {\n                if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE) {\n                    this.setSelectedTimeIndex();\n                }\n\n                this.drawTimeIndicators();\n            } else {\n                this.clearTimeIndicator();\n            }\n        } else if (this.overviewModel.isSelectingTimeRange) {\n            this.initialiseSelectedGroupTimeRangeIndexList();\n            this.drawSelectedTimeRanges();\n        }\n    }\n\n    checkAndSetSelectedOverviewMarker() {\n        for (var markerIndex = 0; markerIndex < this.overviewModel.groupMarkerList.length; ++markerIndex) {\n            var marker = this.overviewModel.groupMarkerList[markerIndex];\n\n            if (this.isBetween(this.overviewModel.mousePosition.x, marker.startX, marker.endX) &&\n                this.isBetween(this.overviewModel.mousePosition.y, marker.startY, marker.endY)) {\n                this.overviewCursor = \"pointer\";\n                this.overviewModel.hoveredMarker = marker;\n                return;\n            }\n        }\n    }\n\n    checkAndSetHoveredGroup() {\n        var groupList;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            var metric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n            groupList = this.getCurrentSingleAttributeGroupList(metric);\n        } else {\n            groupList = this.getCurrentMultiAttributeGroupList();\n        }\n\n        return this.checkAndSetHoveredGroupInGroupList(groupList);\n    }\n\n    checkAndSetHoveredGroupInGroupList(groupList) {\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (this.checkGroupIsHovered(group)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    checkGroupIsHovered(group) {\n        if (this.isBetween(this.overviewModel.mousePosition.y, group.y, group.y + this.config.overview.groupedPointHeight)) {\n            this.overviewModel.hoveredGroup = group;\n            this.setOverviewCursorToPointer();\n            return true;\n        }\n    }\n\n    setSelectedTimeIndex() {\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var groupList = this.getCurrentMultiAttributeGroupList();\n\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instanceMetric = groupList[groupIndex].instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n\n            for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                var pointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n                var point = instanceMetric.data[pointIndex];\n\n                if (point) {\n                    if (this.checkDataPointIsSelected(point)) {\n                        this.overviewModel.selectedTimeIndex = pointIndex;\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelected(point) {\n        return this.isBetween(this.overviewModel.mousePosition.x, point.x, point.x + this.config.overview.pointWidth);\n    }\n\n    drawTimeIndicators() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.drawTimeIndicatorWrapper(this.overviewModel.metricList[this.overviewModel.selectedMetricIndex]);\n        } else {\n            this.overviewModel.metricList.forEach((metric, metricIndex) => {\n                this.drawTimeIndicatorWrapper(metric, metricIndex);\n            });\n        }\n\n        this.drawSelectedTimeLabel();\n    }\n\n    drawTimeIndicatorWrapper(overviewMetric, metricIndex) {\n        var horizontalLineY = this.drawHorizontalTimeLine(overviewMetric, this.overviewModel.hoveredGroup);\n        var verticalLineX;\n\n        if (this.isCompressed && this.groupingMode == this.enumList.groupingMode.MULTIPLE &&\n            metricIndex != null && metricIndex != this.overviewModel.selectedMetricIndex) {\n            verticalLineX = this.getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex);\n        } else {\n            verticalLineX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n        }\n\n        this.drawSelectedTimePoint(overviewMetric, horizontalLineY, verticalLineX);\n    }\n\n    getTimeIndicatorXForNonSelectedMetric(overviewMetric, metricIndex) {\n        var previousPointIndex = 0;\n\n        for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n            var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n            if (this.isBetween(this.overviewModel.selectedTimeIndex, previousPointIndex, currentPointIndex)) {\n                var groupList = this.getCurrentMultiAttributeGroupList();\n\n                for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                    var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n                    var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                    if (point) {\n                        return point.x;\n                    }\n                }\n            }\n\n            previousPointIndex = currentPointIndex;\n        }\n    }\n\n    drawHorizontalTimeLine(metric, group) {\n        var horizontalLineY = group.y - this.config.overview.marginBetweenGroups / 2;\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(metric.startX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(metric.endX, horizontalLineY);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n        return horizontalLineY;\n    }\n\n    drawSelectedTimePoint(metric, horizontalLineY, verticalLineX) {\n        this.overviewTimeIndicatorContext.beginPath();\n        this.overviewTimeIndicatorContext.moveTo(verticalLineX, horizontalLineY);\n        this.overviewTimeIndicatorContext.lineTo(verticalLineX, this.overviewModel.hoveredGroup.y);\n        this.overviewTimeIndicatorContext.stroke();\n        this.overviewTimeIndicatorContext.closePath();\n    }\n\n    drawSelectedTimeLabel() {\n        for (var metricIndex = 0; metricIndex < this.overviewModel.metricList.length; ++metricIndex) {\n            var overviewMetric = this.overviewModel.metricList[metricIndex];\n\n            // some groups are empty -> need to iterate through group list until find one that isn't\n            var groupList = this.getCurrentSingleAttributeGroupList(overviewMetric)\n\n            for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n                var instanceMetric = groupList[groupIndex].instanceList[0].metricList[metricIndex];\n\n                if (this.isCompressed) {\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var point = instanceMetric.data[overviewMetric.compressedTimeIndexList[compressedTimeIndex]];\n\n                        if (point) {\n                            if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                                return;\n                            }\n                        }\n                    }\n                } else {\n                    for (var pointIndex = 0; pointIndex < instanceMetric.data.length; ++pointIndex) {\n                        var point = instanceMetric.data[pointIndex];\n\n                        if (this.checkDataPointIsSelectedAndDrawTimeLabel(point)) {\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checkDataPointIsSelectedAndDrawTimeLabel(point) {\n        if (this.checkDataPointIsSelected(point)) {\n            this.overviewTimeIndicatorContext.font = \"italic \" + this.config.overview.timeFontSize + \"px Arial\";\n            this.overviewTimeIndicatorContext.fillStyle = \"black\";\n            var date = this.convertDateToString(point.date * 1000);\n            var y = this.overviewModel.overviewStartY + this.overviewModel.overviewHeight + this.config.overview.marginBetweenLabelsAndOverview;\n            var x = Math.max(0, this.overviewModel.mousePosition.x - this.overviewModel.toDateWidth / 2);\n            this.overviewTimeIndicatorContext.fillText(date, x, y);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    initialiseSelectedGroupTimeRangeIndexList() {\n        this.overviewModel.timeRangeGroup.timeRangeMetricIndex = this.overviewModel.selectedMetricIndex;\n        this.overviewModel.timeRangeGroup.timeRangeIndexList = [];\n        var instanceMetric = this.overviewModel.timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var overviewMetric = this.overviewModel.metricList[this.overviewModel.selectedMetricIndex];\n        var startX = overviewMetric.startX + this.overviewModel.timeRangeStartOffset;\n        var endX = overviewMetric.startX + this.overviewModel.mousePositionXOffset;\n\n        if (startX > endX) {\n            var temp = startX;\n            startX = endX;\n            endX = temp;\n        }\n\n        instanceMetric.data.forEach((point, pointIndex) => {\n            if (this.isBetween(point.x, startX, endX)) {\n                this.overviewModel.timeRangeGroup.timeRangeIndexList.push(pointIndex);\n            }\n        });\n\n        if (this.overviewModel.timeRangeGroup.timeRangeIndexList.length > 0) {\n            this.setTimeRangeStartAndEndDate();\n        }\n    }\n\n    setTimeRangeStartAndEndDate() {\n        var timeRangeGroup = this.overviewModel.timeRangeGroup;\n        var metric = timeRangeGroup.instanceList[0].metricList[this.overviewModel.selectedMetricIndex];\n        var timeRangeIndexList = timeRangeGroup.timeRangeIndexList;\n        var startPoint = metric.data[timeRangeIndexList[0]];\n        timeRangeGroup.startTimeRangeDate = this.convertDateToString(startPoint.date * 1000);\n        var endPoint = metric.data[timeRangeIndexList[timeRangeIndexList.length - 1]];\n        timeRangeGroup.endTimeRangeDate = this.convertDateToString(endPoint.date * 1000);\n    }\n\n    drawSelectedTimeRanges() {\n        this.clearTimeIndicator();\n        this.overviewTimeIndicatorContext.strokeStyle = this.config.timeIndicator.color;\n        this.overviewTimeIndicatorContext.fillStyle = this.config.timeIndicator.color;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                groupList.forEach((group) => {\n                    this.drawSelectedTimeRangeWrapper(group, [group.timeRangeMetricIndex]);\n                });\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n\n            groupList.forEach((group) => {\n                this.drawSelectedTimeRangeWrapper(group, Array.from(Array(this.overviewModel.metricList.length).keys()));\n            });\n        }\n    }\n\n    drawSelectedTimeRangeWrapper(group, metricIndexList) {\n        if (group.timeRangeIndexList && group.timeRangeIndexList.length > 0) {\n            metricIndexList.forEach((metricIndex) => {\n                var instanceMetric = group.instanceList[0].metricList[metricIndex];\n                var overviewMetric = this.overviewModel.metricList[metricIndex];\n                var startPoint, endPoint;\n                var startRangeIndex = group.timeRangeIndexList[0];\n                var endRangeIndex = group.timeRangeIndexList[group.timeRangeIndexList.length - 1];\n\n                if (this.isCompressed && metricIndex != group.timeRangeMetricIndex) {\n                    var previousPointIndex = 0;\n                    var groupList = this.getCurrentMultiAttributeGroupList();\n\n                    for (var compressedTimeIndex = 0; compressedTimeIndex < overviewMetric.compressedTimeIndexList.length; ++compressedTimeIndex) {\n                        var currentPointIndex = overviewMetric.compressedTimeIndexList[compressedTimeIndex];\n\n                        if (this.isBetween(startRangeIndex, previousPointIndex, currentPointIndex)) {\n                            startPoint = this.getTimeRangePointWrapper(previousPointIndex, groupList, metricIndex);\n                        }\n\n                        if (this.isBetween(endRangeIndex, previousPointIndex, currentPointIndex)) {\n                            endPoint = this.getTimeRangePointWrapper(currentPointIndex, groupList, metricIndex);\n                        }\n\n                        previousPointIndex = currentPointIndex;\n                    }\n\n                } else {\n                    startPoint = instanceMetric.data[startRangeIndex];\n                    endPoint = instanceMetric.data[endRangeIndex];\n                }\n\n                if (startPoint) {\n                    this.drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint);\n                }\n            });\n        }\n    }\n\n    getTimeRangePointWrapper(pointIndex, groupList, metricIndex) {\n        for (var groupIndex = 0; groupIndex < groupList.length; ++groupIndex) {\n            var instance = groupList[groupIndex].instanceList[0];\n            var point = instance.metricList[metricIndex].data[pointIndex];\n\n            if (point) {\n                return point;\n            }\n        }\n    }\n\n    drawSelectedTimeRangeLines(overviewMetric, group, startPoint, endPoint) {\n        var startY = this.drawHorizontalTimeLine(overviewMetric, group);\n        var startX = startPoint.x;\n        var endX = endPoint.x + this.config.overview.pointWidth;\n        var width = endX - startX;\n        var height = group.y - startY;\n        this.overviewTimeIndicatorContext.fillRect(startX, startY, width, height);\n    }\n\n    mouseUpOnOverView(evt) {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredMarker) {\n                this.startFocusMarkerInterval(this.overviewModel.hoveredMarker.group);\n            } else {\n                this.updateSelectedGroupListAndDrawFocusGraph();\n            }\n        } else if (!this.isCompressed) {\n            this.fixFocusArea(evt);\n        }\n    }\n\n    updateSelectedGroupListAndDrawFocusGraph() {\n        this.$timeout(() => {\n            var updatedSelectedGroups = false;\n\n            if (this.timeHighlightMode == this.enumList.timeHighlightMode.POINT) {\n                if (this.overviewModel.hoveredGroup) {\n                    this.addOrRemoveGroupToFocus(this.overviewModel.hoveredGroup, true);\n                    updatedSelectedGroups = true;\n                } else {\n                    this.stopInterval();\n                }\n            } else if (this.overviewModel.isSelectingTimeRange) {\n                var removeExisting = this.overviewModel.timeRangeStartOffset == this.overviewModel.mousePositionXOffset;\n                this.addOrRemoveGroupToFocus(this.overviewModel.timeRangeGroup, removeExisting);\n                updatedSelectedGroups = true;\n            }\n\n            this.scope.$apply();\n\n            if (updatedSelectedGroups) {\n                this.drawSelectedGroupsMarkers();\n                this.drawFocusGraph();\n            }\n\n            this.overviewModel.isSelectingTimeRange = false;\n        });\n    }\n\n    addOrRemoveGroupToFocus(group, removeExisting) {\n        var focusGroup = _.find(this.focusModel.groupList, (search) => {\n            return search.overviewGroup == group;\n        })\n\n        if (focusGroup) {\n            if (removeExisting) {\n                group.isSelected = false;\n\n                _.remove(this.focusModel.groupList, (search) => {\n                    return search.overviewGroup == group;\n                });\n            }\n        } else {\n            group.isSelected = true;\n            this.addGroupToFocus(group);\n        }\n\n        this.setShowMergeGroupsButton();\n    }\n\n    setShowMergeGroupsButton() {\n        this.showMergeSelectedGroups = false;\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n            this.overviewModel.metricList.forEach((metric) => {\n                var groupList = this.getCurrentSingleAttributeGroupList(metric);\n                this.setShowMergeGroupsButtonWrapper(groupList);\n            });\n        } else {\n            var groupList = this.getCurrentMultiAttributeGroupList();\n            this.setShowMergeGroupsButtonWrapper(groupList);\n        }\n    }\n\n    setShowMergeGroupsButtonWrapper(groupList) {\n        var selectedGroupCount = 0;\n\n        for (var i = 0; i < groupList.length; ++i) {\n            var group = groupList[i];\n\n            if (group.isSelected) {\n                ++selectedGroupCount;\n            }\n\n            if (selectedGroupCount == 2) {\n                this.showMergeSelectedGroups = true;\n                return;\n            }\n        };\n    }\n\n    getFocusInstance(overviewInstance, indexList) {\n        var focusInstance = {};\n        focusInstance.instance = overviewInstance.instance;\n        focusInstance.overviewInstance = overviewInstance;\n        this.initialiseFocusInstanceData(focusInstance, overviewInstance, indexList);\n        return focusInstance;\n    }\n\n    drawSelectedGroupsMarkers() {\n        this.$timeout(() => {\n            this.clearFocusArea();\n            this.overviewModel.groupMarkerList = [];\n\n            if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                this.overviewModel.metricList.forEach((metric) => {\n                    var groupList = this.getCurrentSingleAttributeGroupList(metric);\n\n                    groupList.forEach((group) => {\n                        this.drawOverviewGroupMarker(group, [metric])\n                    });\n                });\n            } else {\n                var groupList = this.getCurrentMultiAttributeGroupList();\n\n                groupList.forEach((group) => {\n                    this.drawOverviewGroupMarker(group, this.overviewModel.metricList)\n                });\n            }\n        });\n    }\n\n    drawOverviewGroupMarker(group, metricList) {\n        if (group.isSelected) {\n            metricList.forEach((metric) => {\n                var marker = {};\n                marker.group = group;\n                marker.startX = metric.startX - this.config.overview.marginBetweenMarkerAndGroup + group.markerX;\n                marker.endX = marker.startX + this.config.overview.groupedPointHeight;\n                marker.startY = group.y;\n                marker.endY = marker.startY + this.config.overview.groupedPointHeight;\n                this.focusAreaContext.fillStyle = group.color;\n                this.focusAreaContext.fillRect(marker.startX, marker.startY, this.config.overview.groupedPointHeight, this.config.overview.groupedPointHeight);\n                this.overviewModel.groupMarkerList.push(marker);\n            });\n        }\n    }\n\n    startFocusMarkerInterval(group) {\n        if (this.focusGroupWithInterval != group) {\n            this.stopInterval();\n            this.focusGroupWithInterval = group;\n            this.initialiseFocusMarkerInterval();\n        }\n    }\n\n    stopInterval() {\n        this.stopOverviewMarkerInterval();\n        this.stopFocusMarkerInterval();\n    }\n\n    stopOverviewMarkerInterval() {\n        if (this.currentOverviewMarkerInterval) {\n            this.$interval.cancel(this.currentOverviewMarkerInterval);\n\n            if (this.overviewGroupWithInterval) {\n                this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n                if (this.focusModel.overviewGroupWithIntervalList) {\n                    this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                        overviewGroup.markerX = 0;\n                    });\n                }\n\n                this.drawSelectedGroupsMarkers();\n            }\n\n            this.overviewGroupWithInterval = null;\n        }\n    }\n\n    stopFocusMarkerInterval() {\n        if (this.currentFocusMarkerInterval) {\n            this.$interval.cancel(this.currentFocusMarkerInterval);\n\n            if (this.focusGroupWithInterval) {\n                this.focusGroupWithInterval.focusMarkerX = 0;\n                this.focusGroupWithInterval = null;\n                this.drawGroupFocusMarkers();\n            }\n        }\n    }\n\n    initialiseFocusMarkerInterval() {\n        this.focusMarkerMovingBackwards = false;\n        this.focusGroupWithInterval.focusMarkerX = 0;\n\n        this.currentFocusMarkerInterval = this.$interval(() => {\n            if (this.focusMarkerMovingBackwards) {\n                this.handleFocusMarkerMovingBackwardCase();\n            } else {\n                this.handleFocusMarkerMovingForwardCase();\n            }\n\n            this.drawGroupFocusMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleFocusMarkerMovingBackwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == 0) {\n            this.focusMarkerMovingBackwards = false;\n            ++this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            --this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    handleFocusMarkerMovingForwardCase() {\n        if (this.focusGroupWithInterval.focusMarkerX == Math.round(this.config.focusGraph.marginBetweenMarkers / 2)) {\n            this.focusMarkerMovingBackwards = true;\n            --this.focusGroupWithInterval.focusMarkerX;\n        } else {\n            ++this.focusGroupWithInterval.focusMarkerX;\n        }\n    }\n\n    fixFocusArea(evt) {\n        this.initialiseOverviewCanvasCursor();\n\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n    }\n\n    drawFocus(evt) {\n        this.drawFocusArea();\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                // only update focus graph if mouse is pointing on one of metric overview graphs\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.drawFocusGraph();\n                    break;\n                }\n            }\n        }\n    }\n\n    drawFocusArea() {\n        if (this.overviewModel.mousePosition) {\n            this.clearFocusArea();\n            var size = this.getFocusAreaSize();\n            var minimumTopY = Math.max(this.overviewModel.overviewStartY, this.overviewModel.mousePosition.y - size / 2);\n            this.focusModel.focusStartY = Math.min(minimumTopY, this.overviewModel.overviewEndY - size);\n            var size = this.getFocusAreaSize();\n            var offset = this.getFocusAreaOffset();\n\n            if (offset >= 0) {\n                this.focusAreaContext.strokeStyle = this.config.focusArea.color;\n\n                this.overviewModel.metricList.forEach((metric) => {\n                    metric.focusStartX = metric.startX + offset;\n                    this.focusAreaContext.strokeRect(metric.focusStartX, this.focusModel.focusStartY, size, size);\n                });\n            }\n        }\n    }\n\n    getFocusAreaSize() {\n        return Math.min(this.config.focusArea.focusAreaSize * 2, this.overviewModel.overviewEndY - this.overviewModel.overviewStartY);\n    }\n\n    getFocusAreaOffset() {\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            var metric = this.overviewModel.metricList[i];\n\n            if (metric) {\n                if (this.checkMouseIsInMetric(metric)) {\n                    this.overviewModel.mousePositionXOffset = this.overviewModel.mousePosition.x - metric.startX;\n                    this.focusModel.sourceMetricIndex = i;\n\n                    return Math.min(Math.max(metric.startX,\n                        this.overviewModel.mousePosition.x - this.config.focusArea.focusAreaSize),\n                        metric.endX - this.getFocusAreaSize()) - metric.startX;\n                }\n            }\n        }\n    }\n\n    drawFocusGraph() {\n        if (!this.isGrouped) {\n            this.initialiseFocusGraphData();\n        }\n\n        if ((this.isGrouped && this.focusModel.groupList.length > 0) ||\n            (!this.isGrouped && this.focusModel.data.length > 0)) {\n            this.showFocus = true;\n\n            this.$timeout(() => {\n                this.focusGraphHeight = this.overviewModel.metricList.length * this.config.focusGraph.metricMaxHeight +\n                    (this.overviewModel.metricList.length - 1) * this.config.focusGraph.marginBetweenMetrics;\n                this.focusGraphWidth = (this.focusModel.focusedIndexList.length - 1) * this.getFocusGraphPointWidth();\n                this.scope.$apply();\n\n                var focusGraphRow = this.getElementByID(\"focusGraphRow\");\n\n                if (focusGraphRow) {\n                    this.focusModel.focusRowHeight = focusGraphRow.offsetHeight;\n                    this.setFocusFromAndToDate();\n                    this.positionFocusFromAndToDate();\n                    this.drawFocusGraphData();\n                    this.autoSrollFocusGraph();\n                }\n            });\n        } else {\n            this.showFocus = false;\n        }\n    }\n\n    getFocusGraphPointWidth() {\n        return this.isGrouped ? this.config.focusGraph.groupedPointWidth : this.config.focusGraph.ungroupedPointWidth;\n    }\n\n    initialiseFocusGraphData() {\n        if (!this.focusModel.data) {\n            this.focusModel.data = [];\n        }\n\n        this.focusModel.data.length = 0;\n\n        this.overviewModel.data.forEach((overviewInstance) => {\n            if (this.checkInstanceInFocus(overviewInstance)) {\n                this.focusModel.focusedIndexList = this.getIndexesOfPointsInFocus(overviewInstance);\n                var focusInstance = this.getFocusInstance(overviewInstance, this.focusModel.focusedIndexList);\n                this.focusModel.data.push(focusInstance);\n            }\n        });\n    }\n\n    checkInstanceInFocus(instance) {\n        return instance.y <= this.focusModel.focusStartY + this.getFocusAreaSize() &&\n            instance.y + this.overviewModel.overviewInstanceHeight >= this.focusModel.focusStartY\n    }\n\n    getIndexesOfPointsInFocus(overviewInstance) {\n        var indexes = [];\n\n        for (var i = 0; i < overviewInstance.metricList.length; ++i) {\n            var metric = overviewInstance.metricList[i];\n\n            if (metric.data.length > 0) {\n                var overviewMetric = this.overviewModel.metricList[i];\n\n                metric.data.forEach((point, index) => {\n                    if (this.isBetween(point.x, overviewMetric.focusStartX, overviewMetric.focusStartX + this.getFocusAreaSize())) {\n                        indexes.push(index);\n                    }\n                });\n\n                break;\n            }\n        }\n\n        return indexes;\n    }\n\n    initialiseFocusInstanceData(focusInstance, overviewInstance, indexList) {\n        focusInstance.metricList = [];\n        this.addFocusMetrics(focusInstance, overviewInstance, indexList);\n        this.initialiseInstanceLayers(focusInstance);\n    }\n\n    addFocusMetrics(focusInstance, overviewInstance, indexList) {\n        this.overviewModel.metricList.forEach((metric, metricIndex) => {\n            var focusMetric = {};\n            focusMetric.data = [];\n            focusMetric.layerList = [];\n\n            indexList.forEach((index) => {\n                var point = overviewInstance.metricList[metricIndex].data[index];\n\n                if (point) {\n                    focusMetric.data.push(point);\n                }\n            });\n\n            focusInstance.metricList.push(focusMetric);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            this.panel.metricList[metricIndex].colorList.forEach(() => {\n                var layer = {};\n                layer.valueList = [];\n                metric.layerList.push(layer);\n            });\n\n            metric.data.forEach((point) => {\n                var value = point.value;\n\n                metric.layerList.forEach((layer) => {\n                    layer.valueList.push(value > 0 ? value : 0);\n                    value -= this.overviewModel.metricList[metricIndex].layerRange;\n                });\n            });\n        });\n    }\n\n    setFocusFromAndToDate() {\n        for (var instanceIndex = 0; instanceIndex < this.overviewModel.data.length; ++instanceIndex) {\n            var instance = this.overviewModel.data[instanceIndex];\n            var set = false;\n\n            for (var metricIndex = 0; metricIndex < instance.metricList.length; ++metricIndex) {\n                var metric = instance.metricList[metricIndex];\n                var fromIndex = this.focusModel.focusedIndexList[0];\n                var toIndex = this.focusModel.focusedIndexList[this.focusModel.focusedIndexList.length - 1];\n\n                if (metric.data[fromIndex] && metric.data[toIndex]) {\n                    this.focusedFromDate = this.convertDateToString(metric.data[fromIndex].date * 1000);\n                    this.focusedToDate = this.convertDateToString(metric.data[toIndex].date * 1000);\n                    set = true;\n                    break;\n                }\n            }\n\n            if (set) {\n                break;\n            }\n        }\n    }\n\n    positionFocusFromAndToDate() {\n        this.timeFontSize = this.config.overview.timeFontSize;\n        this.setOverviewContextTimeFont();\n        var canvasStartX = this.getElementByID(\"canvasCell\").offsetLeft;\n        var fromDateWidth = this.overviewContext.measureText(this.focusedFromDate).width;\n        this.fromDateLeftMargin = canvasStartX - (fromDateWidth / 2);\n        this.toDateLeftMargin = this.focusGraphWidth - fromDateWidth;\n    }\n\n    drawFocusGraphData() {\n        if (this.isGrouped) {\n            this.$timeout(() => {\n                if (this.groupingMode == this.enumList.groupingMode.SINGLE) {\n                    this.focusGraphMarkerWidth = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) *\n                        this.overviewModel.metricList.length;\n                } else {\n                    this.focusGraphMarkerWidth = this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers;\n                }\n\n                this.focusGraphMarkerHeight = this.config.focusGraph.markerSize;\n                this.scope.$apply();\n                this.drawGroupFocusMarkers();\n                this.drawGroupedFocusGraph();\n            });\n        } else {\n            this.drawUngroupedFocusGraph();\n        }\n    }\n\n    drawGroupFocusMarkers() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusMarker(group, groupIndex, instance, instanceIndex) {\n        var canvas = this.getElementByID(\"focusGroupMarkerCanvas-\" + groupIndex + \"-\" + instanceIndex);\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (this.groupingMode == this.enumList.groupingMode.SINGLE && group.showDetails) {\n            instance.groupWithMarkerList = [];\n\n            instance.overviewInstance.groupList.forEach((instanceGroup, instanceGroupIndex) => {\n                if (instanceGroup.isSelected) {\n                    instance.groupWithMarkerList.push(instanceGroup);\n                    var x = (this.config.focusGraph.markerSize + this.config.focusGraph.marginBetweenMarkers) * instanceGroupIndex;\n                    this.drawGroupedFocusMarkerWrapper(context, instanceGroup, x);\n                }\n            });\n        } else {\n            this.drawGroupedFocusMarkerWrapper(context, group.overviewGroup, 0);\n        }\n    }\n\n    drawGroupedFocusMarkerWrapper(context, group, x) {\n        if (group == this.focusGroupWithInterval) {\n            x += this.focusGroupWithInterval.focusMarkerX;\n        }\n\n        context.fillStyle = group.color;\n        context.fillRect(x, 0, this.config.focusGraph.markerSize, this.config.focusGraph.markerSize);\n    }\n\n    drawGroupedFocusGraph() {\n        this.focusModel.groupList.forEach((group, groupIndex) => {\n            group.instanceList.forEach((instance, instanceIndex) => {\n                if (instanceIndex == 0 || group.showDetails) {\n                    this.drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex);\n                }\n            });\n        });\n    }\n\n    drawGroupedFocusGraphWrapper(group, groupIndex, instance, instanceIndex) {\n        // full time range\n        var maxMetricLength = this.getMaxMetricLength();\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.drawGroupedFocusGraphInstance(canvas, instance, Array.from(Array(maxMetricLength).keys()), this.getFocusGraphPointWidth());\n\n        // selected time range\n        if (group.overviewGroup.timeRangeIndexList) {\n            var canvas = this.getElementByID(\"focusGraphHighlightedTimeRangeCanvas-\" + groupIndex + \"-\" + instanceIndex);\n            var pointWidth = Math.floor(this.focusGraphWidth / group.overviewGroup.timeRangeIndexList.length);\n            this.drawGroupedFocusGraphInstance(canvas, instance, group.overviewGroup.timeRangeIndexList, pointWidth);\n        }\n    }\n\n    getGroupedFocusCanvas(groupIndex, instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + groupIndex + \"-\" + instanceIndex);\n    }\n\n    drawGroupedFocusGraphInstance(canvas, instance, valueIndexList, pointWidth) {\n        var context = this.getCanvasContext(canvas);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawFocusGraphInstance(instance, context, valueIndexList, pointWidth);\n    }\n\n    drawFocusGraphInstance(instance, context, valueIndexList, pointWidth) {\n        instance.metricList.forEach((metric, metricIndex) => {\n            metric.layerList.forEach((layer, layerIndex) => {\n                // start drawing from bottom\n                var y = (this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics) * metricIndex +\n                    this.config.focusGraph.metricMaxHeight;\n                context.beginPath();\n                context.moveTo(0, y);\n                var x = 0;\n                var previousX = 0;\n                var previousValue = 0;\n\n                valueIndexList.forEach((valueIndex, positionIndex) => {\n                    var value = layer.valueList[valueIndex];\n\n                    if (value != undefined) {\n                        x = pointWidth * positionIndex;\n                        this.moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y,\n                            this.overviewModel.metricList[metricIndex].layerRange);\n                        previousX = x;\n                        previousValue = value;\n                    }\n                });\n\n                context.lineTo(x, y);\n                context.lineTo(this.focusModel.graphBeginX, y);\n                context.closePath();\n                context.fillStyle = this.panel.metricList[metricIndex].colorList[layerIndex];\n                context.fill();\n            });\n        });\n    }\n\n    drawUngroupedFocusGraph() {\n        this.focusModel.data.forEach((instance, instanceIndex) => {\n            var canvas = this.getUngroupedFocusCanvas(instanceIndex);\n            var context = this.getCanvasContext(canvas);\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            this.drawFocusGraphInstance(instance, context, Array.from(Array(this.getMaxMetricLength()).keys()), this.config.focusGraph.ungroupedPointWidth);\n        });\n    }\n\n    getUngroupedFocusCanvas(instanceIndex) {\n        return this.getElementByID(\"focusGraphCanvas-\" + instanceIndex);\n    }\n\n    moveContextBasedOnValue(context, value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            // draw line straight down to base if value is 0\n            context.lineTo(previousX, y);\n        } else {\n            // move to current position at base if previous value is 0\n            if (layerIndex > 0 && previousValue == 0) {\n                context.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                context.lineTo(x, y - this.config.focusGraph.metricMaxHeight);\n            } else {\n                context.lineTo(x, y - value * this.config.focusGraph.metricMaxHeight / layerRange);\n            }\n        }\n    }\n\n    autoSrollFocusGraph() {\n        if (this.isGrouped) {\n            if (this.overviewModel.hoveredGroup && this.overviewModel.hoveredGroup.isSelected) {\n                var rowCount = 0;\n\n                this.focusModel.groupList.forEach((group) => {\n                    if (group.showDetails) {\n                        rowCount += group.instanceList.length;\n                    } else {\n                        ++rowCount;\n                    }\n                });\n\n                this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * rowCount;\n            }\n        } else {\n            this.scrollByInstance();\n        }\n    }\n\n    scrollByInstance() {\n        var instance = this.getHoveredInstance();\n\n        if (instance) {\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                var focusModelInstance = this.focusModel.data[i];\n\n                if (instance.instance == focusModelInstance.instance) {\n                    focusModelInstance.isSelected = true;\n                    this.focusGraphContainer.scrollTop = this.focusModel.focusRowHeight * i;\n                } else {\n                    focusModelInstance.isSelected = false;\n                }\n            }\n        }\n    }\n\n    getHoveredInstance() {\n        for (var i = 0; i < this.overviewModel.data.length; ++i) {\n            var instance = this.overviewModel.data[i];\n\n            if (this.isBetween(this.overviewModel.mousePosition.y, instance.y - this.config.overview.ungroupedPointHeight, instance.y)) {\n                return instance;\n            }\n        }\n    }\n\n    moveMouseOnFocusGroup(group, instance) {\n        if (this.groupingMode == this.enumList.groupingMode.MULTIPLE || !group.showDetails) {\n            this.focusModel.overviewGroupWithIntervalList = [group.overviewGroup];\n            this.startOverviewMarkerInterval(group);\n        } else {\n            this.focusModel.overviewGroupWithIntervalList = instance.groupWithMarkerList;\n            this.startOverviewMarkerInterval(group);\n        }\n    }\n\n    startOverviewMarkerInterval(group) {\n        if (this.overviewGroupWithInterval != group) {\n            this.stopInterval();\n            this.overviewGroupWithInterval = group;\n            this.initialiseOverviewMarkerInterval();\n        }\n    }\n\n    initialiseOverviewMarkerInterval() {\n        this.overviewMarkerMovingBackwards = false;\n        this.overviewGroupWithInterval.overviewMarkerX = 0;\n\n        this.currentOverviewMarkerInterval = this.$interval(() => {\n            if (this.overviewMarkerMovingBackwards) {\n                this.handleOverviewMarkerMovingBackwardCase();\n            } else {\n                this.handleOverviewMarkerMovingForwardCase();\n            }\n\n            if (this.focusModel.overviewGroupWithIntervalList) {\n                this.focusModel.overviewGroupWithIntervalList.forEach((overviewGroup) => {\n                    overviewGroup.markerX = this.overviewGroupWithInterval.overviewMarkerX;\n                });\n            }\n\n            this.drawSelectedGroupsMarkers();\n        }, this.config.intervalTimer);\n    }\n\n    handleOverviewMarkerMovingBackwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == 0) {\n            this.overviewMarkerMovingBackwards = false;\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    handleOverviewMarkerMovingForwardCase() {\n        if (this.overviewGroupWithInterval.overviewMarkerX == Math.round(this.config.overview.marginBetweenMarkerAndGroup / 2)) {\n            this.overviewMarkerMovingBackwards = true;\n            --this.overviewGroupWithInterval.overviewMarkerX;\n        } else {\n            ++this.overviewGroupWithInterval.overviewMarkerX;\n        }\n    }\n\n    showNodes(group, event) {\n        event.preventDefault();\n\n        this.$timeout(() => {\n            group.showDetails = !group.showDetails;\n            this.scope.$apply();\n            this.drawFocusGraphData();\n        });\n    }\n\n    selectGroup(instance, evt, groupIndex, instanceIndex) {\n        if (this.isGrouped) {\n            this.focusModel.groupList.forEach((group) => {\n                group.instanceList.forEach((instance) => {\n                    instance.isSelected = false;\n                })\n            });\n        } else {\n            this.focusModel.data.forEach((focusInstance) => {\n                focusInstance.isSelected = false;\n            });\n        }\n\n        instance.isSelected = true;\n        var canvas = this.getGroupedFocusCanvas(groupIndex, instanceIndex);\n        this.showPopup(instance, evt, groupIndex, instanceIndex, canvas)\n    }\n\n    showPopup(instance, evt, canvas) {\n        var mousePos = this.getMousePos(evt, canvas);\n        var metricHeight = this.config.focusGraph.metricMaxHeight + this.config.focusGraph.marginBetweenMetrics;\n\n        for (var i = 0; i < this.overviewModel.metricList.length; ++i) {\n            if (this.isBetween(mousePos.y, i * metricHeight, (i + 1) * metricHeight)) {\n                var metric = this.panel.metricList[i];\n\n                if (metric.popupURL && metric.popupURL != \"\") {\n                    window.open(metric.popupURL + \"?orgId=1&var-node=\" + instance.instance,\n                        instance.instance, \"top=300, left=300, width=600, height=500\");\n                }\n\n                break;\n            }\n        }\n    }\n\n    selectNode(index, evt) {\n        var instance = this.focusModel.data[index];\n        instance.isSelected = true;\n        var canvas = this.getUngroupedFocusCanvas(index);\n        this.showPopup(instance, evt, canvas)\n    }\n\n    removeMetric(metric) {\n        _.remove(this.panel.metricList, (search) => {\n            return search == metric;\n        });\n    }\n\n    addMetric() {\n        var metric = {};\n        metric.color = \"#000000\";\n        this.panel.metricList.push(metric);\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}