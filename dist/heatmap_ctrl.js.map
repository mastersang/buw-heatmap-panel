{"version":3,"sources":["../src/heatmap_ctrl.js"],"names":["MetricsPanelCtrl","_","HeatmapCtrl","$scope","$injector","$timeout","variableSrv","timeSrv","events","on","onDataReceived","bind","overviewModel","focusModel","initialiseConfig","config","apiAddress","instancePropertyName","dateFormat","focusAreaColor","focusAreaSize","metricCount","CPUColors","memoryColors","storageColors","luminanceLevel","overviewPointWidth","overviewPointHeight","paddingBetweenGraphs","leftPadding","horizontalMargin","verticalMargin","fontSize","focusPointWidth","focusPointHeight","focusGraphMargins","updateVariable","load","scope","ctrl","isLoading","rawData","maxLoadCount","loadCount","fromDate","Math","round","timeRange","from","_d","getTime","toDate","to","getCPUData","getMemoryData","getStorageData","processRawData","getDataFromAPI","data","CPU","metric","callback","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","url","encodeURIComponent","open","send","totalMemory","freeMemory","cachedMemory","bufferMemory","totalStorage","freeStorage","convertDataToFloat","processMemoryData","processStorageData","initiliseOverviewCanvasData","initialiseOverviewMixMax","initialiseColorMap","renderOverview","forEach","instance","values","value","parseFloat","length","memoryData","memoryInstance","totalValues","freeValues","find","search","cachedValues","bufferValues","addUsedMemoryData","push","memory","usedValues","usedPercentageValues","i","time","storageData","storageInstance","addUsedStorageData","storage","canvasData","initialiseOverViewCanvasDataByMetric","newInstance","metricInstance","convertValuePairToProperties","CPUValues","memoryValues","storageValues","newInstanceCallback","newInstanceList","metricInstanceList","point","date","elem","attrs","parent","moveFocusArea","evt","fixFocusArea","selectNode","initialiseCanvases","focusAreaIsFixed","drawFocus","preventDefault","mousePos","getMousePos","overviewCanvas","clearFocus","drawFocusArea","drawFocusGraph","hasFocus","focusAreaContext","clearRect","focusAreaCanvas","width","height","focusGraphContext","focusGraphCanvas","canvas","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","size","getFocusAreaSize","focusStartX","min","max","focusStartY","strokeStyle","strokeRect","initialiseFocusGraphData","drawFocusGraphLabels","drawFocusGraphData","overviewY","modalInstance","indexes","getPointIndexesInFocus","addPointToFocusByList","initialiseInstanceLayers","list","index","focusList","overviewList","CPUlayers","initialiseLayersByMetric","layerRange","memoryLayers","storageLayers","layers","colors","valueList","layer","horizontalX","setLineDash","fillStyle","instanceHeight","label","metrics","measureText","labelY","fillText","lineY","beginPath","moveTo","lineTo","stroke","drawFocusGraphDataByLayers","metricIndex","layerIndex","previousX","previousValue","valueIndex","moveContextBasedOnValue","closePath","fill","event","menuX","menuY","variables","v","name","setOptionAsCurrent","text","variableUpdated","overviewContext","getContext","font","initialiseCPUMinMax","initialiseMemoryStorageMinMax","checkAndSetOverviewMinMax","initialiseColorMapByMetric","colorMap","Map","threshold","set","checkMetricHasData","drawOverviewData","drawOverviewDataWrapper","firstInstance","maxLength","overviewWidth","overviewHeight","focusGraphMarginTop","$apply","drawMetricOverviewData","color","getColorFromMap","fillRect","map","templateUrl"],"mappings":"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","sourcesContent":["import { MetricsPanelCtrl } from \"app/plugins/sdk\";\nimport \"./heatmap.css!\";\nimport _ from \"lodash\";\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $timeout, variableSrv, timeSrv) {\n        super($scope, $injector);\n        this.$timeout = $timeout;\n        this.variableSrv = variableSrv;\n        this.timeSrv = timeSrv;\n        this.events.on(\"data-received\", this.onDataReceived.bind(this));\n        this.overviewModel = {};\n        this.focusModel = {};\n        this.initialiseConfig();\n    }\n\n    initialiseConfig() {\n        this.config = {\n            apiAddress: \"http://localhost:3000/api/datasources/proxy/1/api/v1/query_range?query=\",\n            instancePropertyName: \"instance\",\n            dateFormat: \"DD-MM-YYYY HH:mm\",\n            focusAreaColor: \"aqua\",\n            focusAreaSize: 30,\n            metricCount: 3,\n            CPUColors: [\"f2d9e6\", \"d98cb3\", \"bf4080\", \"73264d\"],\n            memoryColors: [\"ccddff\", \"6699ff\", \"0055ff\", \"003399\"],\n            storageColors: [\"eeeedd\", \"cccc99\", \"aaaa55\", \"666633\"],\n            luminanceLevel: 0.5,\n            overviewPointWidth: 1,\n            overviewPointHeight: 1,\n            paddingBetweenGraphs: 50,\n            leftPadding: 0,\n            horizontalMargin: 40,\n            verticalMargin: 20,\n            fontSize: 15,\n            focusPointWidth: 5,\n            focusPointHeight: 30,\n            focusGraphMargins: 10,\n        }\n    }\n\n    onDataReceived() {\n        if (this.updateVariable) {\n            this.updateVariable = false;\n        } else {\n            this.load();\n        }\n    }\n\n    load() {\n        this.$timeout(() => {\n            if (this.scope.ctrl.isLoading) {\n                this.load();\n            } else {\n                this.scope.ctrl.isLoading = true;\n                this.rawData = {};\n                this.maxLoadCount = 7;\n                this.loadCount = 0;\n                this.fromDate = Math.round(this.timeSrv.timeRange().from._d.getTime() / 1000);\n                this.toDate = Math.round(this.timeSrv.timeRange().to._d.getTime() / 1000);\n\n                this.getCPUData();\n                this.getMemoryData();\n                this.getStorageData();\n\n                this.processRawData();\n            }\n        }, 100);\n    }\n\n    getCPUData() {\n        this.getDataFromAPI(\"node_load1{job='node'}\", (data) => {\n            this.rawData.CPU = data;\n        });\n    }\n\n    getDataFromAPI(metric, callback) {\n        var xmlHttp = new XMLHttpRequest();\n\n        xmlHttp.onreadystatechange = () => {\n            if (xmlHttp.readyState == 4) {\n                ++this.loadCount;\n\n                if (xmlHttp.status == 200) {\n                    callback(JSON.parse(xmlHttp.responseText).data.result);\n                }\n            }\n        }\n\n        var url = this.config.apiAddress + encodeURIComponent(metric) + \"&start=\" + this.fromDate + \"&end=\" + this.toDate + \"&step=15\";\n        xmlHttp.open(\"GET\", url, true);\n        xmlHttp.send(null);\n    }\n\n    getMemoryData() {\n        this.getDataFromAPI(\"node_memory_MemTotal_bytes{job='node'}\", (data) => {\n            this.rawData.totalMemory = data;\n        });\n\n        this.getDataFromAPI(\"node_memory_MemFree_bytes{job='node'}\", (data) => {\n            this.rawData.freeMemory = data;\n        });\n\n        this.getDataFromAPI(\"node_memory_Cached_bytes{job='node'}\", (data) => {\n            this.rawData.cachedMemory = data;\n        });\n\n        this.getDataFromAPI(\"node_memory_Buffers_bytes{job='node'}\", (data) => {\n            this.rawData.bufferMemory = data;\n        });\n    }\n\n    getStorageData() {\n        this.getDataFromAPI(\"sum by (instance) (node_filesystem_size_bytes{job='node',device!~'rootfs'})\", (data) => {\n            this.rawData.totalStorage = data;\n        });\n\n        this.getDataFromAPI(\"sum by (instance) (node_filesystem_avail_bytes{job='node',device!~'(?:rootfs|/dev/loop.+)',mountpoint!~'(?:/mnt/nfs/|/run|/var/run|/cdrom).*'})\", (data) => {\n            this.rawData.freeStorage = data;\n        });\n    }\n\n    processRawData() {\n        this.$timeout(() => {\n            if (this.loadCount < this.maxLoadCount) {\n                this.processRawData.bind(this)();\n            } else {\n                this.scope.ctrl.isLoading = false;\n\n                this.convertDataToFloat(this.rawData.CPU);\n                this.overviewModel.CPU = {};\n                this.overviewModel.CPU.data = this.rawData.CPU;\n\n                this.processMemoryData();\n                this.processStorageData();\n\n                this.initiliseOverviewCanvasData();\n                this.initialiseOverviewMixMax();\n                this.initialiseColorMap();\n                this.renderOverview();\n            }\n        }, 100);\n    }\n\n    convertDataToFloat(data) {\n        data.forEach((instance) => {\n            instance.values.forEach((value) => {\n                value[0] = parseFloat(value[0]);\n                value[1] = parseFloat(value[1]);\n            });\n        });\n    }\n\n    processMemoryData() {\n        if (this.rawData.totalMemory.length > 0) {\n            this.convertDataToFloat(this.rawData.totalMemory);\n            this.convertDataToFloat(this.rawData.freeMemory);\n            this.convertDataToFloat(this.rawData.cachedMemory);\n            this.convertDataToFloat(this.rawData.bufferMemory);\n            var memoryData = [];\n\n            this.rawData.totalMemory.forEach((instance) => {\n                var memoryInstance = {};\n                memoryInstance.metric = instance.metric;\n                memoryInstance.totalValues = instance.values;\n\n                memoryInstance.freeValues = _.find(this.rawData.freeMemory, (search) => {\n                    return search.metric.instance == memoryInstance.metric.instance;\n                }).values;\n\n                memoryInstance.cachedValues = _.find(this.rawData.cachedMemory, (search) => {\n                    return search.metric.instance == memoryInstance.metric.instance;\n                }).values;\n\n                memoryInstance.bufferValues = _.find(this.rawData.bufferMemory, (search) => {\n                    return search.metric.instance == memoryInstance.metric.instance;\n                }).values;\n\n                this.addUsedMemoryData(memoryInstance);\n                memoryData.push(memoryInstance);\n            });\n\n            this.overviewModel.memory = {};\n            this.overviewModel.memory.data = memoryData;\n        }\n    }\n\n    addUsedMemoryData(memoryInstance) {\n        memoryInstance.usedValues = [];\n        memoryInstance.usedPercentageValues = [];\n\n        if (memoryInstance.totalValues.length == memoryInstance.bufferValues.length &&\n            memoryInstance.bufferValues.length == memoryInstance.freeValues.length &&\n            memoryInstance.freeValues.length == memoryInstance.cachedValues.length) {\n            for (var i = 0; i < memoryInstance.totalValues.length; ++i) {\n                var time = memoryInstance.totalValues[i][0];\n                var value = memoryInstance.totalValues[i][1] + memoryInstance.bufferValues[i][1] - memoryInstance.freeValues[i][1] - memoryInstance.cachedValues[i][1];\n                memoryInstance.usedValues.push([time, value]);\n            }\n\n            for (var i = 0; i < memoryInstance.usedValues.length; ++i) {\n                var time = memoryInstance.usedValues[i][0];\n                var value = memoryInstance.usedValues[i][1] * 100 / (memoryInstance.totalValues[i][1] + memoryInstance.bufferValues[i][1]);\n                memoryInstance.usedPercentageValues.push([time, value]);\n            }\n        }\n    }\n\n    processStorageData() {\n        if (this.rawData.totalStorage.length > 0) {\n            this.convertDataToFloat(this.rawData.totalStorage);\n            this.convertDataToFloat(this.rawData.freeStorage);\n            var storageData = [];\n\n            this.rawData.totalStorage.forEach((instance) => {\n                var storageInstance = {};\n                storageInstance.metric = instance.metric;\n                storageInstance.totalValues = instance.values;\n\n                storageInstance.freeValues = _.find(this.rawData.freeStorage, (search) => {\n                    return search.metric.instance == storageInstance.metric.instance;\n                }).values;\n\n                this.addUsedStorageData(storageInstance);\n                storageData.push(storageInstance);\n            });\n\n            this.overviewModel.storage = {};\n            this.overviewModel.storage.data = storageData;\n        }\n    }\n\n    addUsedStorageData(storageInstance) {\n        storageInstance.usedValues = [];\n        storageInstance.usedPercentageValues = [];\n\n        if (storageInstance.totalValues.length == storageInstance.freeValues.length) {\n            for (var i = 0; i < storageInstance.totalValues.length; ++i) {\n                var time = storageInstance.totalValues[i][0];\n                var value = storageInstance.totalValues[i][1] - storageInstance.freeValues[i][1];\n                storageInstance.usedValues.push([time, value]);\n            }\n\n            for (var i = 0; i < storageInstance.usedValues.length; ++i) {\n                var time = storageInstance.usedValues[i][0];\n                var value = storageInstance.usedValues[i][1] * 100 / storageInstance.totalValues[i][1];\n                storageInstance.usedPercentageValues.push([time, value]);\n            }\n        }\n    }\n\n    initiliseOverviewCanvasData() {\n        this.overviewModel.canvasData = [];\n\n        this.initialiseOverViewCanvasDataByMetric(this.overviewModel.CPU, (newInstance, metricInstance) => {\n            this.convertValuePairToProperties(newInstance.CPUValues, metricInstance.values);\n            this.overviewModel.canvasData.push(newInstance);\n        });\n\n        this.initialiseOverViewCanvasDataByMetric(this.overviewModel.memory, (newInstance, metricInstance) => {\n            this.convertValuePairToProperties(newInstance.memoryValues, metricInstance.usedPercentageValues);\n        });\n\n        this.initialiseOverViewCanvasDataByMetric(this.overviewModel.storage, (newInstance, metricInstance) => {\n            this.convertValuePairToProperties(newInstance.storageValues, metricInstance.usedPercentageValues);\n        });\n    }\n\n    initialiseOverViewCanvasDataByMetric(metric, newInstanceCallback) {\n        metric.data.forEach((metricInstance) => {\n            var newInstance = _.find(this.overviewModel.canvasData, (search) => {\n                return metricInstance.metric.instance == search.instance;\n            });\n\n            if (!newInstance) {\n                newInstance = {};\n                newInstance.instance = metricInstance.metric.instance;\n                newInstance.CPUValues = [];\n                newInstance.memoryValues = [];\n                newInstance.storageValues = [];\n            }\n\n            newInstanceCallback(newInstance, metricInstance);\n        });\n    }\n\n    convertValuePairToProperties(newInstanceList, metricInstanceList) {\n        metricInstanceList.forEach((value) => {\n            var point = {};\n            point.date = value[0];\n            point.value = value[1];\n            newInstanceList.push(point);\n        });\n    }\n\n    link(scope, elem, attrs, ctrl) {\n        this.scope = scope;\n        this.elem = elem;\n        var parent = this;\n\n        scope.moveFocusArea = function (evt) {\n            parent.moveFocusArea.bind(parent, evt)();\n        }\n\n        scope.fixFocusArea = function (evt) {\n            parent.fixFocusArea.bind(parent, evt)();\n        }\n\n        scope.selectNode = function (evt) {\n            parent.selectNode.bind(parent, evt)();\n        }\n\n        this.initialiseCanvases();\n    }\n\n    moveFocusArea(evt) {\n        if (!this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n            evt.preventDefault();\n        }\n    }\n\n    fixFocusArea(evt) {\n        if (this.focusAreaIsFixed) {\n            this.drawFocus(evt);\n        }\n\n        this.focusAreaIsFixed = !this.focusAreaIsFixed;\n        evt.preventDefault();\n    }\n\n    drawFocus(evt) {\n        this.mousePos = this.getMousePos(evt, this.overviewCanvas);\n        this.clearFocus();\n        this.drawFocusArea();\n        this.drawFocusGraph();\n    }\n\n    clearFocus() {\n        this.hasFocus = false;\n        this.focusAreaContext.clearRect(0, 0, this.focusAreaCanvas.width, this.focusAreaCanvas.height);\n        this.focusGraphContext.clearRect(0, 0, this.focusGraphCanvas.width, this.focusGraphCanvas.height);\n    }\n\n    getMousePos(evt, canvas) {\n        var rect = canvas.getBoundingClientRect();\n\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n\n    drawFocusArea() {\n        var size = this.getFocusAreaSize();\n        this.focusStartX = Math.min(Math.max(0, this.mousePos.x - this.config.focusAreaSize), this.overviewCanvas.width - size);\n        this.focusStartY = Math.min(Math.max(0, this.mousePos.y - this.config.focusAreaSize), this.overviewCanvas.height - size);\n        this.focusAreaContext.strokeStyle = this.config.focusAreaColor;\n        this.focusAreaContext.strokeRect(this.focusStartX, this.focusStartY, size, size);\n    }\n\n    getFocusAreaSize() {\n        return this.config.focusAreaSize * 2;\n    }\n\n    drawFocusGraph() {\n        this.initialiseFocusGraphData();\n        this.drawFocusGraphLabels();\n        this.drawFocusGraphData();\n    }\n\n    initialiseFocusGraphData() {\n        this.focusModel.data = [];\n\n        this.overviewModel.canvasData.forEach((instance) => {\n            if (instance.overviewY >= this.focusStartY && instance.overviewY <= this.focusStartY + this.getFocusAreaSize()) {\n                var modalInstance = {};\n                modalInstance.instance = instance.instance;\n                modalInstance.CPUValues = [];\n                modalInstance.memoryValues = [];\n                modalInstance.storageValues = [];\n                var indexes = [];\n\n                if (instance.CPUValues.length > 0) {\n                    indexes = this.getPointIndexesInFocus(instance.CPUValues);\n                } else if (instance.memoryValues.length > 0) {\n                    indexes = this.getPointIndexesInFocus(instance.memoryValues);\n                } else {\n                    indexes = this.getPointIndexesInFocus(instance.storageValues);\n                }\n\n                this.addPointToFocusByList(modalInstance.CPUValues, instance.CPUValues, indexes);\n                this.addPointToFocusByList(modalInstance.memoryValues, instance.memoryValues, indexes);\n                this.addPointToFocusByList(modalInstance.storageValues, instance.storageValues, indexes);\n\n                this.initialiseInstanceLayers(modalInstance);\n                this.focusModel.data.push(modalInstance);\n            }\n        });\n    }\n\n    getPointIndexesInFocus(list, indexes) {\n        var indexes = [];\n\n        list.forEach((point, index) => {\n            if (point.x >= this.focusStartX && point.x <= this.focusStartX + this.getFocusAreaSize()) {\n                indexes.push(index);\n            }\n        });\n\n        return indexes;\n    }\n\n    addPointToFocusByList(focusList, overviewList, indexes) {\n        indexes.forEach((index) => {\n            focusList.push(overviewList[index]);\n        });\n    }\n\n    initialiseInstanceLayers(instance) {\n        instance.CPUlayers = [];\n        this.initialiseLayersByMetric(instance.CPUlayers, this.config.CPUColors, instance.CPUValues, this.overviewModel.CPU.layerRange);\n\n        instance.memoryLayers = [];\n        this.initialiseLayersByMetric(instance.memoryLayers, this.config.memoryColors, instance.memoryValues, this.overviewModel.memory.layerRange);\n\n        instance.storageLayers = [];\n        this.initialiseLayersByMetric(instance.storageLayers, this.config.storageColors, instance.storageValues, this.overviewModel.storage.layerRange);\n    }\n\n    initialiseLayersByMetric(layers, colors, valueList, layerRange) {\n        colors.forEach(() => {\n            var layer = {};\n            layer.valueList = [];\n            layers.push(layer);\n        });\n\n        valueList.forEach((point) => {\n            var value = point.value;\n\n            layers.forEach((layer) => {\n                layer.valueList.push(value > 0 ? value : 0);\n                value -= layerRange;\n            });\n        });\n    }\n\n    drawFocusGraphLabels() {\n        this.focusModel.horizontalX = 0;\n        this.focusGraphContext.setLineDash([10, 10]);\n        this.focusGraphContext.fillStyle = \"black\";\n        this.focusModel.instanceHeight = (this.config.focusPointHeight + this.config.focusGraphMargins) * this.config.metricCount;\n\n        this.focusModel.data.forEach((instance, index) => {\n            var x = this.config.leftPadding;\n            var label = instance.instance;\n            var metrics = this.focusGraphContext.measureText(label);\n            instance.y = index * (this.focusModel.instanceHeight + this.config.verticalMargin);\n            var labelY = instance.y + this.focusModel.instanceHeight / 2;\n            this.focusGraphContext.fillText(label, x, labelY);\n\n            if (index > 0) {\n                var lineY = instance.y - this.config.verticalMargin / 2;\n                this.focusGraphContext.beginPath();\n                this.focusGraphContext.moveTo(x, lineY);\n                this.focusGraphContext.lineTo(10000, lineY);\n                this.focusGraphContext.stroke();\n            }\n\n            if (metrics.width > this.focusModel.horizontalX) {\n                this.focusModel.horizontalX = metrics.width + this.config.leftPadding;\n            }\n        });\n\n        this.focusModel.horizontalX += this.config.horizontalMargin;\n    }\n\n    drawFocusGraphData() {\n        this.focusModel.data.forEach((instance) => {\n            this.drawFocusGraphDataByLayers(instance, instance.CPUlayers, this.config.CPUColors, this.overviewModel.CPU.layerRange, 0);\n            this.drawFocusGraphDataByLayers(instance, instance.memoryLayers, this.config.memoryColors, this.overviewModel.memory.layerRange, 1);\n            this.drawFocusGraphDataByLayers(instance, instance.storageLayers, this.config.storageColors, this.overviewModel.storage.layerRange, 2);\n        });\n    }\n\n    drawFocusGraphDataByLayers(instance, layers, colors, layerRange, metricIndex) {\n        layers.forEach((layer, layerIndex) => {\n            var y = instance.y + (this.config.focusPointHeight + this.config.focusGraphMargins) * metricIndex + this.config.focusPointHeight;\n            this.focusGraphContext.beginPath();\n            this.focusGraphContext.moveTo(this.focusModel.horizontalX, y);\n            var x = this.focusModel.horizontalX;\n            var previousX = x;\n            var previousValue = 0;\n\n            layer.valueList.forEach((value, valueIndex) => {\n                x += valueIndex * this.config.focusPointWidth;\n                this.moveContextBasedOnValue(value, previousX, previousValue, layerIndex, x, y, layerRange);\n                previousX = x;\n                previousValue = value;\n            });\n\n            this.focusGraphContext.lineTo(x, y);\n            this.focusGraphContext.lineTo(this.focusModel.horizontalX, y);\n            this.focusGraphContext.closePath();\n            this.focusGraphContext.fillStyle = \"#\" + colors[layerIndex];\n            this.focusGraphContext.fill();\n        });\n    }\n\n    moveContextBasedOnValue(value, previousX, previousValue, layerIndex, x, y, layerRange) {\n        if (value == 0) {\n            this.focusGraphContext.lineTo(previousX, y);\n        } else {\n            if (layerIndex > 0 && previousValue == 0) {\n                this.focusGraphContext.lineTo(x, y);\n            }\n\n            if (value >= layerRange) {\n                this.focusGraphContext.lineTo(x, y - this.config.focusPointHeight);\n            } else {\n                this.focusGraphContext.lineTo(x, y - value * this.config.focusPointHeight / layerRange);\n            }\n        }\n    }\n\n    selectNode(evt) {\n        if (!this.updateVariable) {\n            var mousePos = this.getMousePos(event, this.focusGraphCanvas);\n            this.scope.ctrl.menuX = mousePos.x;\n            this.scope.ctrl.menuY = mousePos.y;\n            var height = this.focusModel.instanceHeight + this.config.verticalMargin\n\n            for (var i = 0; i < this.focusModel.data.length; ++i) {\n                if (height * i <= mousePos.y && mousePos.y <= height * (i + 1)) {\n                    var instance = this.focusModel.data[i];\n\n                    this.variableSrv.variables.forEach((v) => {\n                        if (v.name == \"node\") {\n                            this.variableSrv.setOptionAsCurrent(v, {\n                                text: instance.instance,\n                                value: instance.instance\n                            });\n\n                            this.updateVariable = true;\n                            this.variableSrv.variableUpdated(v, true);\n                        }\n                    });\n\n                    break;\n                }\n            }\n        }\n    }\n\n    initialiseCanvases() {\n        this.overviewCanvas = this.elem.find(\"#overviewCanvas\")[0];\n        this.overviewContext = this.overviewCanvas.getContext(\"2d\");\n\n        this.focusAreaCanvas = this.elem.find(\"#focusAreaCanvas\")[0];\n        this.focusAreaContext = this.focusAreaCanvas.getContext(\"2d\");\n\n        this.focusGraphCanvas = this.elem.find(\"#focusGraphCanvas\")[0];\n        this.focusGraphContext = this.focusGraphCanvas.getContext(\"2d\");\n        this.focusGraphContext.font = this.config.fontSize + \"px arial\";\n    }\n\n    initialiseOverviewMixMax() {\n        this.overviewModel.min = -1;\n        this.overviewModel.max = -1;\n        this.initialiseCPUMinMax();\n        this.initialiseMemoryStorageMinMax(this.overviewModel.memory);\n        this.initialiseMemoryStorageMinMax(this.overviewModel.storage);\n    }\n\n    initialiseCPUMinMax(metric) {\n        this.overviewModel.CPU.min = -1;\n        this.overviewModel.CPU.max = -1;\n\n        this.overviewModel.CPU.data.forEach((instance) => {\n            instance.values.forEach((point) => {\n                this.checkAndSetOverviewMinMax(this.overviewModel.CPU, point);\n            });\n        });\n    }\n\n    checkAndSetOverviewMinMax(metric, point) {\n        var value = point[1];\n\n        if (metric.min == -1) {\n            metric.min = value;\n            metric.max = value;\n        } else {\n            if (value < metric.min) {\n                metric.min = value;\n            }\n\n            if (value > metric.max) {\n                metric.max = value;\n            }\n        }\n    }\n\n    initialiseMemoryStorageMinMax(metric) {\n        metric.min = -1;\n        metric.max = -1;\n\n        metric.data.forEach((instance) => {\n            instance.usedPercentageValues.forEach((point) => {\n                this.checkAndSetOverviewMinMax(metric, point);\n            });\n        });\n    }\n\n    initialiseColorMap() {\n        this.initialiseColorMapByMetric(this.overviewModel.CPU, this.config.CPUColors);\n        this.initialiseColorMapByMetric(this.overviewModel.memory, this.config.memoryColors);\n        this.initialiseColorMapByMetric(this.overviewModel.storage, this.config.storageColors);\n    }\n\n    initialiseColorMapByMetric(metric, colors) {\n        metric.colorMap = new Map();\n        metric.layerRange = metric.max / (colors.length - 0.5);\n\n        for (var i = 0; i < colors.length; ++i) {\n            var threshold = {};\n            threshold.min = i * metric.layerRange;\n            threshold.max = threshold.min + metric.layerRange;\n            metric.colorMap.set(threshold, colors[i]);\n        }\n    }\n\n    renderOverview() {\n        if (this.checkMetricHasData(this.overviewModel.CPU) ||\n            this.checkMetricHasData(this.overviewModel.memory) ||\n            this.checkMetricHasData(this.overviewModel.storage)) {\n            this.overviewContext.clearRect(0, 0, this.overviewCanvas.width, this.overviewCanvas.height);\n            this.clearFocus();\n            this.drawOverviewData();\n        }\n    }\n\n    checkMetricHasData(metric) {\n        return metric.data && metric.data.length > 0;\n    }\n\n    drawOverviewData() {\n        var parent = this;\n\n        this.$timeout(() => {\n            parent.drawOverviewDataWrapper.bind(parent)();\n        }, 100);\n    }\n\n    drawOverviewDataWrapper() {\n        var firstInstance = this.overviewModel.canvasData[0];\n        var maxLength = Math.max(firstInstance.CPUValues.length, firstInstance.memoryValues.length, firstInstance.storageValues.length);\n\n        this.scope.ctrl.overviewWidth = maxLength * this.config.overviewPointHeight;\n        this.scope.ctrl.overviewHeight = this.overviewModel.canvasData.length * this.config.overviewPointHeight * this.config.metricCount * 3;\n        this.scope.ctrl.focusGraphMarginTop = this.scope.ctrl.overviewHeight + this.config.paddingBetweenGraphs;\n        this.scope.$apply();\n\n        this.overviewModel.canvasData.forEach((instance, index) => {\n            instance.overviewY = index * this.config.overviewPointHeight * this.config.metricCount * 3;\n            this.drawMetricOverviewData(instance.CPUValues, instance, this.overviewModel.CPU.colorMap, 0);\n            this.drawMetricOverviewData(instance.memoryValues, instance, this.overviewModel.memory.colorMap, 1);\n            this.drawMetricOverviewData(instance.storageValues, instance, this.overviewModel.storage.colorMap, 2);\n        });\n    }\n\n    drawMetricOverviewData(valueList, instance, colorMap, index) {\n        for (var i = 0; i < valueList.length; ++i) {\n            var point = valueList[i];\n            point.x = this.config.leftPadding + i * this.config.overviewPointWidth;\n            point.color = this.getColorFromMap(point.value, colorMap);\n            this.overviewContext.fillStyle = point.color;\n            var y = instance.overviewY + index * this.config.overviewPointHeight * 2;\n            this.overviewContext.fillRect(point.x, y, this.config.overviewPointHeight, this.config.overviewPointHeight);\n        }\n    }\n\n    getColorFromMap(value, map) {\n        var result;\n\n        map.forEach((color, threshold) => {\n            if (threshold.min <= value && value <= threshold.max) {\n                result = color;\n            }\n        });\n\n        return \"#\" + result;\n    }\n}\n\nHeatmapCtrl.templateUrl = \"module.html\";"],"file":"heatmap_ctrl.js"}